
Powerboard2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003784  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003930  08003930  00004930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003970  08003970  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003970  08003970  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003970  08003970  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003970  08003970  00004970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003974  08003974  00004974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003978  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003984  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003984  00005110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec9e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c3  00000000  00000000  00013cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00015ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6b  00000000  00000000  00016d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297cd  00000000  00000000  000178eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010899  00000000  00000000  000410b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105da2  00000000  00000000  00051951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001576f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee0  00000000  00000000  00157738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0015b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003918 	.word	0x08003918

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003918 	.word	0x08003918

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f0:	f000 fb29 	bl	8000846 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f4:	f000 f80a 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f8:	f000 f93a 	bl	8000470 <MX_GPIO_Init>
  MX_CAN1_Init();
 80001fc:	f000 f8c2 	bl	8000384 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000200:	f000 f84a 	bl	8000298 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000204:	f000 f8f4 	bl	80003f0 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000208:	bf00      	nop
 800020a:	e7fd      	b.n	8000208 <main+0x1c>

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b096      	sub	sp, #88	@ 0x58
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0314 	add.w	r3, r7, #20
 8000216:	2244      	movs	r2, #68	@ 0x44
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f003 fb50 	bl	80038c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	463b      	mov	r3, r7
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800022e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000232:	f002 f81f 	bl	8002274 <HAL_PWREx_ControlVoltageScaling>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800023c:	f000 f962 	bl	8000504 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000240:	2310      	movs	r3, #16
 8000242:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000248:	2300      	movs	r3, #0
 800024a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800024c:	2360      	movs	r3, #96	@ 0x60
 800024e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000250:	2300      	movs	r3, #0
 8000252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000254:	f107 0314 	add.w	r3, r7, #20
 8000258:	4618      	mov	r0, r3
 800025a:	f002 f861 	bl	8002320 <HAL_RCC_OscConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000264:	f000 f94e 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000268:	230f      	movs	r3, #15
 800026a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800026c:	2300      	movs	r3, #0
 800026e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027c:	463b      	mov	r3, r7
 800027e:	2100      	movs	r1, #0
 8000280:	4618      	mov	r0, r3
 8000282:	f002 fc67 	bl	8002b54 <HAL_RCC_ClockConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800028c:	f000 f93a 	bl	8000504 <Error_Handler>
  }
}
 8000290:	bf00      	nop
 8000292:	3758      	adds	r7, #88	@ 0x58
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b08a      	sub	sp, #40	@ 0x28
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800029e:	f107 031c 	add.w	r3, r7, #28
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]
 80002b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000378 <MX_ADC1_Init+0xe0>)
 80002bc:	4a2f      	ldr	r2, [pc, #188]	@ (800037c <MX_ADC1_Init+0xe4>)
 80002be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000378 <MX_ADC1_Init+0xe0>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000378 <MX_ADC1_Init+0xe0>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000378 <MX_ADC1_Init+0xe0>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002d2:	4b29      	ldr	r3, [pc, #164]	@ (8000378 <MX_ADC1_Init+0xe0>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002d8:	4b27      	ldr	r3, [pc, #156]	@ (8000378 <MX_ADC1_Init+0xe0>)
 80002da:	2204      	movs	r2, #4
 80002dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002de:	4b26      	ldr	r3, [pc, #152]	@ (8000378 <MX_ADC1_Init+0xe0>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e4:	4b24      	ldr	r3, [pc, #144]	@ (8000378 <MX_ADC1_Init+0xe0>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002ea:	4b23      	ldr	r3, [pc, #140]	@ (8000378 <MX_ADC1_Init+0xe0>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f0:	4b21      	ldr	r3, [pc, #132]	@ (8000378 <MX_ADC1_Init+0xe0>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000378 <MX_ADC1_Init+0xe0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000378 <MX_ADC1_Init+0xe0>)
 8000300:	2200      	movs	r2, #0
 8000302:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000304:	4b1c      	ldr	r3, [pc, #112]	@ (8000378 <MX_ADC1_Init+0xe0>)
 8000306:	2200      	movs	r2, #0
 8000308:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800030c:	4b1a      	ldr	r3, [pc, #104]	@ (8000378 <MX_ADC1_Init+0xe0>)
 800030e:	2200      	movs	r2, #0
 8000310:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000312:	4b19      	ldr	r3, [pc, #100]	@ (8000378 <MX_ADC1_Init+0xe0>)
 8000314:	2200      	movs	r2, #0
 8000316:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800031a:	4817      	ldr	r0, [pc, #92]	@ (8000378 <MX_ADC1_Init+0xe0>)
 800031c:	f000 fca8 	bl	8000c70 <HAL_ADC_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000326:	f000 f8ed 	bl	8000504 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800032a:	2300      	movs	r3, #0
 800032c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800032e:	f107 031c 	add.w	r3, r7, #28
 8000332:	4619      	mov	r1, r3
 8000334:	4810      	ldr	r0, [pc, #64]	@ (8000378 <MX_ADC1_Init+0xe0>)
 8000336:	f001 fa21 	bl	800177c <HAL_ADCEx_MultiModeConfigChannel>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000340:	f000 f8e0 	bl	8000504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000344:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <MX_ADC1_Init+0xe8>)
 8000346:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000348:	2306      	movs	r3, #6
 800034a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000350:	237f      	movs	r3, #127	@ 0x7f
 8000352:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000354:	2304      	movs	r3, #4
 8000356:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4619      	mov	r1, r3
 8000360:	4805      	ldr	r0, [pc, #20]	@ (8000378 <MX_ADC1_Init+0xe0>)
 8000362:	f000 fdd9 	bl	8000f18 <HAL_ADC_ConfigChannel>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800036c:	f000 f8ca 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	3728      	adds	r7, #40	@ 0x28
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000028 	.word	0x20000028
 800037c:	50040000 	.word	0x50040000
 8000380:	04300002 	.word	0x04300002

08000384 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000388:	4b17      	ldr	r3, [pc, #92]	@ (80003e8 <MX_CAN1_Init+0x64>)
 800038a:	4a18      	ldr	r2, [pc, #96]	@ (80003ec <MX_CAN1_Init+0x68>)
 800038c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800038e:	4b16      	ldr	r3, [pc, #88]	@ (80003e8 <MX_CAN1_Init+0x64>)
 8000390:	2202      	movs	r2, #2
 8000392:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000394:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <MX_CAN1_Init+0x64>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800039a:	4b13      	ldr	r3, [pc, #76]	@ (80003e8 <MX_CAN1_Init+0x64>)
 800039c:	2200      	movs	r2, #0
 800039e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80003a0:	4b11      	ldr	r3, [pc, #68]	@ (80003e8 <MX_CAN1_Init+0x64>)
 80003a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80003a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <MX_CAN1_Init+0x64>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	@ (80003e8 <MX_CAN1_Init+0x64>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <MX_CAN1_Init+0x64>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	@ (80003e8 <MX_CAN1_Init+0x64>)
 80003bc:	2200      	movs	r2, #0
 80003be:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80003c0:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <MX_CAN1_Init+0x64>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	@ (80003e8 <MX_CAN1_Init+0x64>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80003cc:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <MX_CAN1_Init+0x64>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80003d2:	4805      	ldr	r0, [pc, #20]	@ (80003e8 <MX_CAN1_Init+0x64>)
 80003d4:	f001 fa82 	bl	80018dc <HAL_CAN_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80003de:	f000 f891 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000090 	.word	0x20000090
 80003ec:	40006400 	.word	0x40006400

080003f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <MX_I2C2_Init+0x74>)
 80003f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000468 <MX_I2C2_Init+0x78>)
 80003f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <MX_I2C2_Init+0x74>)
 80003fc:	4a1b      	ldr	r2, [pc, #108]	@ (800046c <MX_I2C2_Init+0x7c>)
 80003fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000400:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <MX_I2C2_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000406:	4b17      	ldr	r3, [pc, #92]	@ (8000464 <MX_I2C2_Init+0x74>)
 8000408:	2201      	movs	r2, #1
 800040a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800040c:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <MX_I2C2_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000412:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <MX_I2C2_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000418:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <MX_I2C2_Init+0x74>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800041e:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <MX_I2C2_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000424:	4b0f      	ldr	r3, [pc, #60]	@ (8000464 <MX_I2C2_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800042a:	480e      	ldr	r0, [pc, #56]	@ (8000464 <MX_I2C2_Init+0x74>)
 800042c:	f001 fde2 	bl	8001ff4 <HAL_I2C_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000436:	f000 f865 	bl	8000504 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800043a:	2100      	movs	r1, #0
 800043c:	4809      	ldr	r0, [pc, #36]	@ (8000464 <MX_I2C2_Init+0x74>)
 800043e:	f001 fe74 	bl	800212a <HAL_I2CEx_ConfigAnalogFilter>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000448:	f000 f85c 	bl	8000504 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800044c:	2100      	movs	r1, #0
 800044e:	4805      	ldr	r0, [pc, #20]	@ (8000464 <MX_I2C2_Init+0x74>)
 8000450:	f001 feb6 	bl	80021c0 <HAL_I2CEx_ConfigDigitalFilter>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800045a:	f000 f853 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	200000b8 	.word	0x200000b8
 8000468:	40005800 	.word	0x40005800
 800046c:	00100d14 	.word	0x00100d14

08000470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b088      	sub	sp, #32
 8000474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000476:	f107 030c 	add.w	r3, r7, #12
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000486:	4b1e      	ldr	r3, [pc, #120]	@ (8000500 <MX_GPIO_Init+0x90>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048a:	4a1d      	ldr	r2, [pc, #116]	@ (8000500 <MX_GPIO_Init+0x90>)
 800048c:	f043 0304 	orr.w	r3, r3, #4
 8000490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000492:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <MX_GPIO_Init+0x90>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000496:	f003 0304 	and.w	r3, r3, #4
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049e:	4b18      	ldr	r3, [pc, #96]	@ (8000500 <MX_GPIO_Init+0x90>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a2:	4a17      	ldr	r2, [pc, #92]	@ (8000500 <MX_GPIO_Init+0x90>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004aa:	4b15      	ldr	r3, [pc, #84]	@ (8000500 <MX_GPIO_Init+0x90>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b6:	4b12      	ldr	r3, [pc, #72]	@ (8000500 <MX_GPIO_Init+0x90>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ba:	4a11      	ldr	r2, [pc, #68]	@ (8000500 <MX_GPIO_Init+0x90>)
 80004bc:	f043 0302 	orr.w	r3, r3, #2
 80004c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <MX_GPIO_Init+0x90>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c6:	f003 0302 	and.w	r3, r3, #2
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ERROR_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2103      	movs	r1, #3
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d6:	f001 fd75 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERROR_LED_Pin OK_LED_Pin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin|OK_LED_Pin;
 80004da:	2303      	movs	r3, #3
 80004dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004de:	2301      	movs	r3, #1
 80004e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	4619      	mov	r1, r3
 80004f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f4:	f001 fbd4 	bl	8001ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004f8:	bf00      	nop
 80004fa:	3720      	adds	r7, #32
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <Error_Handler+0x8>

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <HAL_MspInit+0x44>)
 8000518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800051a:	4a0e      	ldr	r2, [pc, #56]	@ (8000554 <HAL_MspInit+0x44>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6613      	str	r3, [r2, #96]	@ 0x60
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <HAL_MspInit+0x44>)
 8000524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <HAL_MspInit+0x44>)
 8000530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000532:	4a08      	ldr	r2, [pc, #32]	@ (8000554 <HAL_MspInit+0x44>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000538:	6593      	str	r3, [r2, #88]	@ 0x58
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <HAL_MspInit+0x44>)
 800053c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800053e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b0ac      	sub	sp, #176	@ 0xb0
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000570:	f107 0310 	add.w	r3, r7, #16
 8000574:	228c      	movs	r2, #140	@ 0x8c
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f003 f9a1 	bl	80038c0 <memset>
  if(hadc->Instance==ADC1)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a27      	ldr	r2, [pc, #156]	@ (8000620 <HAL_ADC_MspInit+0xc8>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d146      	bne.n	8000616 <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000588:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800058c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800058e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000592:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000596:	2301      	movs	r3, #1
 8000598:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800059a:	2301      	movs	r3, #1
 800059c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800059e:	2310      	movs	r3, #16
 80005a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80005b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 fcb7 	bl	8002f2c <HAL_RCCEx_PeriphCLKConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80005c4:	f7ff ff9e 	bl	8000504 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005c8:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <HAL_ADC_MspInit+0xcc>)
 80005ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005cc:	4a15      	ldr	r2, [pc, #84]	@ (8000624 <HAL_ADC_MspInit+0xcc>)
 80005ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <HAL_ADC_MspInit+0xcc>)
 80005d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e0:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <HAL_ADC_MspInit+0xcc>)
 80005e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000624 <HAL_ADC_MspInit+0xcc>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <HAL_ADC_MspInit+0xcc>)
 80005ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = SUPP_BATT_VOLT_Pin;
 80005f8:	2301      	movs	r3, #1
 80005fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fe:	2303      	movs	r3, #3
 8000600:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SUPP_BATT_VOLT_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800060e:	4619      	mov	r1, r3
 8000610:	4805      	ldr	r0, [pc, #20]	@ (8000628 <HAL_ADC_MspInit+0xd0>)
 8000612:	f001 fb45 	bl	8001ca0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000616:	bf00      	nop
 8000618:	37b0      	adds	r7, #176	@ 0xb0
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	50040000 	.word	0x50040000
 8000624:	40021000 	.word	0x40021000
 8000628:	48000800 	.word	0x48000800

0800062c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	@ 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a17      	ldr	r2, [pc, #92]	@ (80006a8 <HAL_CAN_MspInit+0x7c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d128      	bne.n	80006a0 <HAL_CAN_MspInit+0x74>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800064e:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <HAL_CAN_MspInit+0x80>)
 8000650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000652:	4a16      	ldr	r2, [pc, #88]	@ (80006ac <HAL_CAN_MspInit+0x80>)
 8000654:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000658:	6593      	str	r3, [r2, #88]	@ 0x58
 800065a:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <HAL_CAN_MspInit+0x80>)
 800065c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800065e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <HAL_CAN_MspInit+0x80>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	4a10      	ldr	r2, [pc, #64]	@ (80006ac <HAL_CAN_MspInit+0x80>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000672:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <HAL_CAN_MspInit+0x80>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800067e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000690:	2309      	movs	r3, #9
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <HAL_CAN_MspInit+0x84>)
 800069c:	f001 fb00 	bl	8001ca0 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80006a0:	bf00      	nop
 80006a2:	3728      	adds	r7, #40	@ 0x28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40006400 	.word	0x40006400
 80006ac:	40021000 	.word	0x40021000
 80006b0:	48000400 	.word	0x48000400

080006b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b0ac      	sub	sp, #176	@ 0xb0
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	228c      	movs	r2, #140	@ 0x8c
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 f8f3 	bl	80038c0 <memset>
  if(hi2c->Instance==I2C2)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a21      	ldr	r2, [pc, #132]	@ (8000764 <HAL_I2C_MspInit+0xb0>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d13b      	bne.n	800075c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006e4:	2380      	movs	r3, #128	@ 0x80
 80006e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fc1b 	bl	8002f2c <HAL_RCCEx_PeriphCLKConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006fc:	f7ff ff02 	bl	8000504 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <HAL_I2C_MspInit+0xb4>)
 8000702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000704:	4a18      	ldr	r2, [pc, #96]	@ (8000768 <HAL_I2C_MspInit+0xb4>)
 8000706:	f043 0302 	orr.w	r3, r3, #2
 800070a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <HAL_I2C_MspInit+0xb4>)
 800070e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000718:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800071c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000720:	2312      	movs	r3, #18
 8000722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000732:	2304      	movs	r3, #4
 8000734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800073c:	4619      	mov	r1, r3
 800073e:	480b      	ldr	r0, [pc, #44]	@ (800076c <HAL_I2C_MspInit+0xb8>)
 8000740:	f001 faae 	bl	8001ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000744:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <HAL_I2C_MspInit+0xb4>)
 8000746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000748:	4a07      	ldr	r2, [pc, #28]	@ (8000768 <HAL_I2C_MspInit+0xb4>)
 800074a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800074e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000750:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <HAL_I2C_MspInit+0xb4>)
 8000752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000754:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800075c:	bf00      	nop
 800075e:	37b0      	adds	r7, #176	@ 0xb0
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40005800 	.word	0x40005800
 8000768:	40021000 	.word	0x40021000
 800076c:	48000400 	.word	0x48000400

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <NMI_Handler+0x4>

08000778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <MemManage_Handler+0x4>

08000788 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <UsageFault_Handler+0x4>

08000798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c6:	f000 f893 	bl	80008f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <SystemInit+0x20>)
 80007d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007da:	4a05      	ldr	r2, [pc, #20]	@ (80007f0 <SystemInit+0x20>)
 80007dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800082c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f8:	f7ff ffea 	bl	80007d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480c      	ldr	r0, [pc, #48]	@ (8000830 <LoopForever+0x6>)
  ldr r1, =_edata
 80007fe:	490d      	ldr	r1, [pc, #52]	@ (8000834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000800:	4a0d      	ldr	r2, [pc, #52]	@ (8000838 <LoopForever+0xe>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000814:	4c0a      	ldr	r4, [pc, #40]	@ (8000840 <LoopForever+0x16>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000822:	f003 f855 	bl	80038d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000826:	f7ff fce1 	bl	80001ec <main>

0800082a <LoopForever>:

LoopForever:
    b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800082c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000838:	08003978 	.word	0x08003978
  ldr r2, =_sbss
 800083c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000840:	20000110 	.word	0x20000110

08000844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_2_IRQHandler>

08000846 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800084c:	2300      	movs	r3, #0
 800084e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000850:	2003      	movs	r0, #3
 8000852:	f001 f9f1 	bl	8001c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000856:	200f      	movs	r0, #15
 8000858:	f000 f80e 	bl	8000878 <HAL_InitTick>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	e001      	b.n	800086c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000868:	f7ff fe52 	bl	8000510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800086c:	79fb      	ldrb	r3, [r7, #7]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000884:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <HAL_InitTick+0x6c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d023      	beq.n	80008d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800088c:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <HAL_InitTick+0x70>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <HAL_InitTick+0x6c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 f9ef 	bl	8001c86 <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d10f      	bne.n	80008ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b0f      	cmp	r3, #15
 80008b2:	d809      	bhi.n	80008c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b4:	2200      	movs	r2, #0
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	f001 f9c7 	bl	8001c4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008c0:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <HAL_InitTick+0x74>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	e007      	b.n	80008d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
 80008cc:	e004      	b.n	80008d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	73fb      	strb	r3, [r7, #15]
 80008d2:	e001      	b.n	80008d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000000 	.word	0x20000000
 80008ec:	20000004 	.word	0x20000004

080008f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <HAL_IncTick+0x20>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_IncTick+0x24>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4a04      	ldr	r2, [pc, #16]	@ (8000914 <HAL_IncTick+0x24>)
 8000902:	6013      	str	r3, [r2, #0]
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	20000008 	.word	0x20000008
 8000914:	2000010c 	.word	0x2000010c

08000918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return uwTick;
 800091c:	4b03      	ldr	r3, [pc, #12]	@ (800092c <HAL_GetTick+0x14>)
 800091e:	681b      	ldr	r3, [r3, #0]
}
 8000920:	4618      	mov	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	2000010c 	.word	0x2000010c

08000930 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	431a      	orrs	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	609a      	str	r2, [r3, #8]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	431a      	orrs	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	609a      	str	r2, [r3, #8]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000998:	b480      	push	{r7}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	3360      	adds	r3, #96	@ 0x60
 80009aa:	461a      	mov	r2, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <LL_ADC_SetOffset+0x44>)
 80009ba:	4013      	ands	r3, r2
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	430a      	orrs	r2, r1
 80009c6:	4313      	orrs	r3, r2
 80009c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80009d0:	bf00      	nop
 80009d2:	371c      	adds	r7, #28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	03fff000 	.word	0x03fff000

080009e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3360      	adds	r3, #96	@ 0x60
 80009ee:	461a      	mov	r2, r3
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	3360      	adds	r3, #96	@ 0x60
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	4413      	add	r3, r2
 8000a24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	431a      	orrs	r2, r3
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000a36:	bf00      	nop
 8000a38:	371c      	adds	r7, #28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	695b      	ldr	r3, [r3, #20]
 8000a50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	431a      	orrs	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	615a      	str	r2, [r3, #20]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b087      	sub	sp, #28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3330      	adds	r3, #48	@ 0x30
 8000a78:	461a      	mov	r2, r3
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	f003 030c 	and.w	r3, r3, #12
 8000a84:	4413      	add	r3, r2
 8000a86:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	f003 031f 	and.w	r3, r3, #31
 8000a92:	211f      	movs	r1, #31
 8000a94:	fa01 f303 	lsl.w	r3, r1, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	0e9b      	lsrs	r3, r3, #26
 8000aa0:	f003 011f 	and.w	r1, r3, #31
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	f003 031f 	and.w	r3, r3, #31
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ab4:	bf00      	nop
 8000ab6:	371c      	adds	r7, #28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b087      	sub	sp, #28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3314      	adds	r3, #20
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	0e5b      	lsrs	r3, r3, #25
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	4413      	add	r3, r2
 8000ade:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	0d1b      	lsrs	r3, r3, #20
 8000ae8:	f003 031f 	and.w	r3, r3, #31
 8000aec:	2107      	movs	r1, #7
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	401a      	ands	r2, r3
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	0d1b      	lsrs	r3, r3, #20
 8000afa:	f003 031f 	and.w	r3, r3, #31
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	431a      	orrs	r2, r3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000b0a:	bf00      	nop
 8000b0c:	371c      	adds	r7, #28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b30:	43db      	mvns	r3, r3
 8000b32:	401a      	ands	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0318 	and.w	r3, r3, #24
 8000b3a:	4908      	ldr	r1, [pc, #32]	@ (8000b5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000b3c:	40d9      	lsrs	r1, r3
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	400b      	ands	r3, r1
 8000b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b46:	431a      	orrs	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	0007ffff 	.word	0x0007ffff

08000b60 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000b70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	6093      	str	r3, [r2, #8]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b98:	d101      	bne.n	8000b9e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000bbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000bc0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000be8:	d101      	bne.n	8000bee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000bea:	2301      	movs	r3, #1
 8000bec:	e000      	b.n	8000bf0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d101      	bne.n	8000c14 <LL_ADC_IsEnabled+0x18>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e000      	b.n	8000c16 <LL_ADC_IsEnabled+0x1a>
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	d101      	bne.n	8000c3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c36:	2301      	movs	r3, #1
 8000c38:	e000      	b.n	8000c3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	2b08      	cmp	r3, #8
 8000c5a:	d101      	bne.n	8000c60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b089      	sub	sp, #36	@ 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e133      	b.n	8000ef2 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d109      	bne.n	8000cac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff fc5d 	bl	8000558 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff67 	bl	8000b84 <LL_ADC_IsDeepPowerDownEnabled>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d004      	beq.n	8000cc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff4d 	bl	8000b60 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff82 	bl	8000bd4 <LL_ADC_IsInternalRegulatorEnabled>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d115      	bne.n	8000d02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff66 	bl	8000bac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ce0:	4b86      	ldr	r3, [pc, #536]	@ (8000efc <HAL_ADC_Init+0x28c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	099b      	lsrs	r3, r3, #6
 8000ce6:	4a86      	ldr	r2, [pc, #536]	@ (8000f00 <HAL_ADC_Init+0x290>)
 8000ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cec:	099b      	lsrs	r3, r3, #6
 8000cee:	3301      	adds	r3, #1
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000cf4:	e002      	b.n	8000cfc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f9      	bne.n	8000cf6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff64 	bl	8000bd4 <LL_ADC_IsInternalRegulatorEnabled>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10d      	bne.n	8000d2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d16:	f043 0210 	orr.w	r2, r3, #16
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d22:	f043 0201 	orr.w	r2, r3, #1
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff75 	bl	8000c22 <LL_ADC_REG_IsConversionOngoing>
 8000d38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 80cc 	bne.w	8000ee0 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f040 80c8 	bne.w	8000ee0 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d54:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000d58:	f043 0202 	orr.w	r2, r3, #2
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff49 	bl	8000bfc <LL_ADC_IsEnabled>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d115      	bne.n	8000d9c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000d70:	4864      	ldr	r0, [pc, #400]	@ (8000f04 <HAL_ADC_Init+0x294>)
 8000d72:	f7ff ff43 	bl	8000bfc <LL_ADC_IsEnabled>
 8000d76:	4604      	mov	r4, r0
 8000d78:	4863      	ldr	r0, [pc, #396]	@ (8000f08 <HAL_ADC_Init+0x298>)
 8000d7a:	f7ff ff3f 	bl	8000bfc <LL_ADC_IsEnabled>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	431c      	orrs	r4, r3
 8000d82:	4862      	ldr	r0, [pc, #392]	@ (8000f0c <HAL_ADC_Init+0x29c>)
 8000d84:	f7ff ff3a 	bl	8000bfc <LL_ADC_IsEnabled>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	4323      	orrs	r3, r4
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d105      	bne.n	8000d9c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	4619      	mov	r1, r3
 8000d96:	485e      	ldr	r0, [pc, #376]	@ (8000f10 <HAL_ADC_Init+0x2a0>)
 8000d98:	f7ff fdca 	bl	8000930 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7e5b      	ldrb	r3, [r3, #25]
 8000da0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000da6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000dac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000db2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d106      	bne.n	8000dd8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	045b      	lsls	r3, r3, #17
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d009      	beq.n	8000df4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	4b46      	ldr	r3, [pc, #280]	@ (8000f14 <HAL_ADC_Init+0x2a4>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6812      	ldr	r2, [r2, #0]
 8000e02:	69b9      	ldr	r1, [r7, #24]
 8000e04:	430b      	orrs	r3, r1
 8000e06:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff1b 	bl	8000c48 <LL_ADC_INJ_IsConversionOngoing>
 8000e12:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d140      	bne.n	8000e9c <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d13d      	bne.n	8000e9c <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7e1b      	ldrb	r3, [r3, #24]
 8000e28:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e2a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000e32:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000e34:	4313      	orrs	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e42:	f023 0306 	bic.w	r3, r3, #6
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	69b9      	ldr	r1, [r7, #24]
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d118      	bne.n	8000e8c <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000e64:	f023 0304 	bic.w	r3, r3, #4
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000e70:	4311      	orrs	r1, r2
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000e76:	4311      	orrs	r1, r2
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f042 0201 	orr.w	r2, r2, #1
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	e007      	b.n	8000e9c <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0201 	bic.w	r2, r2, #1
 8000e9a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d10c      	bne.n	8000ebe <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f023 010f 	bic.w	r1, r3, #15
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	1e5a      	subs	r2, r3, #1
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ebc:	e007      	b.n	8000ece <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 020f 	bic.w	r2, r2, #15
 8000ecc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	f023 0303 	bic.w	r3, r3, #3
 8000ed6:	f043 0201 	orr.w	r2, r3, #1
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	659a      	str	r2, [r3, #88]	@ 0x58
 8000ede:	e007      	b.n	8000ef0 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee4:	f043 0210 	orr.w	r2, r3, #16
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000ef0:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3724      	adds	r7, #36	@ 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd90      	pop	{r4, r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000000 	.word	0x20000000
 8000f00:	053e2d63 	.word	0x053e2d63
 8000f04:	50040000 	.word	0x50040000
 8000f08:	50040100 	.word	0x50040100
 8000f0c:	50040200 	.word	0x50040200
 8000f10:	50040300 	.word	0x50040300
 8000f14:	fff0c007 	.word	0xfff0c007

08000f18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0b6      	sub	sp, #216	@ 0xd8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d101      	bne.n	8000f3a <HAL_ADC_ConfigChannel+0x22>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e3e3      	b.n	8001702 <HAL_ADC_ConfigChannel+0x7ea>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fe6b 	bl	8000c22 <LL_ADC_REG_IsConversionOngoing>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f040 83c4 	bne.w	80016dc <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b05      	cmp	r3, #5
 8000f62:	d824      	bhi.n	8000fae <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d81b      	bhi.n	8000fa6 <HAL_ADC_ConfigChannel+0x8e>
 8000f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f74 <HAL_ADC_ConfigChannel+0x5c>)
 8000f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f74:	08000f85 	.word	0x08000f85
 8000f78:	08000f8d 	.word	0x08000f8d
 8000f7c:	08000f95 	.word	0x08000f95
 8000f80:	08000f9d 	.word	0x08000f9d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8000f84:	230c      	movs	r3, #12
 8000f86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000f8a:	e010      	b.n	8000fae <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8000f8c:	2312      	movs	r3, #18
 8000f8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000f92:	e00c      	b.n	8000fae <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8000f94:	2318      	movs	r3, #24
 8000f96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000f9a:	e008      	b.n	8000fae <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8000f9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000fa4:	e003      	b.n	8000fae <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000fac:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8000fbc:	f7ff fd54 	bl	8000a68 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe2c 	bl	8000c22 <LL_ADC_REG_IsConversionOngoing>
 8000fca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fe38 	bl	8000c48 <LL_ADC_INJ_IsConversionOngoing>
 8000fd8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000fdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f040 81bf 	bne.w	8001364 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000fe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f040 81ba 	bne.w	8001364 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ff8:	d10f      	bne.n	800101a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	f7ff fd5b 	bl	8000ac0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fd15 	bl	8000a42 <LL_ADC_SetSamplingTimeCommonConfig>
 8001018:	e00e      	b.n	8001038 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	6819      	ldr	r1, [r3, #0]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	461a      	mov	r2, r3
 8001028:	f7ff fd4a 	bl	8000ac0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fd05 	bl	8000a42 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	695a      	ldr	r2, [r3, #20]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	08db      	lsrs	r3, r3, #3
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	2b04      	cmp	r3, #4
 8001058:	d00a      	beq.n	8001070 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	6919      	ldr	r1, [r3, #16]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800106a:	f7ff fc95 	bl	8000998 <LL_ADC_SetOffset>
 800106e:	e179      	b.n	8001364 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fcb2 	bl	80009e0 <LL_ADC_GetOffsetChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10a      	bne.n	800109c <HAL_ADC_ConfigChannel+0x184>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fca7 	bl	80009e0 <LL_ADC_GetOffsetChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	0e9b      	lsrs	r3, r3, #26
 8001096:	f003 021f 	and.w	r2, r3, #31
 800109a:	e01e      	b.n	80010da <HAL_ADC_ConfigChannel+0x1c2>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fc9c 	bl	80009e0 <LL_ADC_GetOffsetChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80010b2:	fa93 f3a3 	rbit	r3, r3
 80010b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80010be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80010c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80010ca:	2320      	movs	r3, #32
 80010cc:	e004      	b.n	80010d8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80010ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80010d2:	fab3 f383 	clz	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d105      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x1da>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	0e9b      	lsrs	r3, r3, #26
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	e018      	b.n	8001124 <HAL_ADC_ConfigChannel+0x20c>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80010fe:	fa93 f3a3 	rbit	r3, r3
 8001102:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001106:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800110a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800110e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001116:	2320      	movs	r3, #32
 8001118:	e004      	b.n	8001124 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800111a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800111e:	fab3 f383 	clz	r3, r3
 8001122:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001124:	429a      	cmp	r2, r3
 8001126:	d106      	bne.n	8001136 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fc6b 	bl	8000a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2101      	movs	r1, #1
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fc4f 	bl	80009e0 <LL_ADC_GetOffsetChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10a      	bne.n	8001162 <HAL_ADC_ConfigChannel+0x24a>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fc44 	bl	80009e0 <LL_ADC_GetOffsetChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	0e9b      	lsrs	r3, r3, #26
 800115c:	f003 021f 	and.w	r2, r3, #31
 8001160:	e01e      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x288>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2101      	movs	r1, #1
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fc39 	bl	80009e0 <LL_ADC_GetOffsetChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001180:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001184:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001188:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001190:	2320      	movs	r3, #32
 8001192:	e004      	b.n	800119e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001194:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001198:	fab3 f383 	clz	r3, r3
 800119c:	b2db      	uxtb	r3, r3
 800119e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d105      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x2a0>
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0e9b      	lsrs	r3, r3, #26
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	e018      	b.n	80011ea <HAL_ADC_ConfigChannel+0x2d2>
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80011c4:	fa93 f3a3 	rbit	r3, r3
 80011c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80011cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80011d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80011d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80011dc:	2320      	movs	r3, #32
 80011de:	e004      	b.n	80011ea <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80011e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011e4:	fab3 f383 	clz	r3, r3
 80011e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d106      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2200      	movs	r2, #0
 80011f4:	2101      	movs	r1, #1
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fc08 	bl	8000a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2102      	movs	r1, #2
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fbec 	bl	80009e0 <LL_ADC_GetOffsetChannel>
 8001208:	4603      	mov	r3, r0
 800120a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10a      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x310>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2102      	movs	r1, #2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fbe1 	bl	80009e0 <LL_ADC_GetOffsetChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	0e9b      	lsrs	r3, r3, #26
 8001222:	f003 021f 	and.w	r2, r3, #31
 8001226:	e01e      	b.n	8001266 <HAL_ADC_ConfigChannel+0x34e>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2102      	movs	r1, #2
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fbd6 	bl	80009e0 <LL_ADC_GetOffsetChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001246:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800124a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800124e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001256:	2320      	movs	r3, #32
 8001258:	e004      	b.n	8001264 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800125a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800125e:	fab3 f383 	clz	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800126e:	2b00      	cmp	r3, #0
 8001270:	d105      	bne.n	800127e <HAL_ADC_ConfigChannel+0x366>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0e9b      	lsrs	r3, r3, #26
 8001278:	f003 031f 	and.w	r3, r3, #31
 800127c:	e014      	b.n	80012a8 <HAL_ADC_ConfigChannel+0x390>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001284:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800128c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800128e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001292:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800129a:	2320      	movs	r3, #32
 800129c:	e004      	b.n	80012a8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800129e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d106      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2200      	movs	r2, #0
 80012b2:	2102      	movs	r1, #2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fba9 	bl	8000a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2103      	movs	r1, #3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fb8d 	bl	80009e0 <LL_ADC_GetOffsetChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10a      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x3ce>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2103      	movs	r1, #3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fb82 	bl	80009e0 <LL_ADC_GetOffsetChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	0e9b      	lsrs	r3, r3, #26
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	e017      	b.n	8001316 <HAL_ADC_ConfigChannel+0x3fe>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2103      	movs	r1, #3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fb77 	bl	80009e0 <LL_ADC_GetOffsetChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80012f8:	fa93 f3a3 	rbit	r3, r3
 80012fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80012fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001300:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001302:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8001308:	2320      	movs	r3, #32
 800130a:	e003      	b.n	8001314 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800130c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800131e:	2b00      	cmp	r3, #0
 8001320:	d105      	bne.n	800132e <HAL_ADC_ConfigChannel+0x416>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	0e9b      	lsrs	r3, r3, #26
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	e011      	b.n	8001352 <HAL_ADC_ConfigChannel+0x43a>
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800133c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800133e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001340:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001346:	2320      	movs	r3, #32
 8001348:	e003      	b.n	8001352 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800134a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800134c:	fab3 f383 	clz	r3, r3
 8001350:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001352:	429a      	cmp	r2, r3
 8001354:	d106      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2200      	movs	r2, #0
 800135c:	2103      	movs	r1, #3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fb54 	bl	8000a0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fc47 	bl	8000bfc <LL_ADC_IsEnabled>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	f040 813f 	bne.w	80015f4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	461a      	mov	r2, r3
 8001384:	f7ff fbc8 	bl	8000b18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	4a8e      	ldr	r2, [pc, #568]	@ (80015c8 <HAL_ADC_ConfigChannel+0x6b0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	f040 8130 	bne.w	80015f4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10b      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x4a4>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0e9b      	lsrs	r3, r3, #26
 80013aa:	3301      	adds	r3, #1
 80013ac:	f003 031f 	and.w	r3, r3, #31
 80013b0:	2b09      	cmp	r3, #9
 80013b2:	bf94      	ite	ls
 80013b4:	2301      	movls	r3, #1
 80013b6:	2300      	movhi	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	e019      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x4d8>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80013ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80013ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80013d4:	2320      	movs	r3, #32
 80013d6:	e003      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80013d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013da:	fab3 f383 	clz	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	3301      	adds	r3, #1
 80013e2:	f003 031f 	and.w	r3, r3, #31
 80013e6:	2b09      	cmp	r3, #9
 80013e8:	bf94      	ite	ls
 80013ea:	2301      	movls	r3, #1
 80013ec:	2300      	movhi	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d079      	beq.n	80014e8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d107      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x4f8>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	0e9b      	lsrs	r3, r3, #26
 8001406:	3301      	adds	r3, #1
 8001408:	069b      	lsls	r3, r3, #26
 800140a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800140e:	e015      	b.n	800143c <HAL_ADC_ConfigChannel+0x524>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001418:	fa93 f3a3 	rbit	r3, r3
 800141c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800141e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001420:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001428:	2320      	movs	r3, #32
 800142a:	e003      	b.n	8001434 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800142c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800142e:	fab3 f383 	clz	r3, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	3301      	adds	r3, #1
 8001436:	069b      	lsls	r3, r3, #26
 8001438:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001444:	2b00      	cmp	r3, #0
 8001446:	d109      	bne.n	800145c <HAL_ADC_ConfigChannel+0x544>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	0e9b      	lsrs	r3, r3, #26
 800144e:	3301      	adds	r3, #1
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	2101      	movs	r1, #1
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	e017      	b.n	800148c <HAL_ADC_ConfigChannel+0x574>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800146a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800146c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800146e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001474:	2320      	movs	r3, #32
 8001476:	e003      	b.n	8001480 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	3301      	adds	r3, #1
 8001482:	f003 031f 	and.w	r3, r3, #31
 8001486:	2101      	movs	r1, #1
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	ea42 0103 	orr.w	r1, r2, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10a      	bne.n	80014b2 <HAL_ADC_ConfigChannel+0x59a>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	0e9b      	lsrs	r3, r3, #26
 80014a2:	3301      	adds	r3, #1
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	051b      	lsls	r3, r3, #20
 80014b0:	e018      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x5cc>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80014c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80014c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80014ca:	2320      	movs	r3, #32
 80014cc:	e003      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80014ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014e4:	430b      	orrs	r3, r1
 80014e6:	e080      	b.n	80015ea <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d107      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x5ec>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0e9b      	lsrs	r3, r3, #26
 80014fa:	3301      	adds	r3, #1
 80014fc:	069b      	lsls	r3, r3, #26
 80014fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001502:	e015      	b.n	8001530 <HAL_ADC_ConfigChannel+0x618>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150c:	fa93 f3a3 	rbit	r3, r3
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800151c:	2320      	movs	r3, #32
 800151e:	e003      	b.n	8001528 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	3301      	adds	r3, #1
 800152a:	069b      	lsls	r3, r3, #26
 800152c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001538:	2b00      	cmp	r3, #0
 800153a:	d109      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x638>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0e9b      	lsrs	r3, r3, #26
 8001542:	3301      	adds	r3, #1
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	2101      	movs	r1, #1
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	e017      	b.n	8001580 <HAL_ADC_ConfigChannel+0x668>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa93 f3a3 	rbit	r3, r3
 800155c:	61bb      	str	r3, [r7, #24]
  return result;
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001568:	2320      	movs	r3, #32
 800156a:	e003      	b.n	8001574 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800156c:	6a3b      	ldr	r3, [r7, #32]
 800156e:	fab3 f383 	clz	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	3301      	adds	r3, #1
 8001576:	f003 031f 	and.w	r3, r3, #31
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	ea42 0103 	orr.w	r1, r2, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10d      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x694>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0e9b      	lsrs	r3, r3, #26
 8001596:	3301      	adds	r3, #1
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	3b1e      	subs	r3, #30
 80015a4:	051b      	lsls	r3, r3, #20
 80015a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015aa:	e01d      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x6d0>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	fa93 f3a3 	rbit	r3, r3
 80015b8:	60fb      	str	r3, [r7, #12]
  return result;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d103      	bne.n	80015cc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80015c4:	2320      	movs	r3, #32
 80015c6:	e005      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x6bc>
 80015c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	3301      	adds	r3, #1
 80015d6:	f003 021f 	and.w	r2, r3, #31
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	3b1e      	subs	r3, #30
 80015e2:	051b      	lsls	r3, r3, #20
 80015e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015e8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff fa66 	bl	8000ac0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b44      	ldr	r3, [pc, #272]	@ (800170c <HAL_ADC_ConfigChannel+0x7f4>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d07a      	beq.n	80016f6 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001600:	4843      	ldr	r0, [pc, #268]	@ (8001710 <HAL_ADC_ConfigChannel+0x7f8>)
 8001602:	f7ff f9bb 	bl	800097c <LL_ADC_GetCommonPathInternalCh>
 8001606:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a41      	ldr	r2, [pc, #260]	@ (8001714 <HAL_ADC_ConfigChannel+0x7fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d12c      	bne.n	800166e <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001618:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d126      	bne.n	800166e <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a3c      	ldr	r2, [pc, #240]	@ (8001718 <HAL_ADC_ConfigChannel+0x800>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d004      	beq.n	8001634 <HAL_ADC_ConfigChannel+0x71c>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a3b      	ldr	r2, [pc, #236]	@ (800171c <HAL_ADC_ConfigChannel+0x804>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d15d      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001638:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800163c:	4619      	mov	r1, r3
 800163e:	4834      	ldr	r0, [pc, #208]	@ (8001710 <HAL_ADC_ConfigChannel+0x7f8>)
 8001640:	f7ff f989 	bl	8000956 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001644:	4b36      	ldr	r3, [pc, #216]	@ (8001720 <HAL_ADC_ConfigChannel+0x808>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	099b      	lsrs	r3, r3, #6
 800164a:	4a36      	ldr	r2, [pc, #216]	@ (8001724 <HAL_ADC_ConfigChannel+0x80c>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	099b      	lsrs	r3, r3, #6
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800165e:	e002      	b.n	8001666 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3b01      	subs	r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f9      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800166c:	e040      	b.n	80016f0 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a2d      	ldr	r2, [pc, #180]	@ (8001728 <HAL_ADC_ConfigChannel+0x810>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d118      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001678:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800167c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d112      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a23      	ldr	r2, [pc, #140]	@ (8001718 <HAL_ADC_ConfigChannel+0x800>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d004      	beq.n	8001698 <HAL_ADC_ConfigChannel+0x780>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a22      	ldr	r2, [pc, #136]	@ (800171c <HAL_ADC_ConfigChannel+0x804>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d12d      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001698:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800169c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016a0:	4619      	mov	r1, r3
 80016a2:	481b      	ldr	r0, [pc, #108]	@ (8001710 <HAL_ADC_ConfigChannel+0x7f8>)
 80016a4:	f7ff f957 	bl	8000956 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016a8:	e024      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a1f      	ldr	r2, [pc, #124]	@ (800172c <HAL_ADC_ConfigChannel+0x814>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d120      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80016b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d11a      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a14      	ldr	r2, [pc, #80]	@ (8001718 <HAL_ADC_ConfigChannel+0x800>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d115      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80016ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016d2:	4619      	mov	r1, r3
 80016d4:	480e      	ldr	r0, [pc, #56]	@ (8001710 <HAL_ADC_ConfigChannel+0x7f8>)
 80016d6:	f7ff f93e 	bl	8000956 <LL_ADC_SetCommonPathInternalCh>
 80016da:	e00c      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e0:	f043 0220 	orr.w	r2, r3, #32
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80016ee:	e002      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016f0:	bf00      	nop
 80016f2:	e000      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80016fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001702:	4618      	mov	r0, r3
 8001704:	37d8      	adds	r7, #216	@ 0xd8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	80080000 	.word	0x80080000
 8001710:	50040300 	.word	0x50040300
 8001714:	c7520000 	.word	0xc7520000
 8001718:	50040000 	.word	0x50040000
 800171c:	50040200 	.word	0x50040200
 8001720:	20000000 	.word	0x20000000
 8001724:	053e2d63 	.word	0x053e2d63
 8001728:	cb840000 	.word	0xcb840000
 800172c:	80000001 	.word	0x80000001

08001730 <LL_ADC_IsEnabled>:
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <LL_ADC_IsEnabled+0x18>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <LL_ADC_IsEnabled+0x1a>
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_ADC_REG_IsConversionOngoing>:
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	2b04      	cmp	r3, #4
 8001768:	d101      	bne.n	800176e <LL_ADC_REG_IsConversionOngoing+0x18>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b0a1      	sub	sp, #132	@ 0x84
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001792:	2b01      	cmp	r3, #1
 8001794:	d101      	bne.n	800179a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001796:	2302      	movs	r3, #2
 8001798:	e093      	b.n	80018c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80017a2:	2300      	movs	r3, #0
 80017a4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80017a6:	2300      	movs	r3, #0
 80017a8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a47      	ldr	r2, [pc, #284]	@ (80018cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d102      	bne.n	80017ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80017b4:	4b46      	ldr	r3, [pc, #280]	@ (80018d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e001      	b.n	80017be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10b      	bne.n	80017dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c8:	f043 0220 	orr.w	r2, r3, #32
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e072      	b.n	80018c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ffb9 	bl	8001756 <LL_ADC_REG_IsConversionOngoing>
 80017e4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ffb3 	bl	8001756 <LL_ADC_REG_IsConversionOngoing>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d154      	bne.n	80018a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80017f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d151      	bne.n	80018a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80017fc:	4b35      	ldr	r3, [pc, #212]	@ (80018d4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80017fe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d02c      	beq.n	8001862 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800181a:	035b      	lsls	r3, r3, #13
 800181c:	430b      	orrs	r3, r1
 800181e:	431a      	orrs	r2, r3
 8001820:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001822:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001824:	4829      	ldr	r0, [pc, #164]	@ (80018cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001826:	f7ff ff83 	bl	8001730 <LL_ADC_IsEnabled>
 800182a:	4604      	mov	r4, r0
 800182c:	4828      	ldr	r0, [pc, #160]	@ (80018d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800182e:	f7ff ff7f 	bl	8001730 <LL_ADC_IsEnabled>
 8001832:	4603      	mov	r3, r0
 8001834:	431c      	orrs	r4, r3
 8001836:	4828      	ldr	r0, [pc, #160]	@ (80018d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001838:	f7ff ff7a 	bl	8001730 <LL_ADC_IsEnabled>
 800183c:	4603      	mov	r3, r0
 800183e:	4323      	orrs	r3, r4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d137      	bne.n	80018b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001844:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800184c:	f023 030f 	bic.w	r3, r3, #15
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	6811      	ldr	r1, [r2, #0]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	6892      	ldr	r2, [r2, #8]
 8001858:	430a      	orrs	r2, r1
 800185a:	431a      	orrs	r2, r3
 800185c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800185e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001860:	e028      	b.n	80018b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800186a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800186c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800186e:	4817      	ldr	r0, [pc, #92]	@ (80018cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001870:	f7ff ff5e 	bl	8001730 <LL_ADC_IsEnabled>
 8001874:	4604      	mov	r4, r0
 8001876:	4816      	ldr	r0, [pc, #88]	@ (80018d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001878:	f7ff ff5a 	bl	8001730 <LL_ADC_IsEnabled>
 800187c:	4603      	mov	r3, r0
 800187e:	431c      	orrs	r4, r3
 8001880:	4815      	ldr	r0, [pc, #84]	@ (80018d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001882:	f7ff ff55 	bl	8001730 <LL_ADC_IsEnabled>
 8001886:	4603      	mov	r3, r0
 8001888:	4323      	orrs	r3, r4
 800188a:	2b00      	cmp	r3, #0
 800188c:	d112      	bne.n	80018b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800188e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001896:	f023 030f 	bic.w	r3, r3, #15
 800189a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800189c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800189e:	e009      	b.n	80018b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a4:	f043 0220 	orr.w	r2, r3, #32
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80018b2:	e000      	b.n	80018b6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80018b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80018be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3784      	adds	r7, #132	@ 0x84
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}
 80018ca:	bf00      	nop
 80018cc:	50040000 	.word	0x50040000
 80018d0:	50040100 	.word	0x50040100
 80018d4:	50040300 	.word	0x50040300
 80018d8:	50040200 	.word	0x50040200

080018dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e0ed      	b.n	8001aca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7fe fe96 	bl	800062c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001910:	f7ff f802 	bl	8000918 <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001916:	e012      	b.n	800193e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001918:	f7fe fffe 	bl	8000918 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b0a      	cmp	r3, #10
 8001924:	d90b      	bls.n	800193e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2205      	movs	r2, #5
 8001936:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0c5      	b.n	8001aca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0e5      	beq.n	8001918 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0202 	bic.w	r2, r2, #2
 800195a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800195c:	f7fe ffdc 	bl	8000918 <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001962:	e012      	b.n	800198a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001964:	f7fe ffd8 	bl	8000918 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b0a      	cmp	r3, #10
 8001970:	d90b      	bls.n	800198a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2205      	movs	r2, #5
 8001982:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e09f      	b.n	8001aca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1e5      	bne.n	8001964 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7e1b      	ldrb	r3, [r3, #24]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d108      	bne.n	80019b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	e007      	b.n	80019c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7e5b      	ldrb	r3, [r3, #25]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d108      	bne.n	80019dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e007      	b.n	80019ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7e9b      	ldrb	r3, [r3, #26]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d108      	bne.n	8001a06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0220 	orr.w	r2, r2, #32
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	e007      	b.n	8001a16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0220 	bic.w	r2, r2, #32
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7edb      	ldrb	r3, [r3, #27]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d108      	bne.n	8001a30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0210 	bic.w	r2, r2, #16
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e007      	b.n	8001a40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0210 	orr.w	r2, r2, #16
 8001a3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7f1b      	ldrb	r3, [r3, #28]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d108      	bne.n	8001a5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0208 	orr.w	r2, r2, #8
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	e007      	b.n	8001a6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0208 	bic.w	r2, r2, #8
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7f5b      	ldrb	r3, [r3, #29]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d108      	bne.n	8001a84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 0204 	orr.w	r2, r2, #4
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	e007      	b.n	8001a94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0204 	bic.w	r2, r2, #4
 8001a92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	ea42 0103 	orr.w	r1, r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	1e5a      	subs	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db0a      	blt.n	8001b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	490c      	ldr	r1, [pc, #48]	@ (8001b84 <__NVIC_SetPriority+0x4c>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b60:	e00a      	b.n	8001b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4908      	ldr	r1, [pc, #32]	@ (8001b88 <__NVIC_SetPriority+0x50>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	761a      	strb	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	@ 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f1c3 0307 	rsb	r3, r3, #7
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	bf28      	it	cs
 8001baa:	2304      	movcs	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d902      	bls.n	8001bbc <NVIC_EncodePriority+0x30>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3b03      	subs	r3, #3
 8001bba:	e000      	b.n	8001bbe <NVIC_EncodePriority+0x32>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	4313      	orrs	r3, r2
         );
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	@ 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c04:	d301      	bcc.n	8001c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c06:	2301      	movs	r3, #1
 8001c08:	e00f      	b.n	8001c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <SysTick_Config+0x40>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c12:	210f      	movs	r1, #15
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	f7ff ff8e 	bl	8001b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <SysTick_Config+0x40>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c22:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <SysTick_Config+0x40>)
 8001c24:	2207      	movs	r2, #7
 8001c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	e000e010 	.word	0xe000e010

08001c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff47 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	4603      	mov	r3, r0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c60:	f7ff ff5c 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001c64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	6978      	ldr	r0, [r7, #20]
 8001c6c:	f7ff ff8e 	bl	8001b8c <NVIC_EncodePriority>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff5d 	bl	8001b38 <__NVIC_SetPriority>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ffb0 	bl	8001bf4 <SysTick_Config>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cae:	e166      	b.n	8001f7e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8158 	beq.w	8001f78 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d005      	beq.n	8001ce0 <HAL_GPIO_Init+0x40>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d130      	bne.n	8001d42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d16:	2201      	movs	r2, #1
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	f003 0201 	and.w	r2, r3, #1
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d017      	beq.n	8001d7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d123      	bne.n	8001dd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	08da      	lsrs	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3208      	adds	r2, #8
 8001d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	220f      	movs	r2, #15
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	08da      	lsrs	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3208      	adds	r2, #8
 8001dcc:	6939      	ldr	r1, [r7, #16]
 8001dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	2203      	movs	r2, #3
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0203 	and.w	r2, r3, #3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80b2 	beq.w	8001f78 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e14:	4b61      	ldr	r3, [pc, #388]	@ (8001f9c <HAL_GPIO_Init+0x2fc>)
 8001e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e18:	4a60      	ldr	r2, [pc, #384]	@ (8001f9c <HAL_GPIO_Init+0x2fc>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e20:	4b5e      	ldr	r3, [pc, #376]	@ (8001f9c <HAL_GPIO_Init+0x2fc>)
 8001e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e2c:	4a5c      	ldr	r2, [pc, #368]	@ (8001fa0 <HAL_GPIO_Init+0x300>)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e56:	d02b      	beq.n	8001eb0 <HAL_GPIO_Init+0x210>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a52      	ldr	r2, [pc, #328]	@ (8001fa4 <HAL_GPIO_Init+0x304>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d025      	beq.n	8001eac <HAL_GPIO_Init+0x20c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a51      	ldr	r2, [pc, #324]	@ (8001fa8 <HAL_GPIO_Init+0x308>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d01f      	beq.n	8001ea8 <HAL_GPIO_Init+0x208>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a50      	ldr	r2, [pc, #320]	@ (8001fac <HAL_GPIO_Init+0x30c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d019      	beq.n	8001ea4 <HAL_GPIO_Init+0x204>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a4f      	ldr	r2, [pc, #316]	@ (8001fb0 <HAL_GPIO_Init+0x310>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d013      	beq.n	8001ea0 <HAL_GPIO_Init+0x200>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a4e      	ldr	r2, [pc, #312]	@ (8001fb4 <HAL_GPIO_Init+0x314>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00d      	beq.n	8001e9c <HAL_GPIO_Init+0x1fc>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a4d      	ldr	r2, [pc, #308]	@ (8001fb8 <HAL_GPIO_Init+0x318>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d007      	beq.n	8001e98 <HAL_GPIO_Init+0x1f8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a4c      	ldr	r2, [pc, #304]	@ (8001fbc <HAL_GPIO_Init+0x31c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_GPIO_Init+0x1f4>
 8001e90:	2307      	movs	r3, #7
 8001e92:	e00e      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001e94:	2308      	movs	r3, #8
 8001e96:	e00c      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001e98:	2306      	movs	r3, #6
 8001e9a:	e00a      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001e9c:	2305      	movs	r3, #5
 8001e9e:	e008      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	e006      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e004      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e002      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	f002 0203 	and.w	r2, r2, #3
 8001eb8:	0092      	lsls	r2, r2, #2
 8001eba:	4093      	lsls	r3, r2
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ec2:	4937      	ldr	r1, [pc, #220]	@ (8001fa0 <HAL_GPIO_Init+0x300>)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc0 <HAL_GPIO_Init+0x320>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ef4:	4a32      	ldr	r2, [pc, #200]	@ (8001fc0 <HAL_GPIO_Init+0x320>)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001efa:	4b31      	ldr	r3, [pc, #196]	@ (8001fc0 <HAL_GPIO_Init+0x320>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f1e:	4a28      	ldr	r2, [pc, #160]	@ (8001fc0 <HAL_GPIO_Init+0x320>)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f24:	4b26      	ldr	r3, [pc, #152]	@ (8001fc0 <HAL_GPIO_Init+0x320>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f48:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc0 <HAL_GPIO_Init+0x320>)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc0 <HAL_GPIO_Init+0x320>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f72:	4a13      	ldr	r2, [pc, #76]	@ (8001fc0 <HAL_GPIO_Init+0x320>)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f47f ae91 	bne.w	8001cb0 <HAL_GPIO_Init+0x10>
  }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	48000400 	.word	0x48000400
 8001fa8:	48000800 	.word	0x48000800
 8001fac:	48000c00 	.word	0x48000c00
 8001fb0:	48001000 	.word	0x48001000
 8001fb4:	48001400 	.word	0x48001400
 8001fb8:	48001800 	.word	0x48001800
 8001fbc:	48001c00 	.word	0x48001c00
 8001fc0:	40010400 	.word	0x40010400

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e08d      	b.n	8002122 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7fe fb4a 	bl	80006b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	@ 0x24
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002044:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002054:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	e006      	b.n	800207c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800207a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d108      	bne.n	8002096 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	e007      	b.n	80020a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69d9      	ldr	r1, [r3, #28]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1a      	ldr	r2, [r3, #32]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b20      	cmp	r3, #32
 800213e:	d138      	bne.n	80021b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800214a:	2302      	movs	r3, #2
 800214c:	e032      	b.n	80021b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2224      	movs	r2, #36	@ 0x24
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0201 	bic.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800217c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6819      	ldr	r1, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0201 	orr.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021b2:	2302      	movs	r3, #2
  }
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d139      	bne.n	800224a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e033      	b.n	800224c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2224      	movs	r2, #36	@ 0x24
 80021f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002212:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e000      	b.n	800224c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800224a:	2302      	movs	r3, #2
  }
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800225c:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <HAL_PWREx_GetVoltageRange+0x18>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40007000 	.word	0x40007000

08002274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002282:	d130      	bne.n	80022e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002284:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800228c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002290:	d038      	beq.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002292:	4b20      	ldr	r3, [pc, #128]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800229a:	4a1e      	ldr	r2, [pc, #120]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2232      	movs	r2, #50	@ 0x32
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	4a1b      	ldr	r2, [pc, #108]	@ (800231c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0c9b      	lsrs	r3, r3, #18
 80022b4:	3301      	adds	r3, #1
 80022b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b8:	e002      	b.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3b01      	subs	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c0:	4b14      	ldr	r3, [pc, #80]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022cc:	d102      	bne.n	80022d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f2      	bne.n	80022ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022e0:	d110      	bne.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e00f      	b.n	8002306 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f2:	d007      	beq.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022f4:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022fc:	4a05      	ldr	r2, [pc, #20]	@ (8002314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002302:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40007000 	.word	0x40007000
 8002318:	20000000 	.word	0x20000000
 800231c:	431bde83 	.word	0x431bde83

08002320 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d102      	bne.n	8002334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	f000 bc08 	b.w	8002b44 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002334:	4b96      	ldr	r3, [pc, #600]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800233e:	4b94      	ldr	r3, [pc, #592]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80e4 	beq.w	800251e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d007      	beq.n	800236c <HAL_RCC_OscConfig+0x4c>
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2b0c      	cmp	r3, #12
 8002360:	f040 808b 	bne.w	800247a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b01      	cmp	r3, #1
 8002368:	f040 8087 	bne.w	800247a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800236c:	4b88      	ldr	r3, [pc, #544]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_OscConfig+0x64>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e3df      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	4b81      	ldr	r3, [pc, #516]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_RCC_OscConfig+0x7e>
 8002394:	4b7e      	ldr	r3, [pc, #504]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800239c:	e005      	b.n	80023aa <HAL_RCC_OscConfig+0x8a>
 800239e:	4b7c      	ldr	r3, [pc, #496]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d223      	bcs.n	80023f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fd5a 	bl	8002e6c <RCC_SetFlashLatencyFromMSIRange>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e3c0      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023c2:	4b73      	ldr	r3, [pc, #460]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a72      	ldr	r2, [pc, #456]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b70      	ldr	r3, [pc, #448]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	496d      	ldr	r1, [pc, #436]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	4968      	ldr	r1, [pc, #416]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
 80023f4:	e025      	b.n	8002442 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f6:	4b66      	ldr	r3, [pc, #408]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a65      	ldr	r2, [pc, #404]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b63      	ldr	r3, [pc, #396]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4960      	ldr	r1, [pc, #384]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002414:	4b5e      	ldr	r3, [pc, #376]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	495b      	ldr	r1, [pc, #364]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4618      	mov	r0, r3
 8002434:	f000 fd1a 	bl	8002e6c <RCC_SetFlashLatencyFromMSIRange>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e380      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002442:	f000 fc87 	bl	8002d54 <HAL_RCC_GetSysClockFreq>
 8002446:	4602      	mov	r2, r0
 8002448:	4b51      	ldr	r3, [pc, #324]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	4950      	ldr	r1, [pc, #320]	@ (8002594 <HAL_RCC_OscConfig+0x274>)
 8002454:	5ccb      	ldrb	r3, [r1, r3]
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	4a4e      	ldr	r2, [pc, #312]	@ (8002598 <HAL_RCC_OscConfig+0x278>)
 8002460:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002462:	4b4e      	ldr	r3, [pc, #312]	@ (800259c <HAL_RCC_OscConfig+0x27c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fa06 	bl	8000878 <HAL_InitTick>
 800246c:	4603      	mov	r3, r0
 800246e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d052      	beq.n	800251c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	e364      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d032      	beq.n	80024e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002482:	4b43      	ldr	r3, [pc, #268]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a42      	ldr	r2, [pc, #264]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800248e:	f7fe fa43 	bl	8000918 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002496:	f7fe fa3f 	bl	8000918 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e34d      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a8:	4b39      	ldr	r3, [pc, #228]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b4:	4b36      	ldr	r3, [pc, #216]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a35      	ldr	r2, [pc, #212]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024ba:	f043 0308 	orr.w	r3, r3, #8
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b33      	ldr	r3, [pc, #204]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4930      	ldr	r1, [pc, #192]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	492b      	ldr	r1, [pc, #172]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
 80024e6:	e01a      	b.n	800251e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024e8:	4b29      	ldr	r3, [pc, #164]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a28      	ldr	r2, [pc, #160]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024f4:	f7fe fa10 	bl	8000918 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024fc:	f7fe fa0c 	bl	8000918 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e31a      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800250e:	4b20      	ldr	r3, [pc, #128]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x1dc>
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d073      	beq.n	8002612 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d005      	beq.n	800253c <HAL_RCC_OscConfig+0x21c>
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d10e      	bne.n	8002554 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d10b      	bne.n	8002554 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	4b14      	ldr	r3, [pc, #80]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d063      	beq.n	8002610 <HAL_RCC_OscConfig+0x2f0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d15f      	bne.n	8002610 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e2f7      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800255c:	d106      	bne.n	800256c <HAL_RCC_OscConfig+0x24c>
 800255e:	4b0c      	ldr	r3, [pc, #48]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a0b      	ldr	r2, [pc, #44]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e025      	b.n	80025b8 <HAL_RCC_OscConfig+0x298>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002574:	d114      	bne.n	80025a0 <HAL_RCC_OscConfig+0x280>
 8002576:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a05      	ldr	r2, [pc, #20]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 800257c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b03      	ldr	r3, [pc, #12]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a02      	ldr	r2, [pc, #8]	@ (8002590 <HAL_RCC_OscConfig+0x270>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e013      	b.n	80025b8 <HAL_RCC_OscConfig+0x298>
 8002590:	40021000 	.word	0x40021000
 8002594:	08003930 	.word	0x08003930
 8002598:	20000000 	.word	0x20000000
 800259c:	20000004 	.word	0x20000004
 80025a0:	4ba0      	ldr	r3, [pc, #640]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a9f      	ldr	r2, [pc, #636]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80025a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b9d      	ldr	r3, [pc, #628]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a9c      	ldr	r2, [pc, #624]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80025b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe f9aa 	bl	8000918 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7fe f9a6 	bl	8000918 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	@ 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e2b4      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025da:	4b92      	ldr	r3, [pc, #584]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x2a8>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe f996 	bl	8000918 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7fe f992 	bl	8000918 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	@ 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e2a0      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002602:	4b88      	ldr	r3, [pc, #544]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x2d0>
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d060      	beq.n	80026e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d005      	beq.n	8002630 <HAL_RCC_OscConfig+0x310>
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d119      	bne.n	800265e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d116      	bne.n	800265e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002630:	4b7c      	ldr	r3, [pc, #496]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_OscConfig+0x328>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e27d      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002648:	4b76      	ldr	r3, [pc, #472]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	061b      	lsls	r3, r3, #24
 8002656:	4973      	ldr	r1, [pc, #460]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800265c:	e040      	b.n	80026e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d023      	beq.n	80026ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002666:	4b6f      	ldr	r3, [pc, #444]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6e      	ldr	r2, [pc, #440]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 800266c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002672:	f7fe f951 	bl	8000918 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267a:	f7fe f94d 	bl	8000918 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e25b      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800268c:	4b65      	ldr	r3, [pc, #404]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002698:	4b62      	ldr	r3, [pc, #392]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	495f      	ldr	r1, [pc, #380]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
 80026ac:	e018      	b.n	80026e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80026b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7fe f92d 	bl	8000918 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c2:	f7fe f929 	bl	8000918 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e237      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026d4:	4b53      	ldr	r3, [pc, #332]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d03c      	beq.n	8002766 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d01c      	beq.n	800272e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80026f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026fa:	4a4a      	ldr	r2, [pc, #296]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe f908 	bl	8000918 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270c:	f7fe f904 	bl	8000918 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e212      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800271e:	4b41      	ldr	r3, [pc, #260]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ef      	beq.n	800270c <HAL_RCC_OscConfig+0x3ec>
 800272c:	e01b      	b.n	8002766 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272e:	4b3d      	ldr	r3, [pc, #244]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002730:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002734:	4a3b      	ldr	r2, [pc, #236]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fe f8eb 	bl	8000918 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002746:	f7fe f8e7 	bl	8000918 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e1f5      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002758:	4b32      	ldr	r3, [pc, #200]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 800275a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1ef      	bne.n	8002746 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 80a6 	beq.w	80028c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002778:	4b2a      	ldr	r3, [pc, #168]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 800277a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10d      	bne.n	80027a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002784:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002788:	4a26      	ldr	r2, [pc, #152]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 800278a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800278e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002790:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002794:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279c:	2301      	movs	r3, #1
 800279e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a0:	4b21      	ldr	r3, [pc, #132]	@ (8002828 <HAL_RCC_OscConfig+0x508>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d118      	bne.n	80027de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002828 <HAL_RCC_OscConfig+0x508>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002828 <HAL_RCC_OscConfig+0x508>)
 80027b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b8:	f7fe f8ae 	bl	8000918 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c0:	f7fe f8aa 	bl	8000918 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e1b8      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d2:	4b15      	ldr	r3, [pc, #84]	@ (8002828 <HAL_RCC_OscConfig+0x508>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d108      	bne.n	80027f8 <HAL_RCC_OscConfig+0x4d8>
 80027e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027f6:	e029      	b.n	800284c <HAL_RCC_OscConfig+0x52c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b05      	cmp	r3, #5
 80027fe:	d115      	bne.n	800282c <HAL_RCC_OscConfig+0x50c>
 8002800:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002806:	4a07      	ldr	r2, [pc, #28]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002808:	f043 0304 	orr.w	r3, r3, #4
 800280c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002810:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002816:	4a03      	ldr	r2, [pc, #12]	@ (8002824 <HAL_RCC_OscConfig+0x504>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002820:	e014      	b.n	800284c <HAL_RCC_OscConfig+0x52c>
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	40007000 	.word	0x40007000
 800282c:	4b9d      	ldr	r3, [pc, #628]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002832:	4a9c      	ldr	r2, [pc, #624]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800283c:	4b99      	ldr	r3, [pc, #612]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002842:	4a98      	ldr	r2, [pc, #608]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d016      	beq.n	8002882 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe f860 	bl	8000918 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285a:	e00a      	b.n	8002872 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fe f85c 	bl	8000918 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e168      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002872:	4b8c      	ldr	r3, [pc, #560]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ed      	beq.n	800285c <HAL_RCC_OscConfig+0x53c>
 8002880:	e015      	b.n	80028ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7fe f849 	bl	8000918 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7fe f845 	bl	8000918 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e151      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028a0:	4b80      	ldr	r3, [pc, #512]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1ed      	bne.n	800288a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ae:	7ffb      	ldrb	r3, [r7, #31]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b4:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	4a7a      	ldr	r2, [pc, #488]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 80028ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d03c      	beq.n	8002946 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01c      	beq.n	800290e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028d4:	4b73      	ldr	r3, [pc, #460]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 80028d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028da:	4a72      	ldr	r2, [pc, #456]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7fe f818 	bl	8000918 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ec:	f7fe f814 	bl	8000918 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e122      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028fe:	4b69      	ldr	r3, [pc, #420]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002900:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ef      	beq.n	80028ec <HAL_RCC_OscConfig+0x5cc>
 800290c:	e01b      	b.n	8002946 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800290e:	4b65      	ldr	r3, [pc, #404]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002910:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002914:	4a63      	ldr	r2, [pc, #396]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fd fffb 	bl	8000918 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002926:	f7fd fff7 	bl	8000918 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e105      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002938:	4b5a      	ldr	r3, [pc, #360]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 800293a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ef      	bne.n	8002926 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80f9 	beq.w	8002b42 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002954:	2b02      	cmp	r3, #2
 8002956:	f040 80cf 	bne.w	8002af8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800295a:	4b52      	ldr	r3, [pc, #328]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 0203 	and.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	429a      	cmp	r2, r3
 800296c:	d12c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	3b01      	subs	r3, #1
 800297a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d123      	bne.n	80029c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800298a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d11b      	bne.n	80029c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800299a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d113      	bne.n	80029c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	3b01      	subs	r3, #1
 80029ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d109      	bne.n	80029c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	3b01      	subs	r3, #1
 80029c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d071      	beq.n	8002aac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d068      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029ce:	4b35      	ldr	r3, [pc, #212]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029da:	4b32      	ldr	r3, [pc, #200]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e0ac      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029ea:	4b2e      	ldr	r3, [pc, #184]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2d      	ldr	r2, [pc, #180]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 80029f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029f6:	f7fd ff8f 	bl	8000918 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fd ff8b 	bl	8000918 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e099      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a10:	4b24      	ldr	r3, [pc, #144]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f0      	bne.n	80029fe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a1c:	4b21      	ldr	r3, [pc, #132]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	4b21      	ldr	r3, [pc, #132]	@ (8002aa8 <HAL_RCC_OscConfig+0x788>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a2c:	3a01      	subs	r2, #1
 8002a2e:	0112      	lsls	r2, r2, #4
 8002a30:	4311      	orrs	r1, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a36:	0212      	lsls	r2, r2, #8
 8002a38:	4311      	orrs	r1, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a3e:	0852      	lsrs	r2, r2, #1
 8002a40:	3a01      	subs	r2, #1
 8002a42:	0552      	lsls	r2, r2, #21
 8002a44:	4311      	orrs	r1, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a4a:	0852      	lsrs	r2, r2, #1
 8002a4c:	3a01      	subs	r2, #1
 8002a4e:	0652      	lsls	r2, r2, #25
 8002a50:	4311      	orrs	r1, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a56:	06d2      	lsls	r2, r2, #27
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	4912      	ldr	r1, [pc, #72]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a60:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002a66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a78:	f7fd ff4e 	bl	8000918 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fd ff4a 	bl	8000918 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e058      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a92:	4b04      	ldr	r3, [pc, #16]	@ (8002aa4 <HAL_RCC_OscConfig+0x784>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a9e:	e050      	b.n	8002b42 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e04f      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aac:	4b27      	ldr	r3, [pc, #156]	@ (8002b4c <HAL_RCC_OscConfig+0x82c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d144      	bne.n	8002b42 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ab8:	4b24      	ldr	r3, [pc, #144]	@ (8002b4c <HAL_RCC_OscConfig+0x82c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a23      	ldr	r2, [pc, #140]	@ (8002b4c <HAL_RCC_OscConfig+0x82c>)
 8002abe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ac4:	4b21      	ldr	r3, [pc, #132]	@ (8002b4c <HAL_RCC_OscConfig+0x82c>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a20      	ldr	r2, [pc, #128]	@ (8002b4c <HAL_RCC_OscConfig+0x82c>)
 8002aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ace:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ad0:	f7fd ff22 	bl	8000918 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fd ff1e 	bl	8000918 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e02c      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aea:	4b18      	ldr	r3, [pc, #96]	@ (8002b4c <HAL_RCC_OscConfig+0x82c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x7b8>
 8002af6:	e024      	b.n	8002b42 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2b0c      	cmp	r3, #12
 8002afc:	d01f      	beq.n	8002b3e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afe:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <HAL_RCC_OscConfig+0x82c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a12      	ldr	r2, [pc, #72]	@ (8002b4c <HAL_RCC_OscConfig+0x82c>)
 8002b04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0a:	f7fd ff05 	bl	8000918 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b12:	f7fd ff01 	bl	8000918 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e00f      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b24:	4b09      	ldr	r3, [pc, #36]	@ (8002b4c <HAL_RCC_OscConfig+0x82c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f0      	bne.n	8002b12 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b30:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_RCC_OscConfig+0x82c>)
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	4905      	ldr	r1, [pc, #20]	@ (8002b4c <HAL_RCC_OscConfig+0x82c>)
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_RCC_OscConfig+0x830>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60cb      	str	r3, [r1, #12]
 8002b3c:	e001      	b.n	8002b42 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	feeefffc 	.word	0xfeeefffc

08002b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0e7      	b.n	8002d38 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b68:	4b75      	ldr	r3, [pc, #468]	@ (8002d40 <HAL_RCC_ClockConfig+0x1ec>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d910      	bls.n	8002b98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b72      	ldr	r3, [pc, #456]	@ (8002d40 <HAL_RCC_ClockConfig+0x1ec>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 0207 	bic.w	r2, r3, #7
 8002b7e:	4970      	ldr	r1, [pc, #448]	@ (8002d40 <HAL_RCC_ClockConfig+0x1ec>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b6e      	ldr	r3, [pc, #440]	@ (8002d40 <HAL_RCC_ClockConfig+0x1ec>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0cf      	b.n	8002d38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d010      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	4b66      	ldr	r3, [pc, #408]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d908      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb4:	4b63      	ldr	r3, [pc, #396]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4960      	ldr	r1, [pc, #384]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d04c      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bda:	4b5a      	ldr	r3, [pc, #360]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d121      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e0a6      	b.n	8002d38 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d107      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf2:	4b54      	ldr	r3, [pc, #336]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d115      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e09a      	b.n	8002d38 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c0a:	4b4e      	ldr	r3, [pc, #312]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e08e      	b.n	8002d38 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e086      	b.n	8002d38 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c2a:	4b46      	ldr	r3, [pc, #280]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f023 0203 	bic.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4943      	ldr	r1, [pc, #268]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c3c:	f7fd fe6c 	bl	8000918 <HAL_GetTick>
 8002c40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c44:	f7fd fe68 	bl	8000918 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e06e      	b.n	8002d38 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 020c 	and.w	r2, r3, #12
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d1eb      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d010      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	4b31      	ldr	r3, [pc, #196]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d208      	bcs.n	8002c9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c88:	4b2e      	ldr	r3, [pc, #184]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	492b      	ldr	r1, [pc, #172]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9a:	4b29      	ldr	r3, [pc, #164]	@ (8002d40 <HAL_RCC_ClockConfig+0x1ec>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d210      	bcs.n	8002cca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca8:	4b25      	ldr	r3, [pc, #148]	@ (8002d40 <HAL_RCC_ClockConfig+0x1ec>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 0207 	bic.w	r2, r3, #7
 8002cb0:	4923      	ldr	r1, [pc, #140]	@ (8002d40 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb8:	4b21      	ldr	r3, [pc, #132]	@ (8002d40 <HAL_RCC_ClockConfig+0x1ec>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e036      	b.n	8002d38 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4918      	ldr	r1, [pc, #96]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cf4:	4b13      	ldr	r3, [pc, #76]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4910      	ldr	r1, [pc, #64]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d08:	f000 f824 	bl	8002d54 <HAL_RCC_GetSysClockFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d44 <HAL_RCC_ClockConfig+0x1f0>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	490b      	ldr	r1, [pc, #44]	@ (8002d48 <HAL_RCC_ClockConfig+0x1f4>)
 8002d1a:	5ccb      	ldrb	r3, [r1, r3]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
 8002d24:	4a09      	ldr	r2, [pc, #36]	@ (8002d4c <HAL_RCC_ClockConfig+0x1f8>)
 8002d26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d28:	4b09      	ldr	r3, [pc, #36]	@ (8002d50 <HAL_RCC_ClockConfig+0x1fc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fda3 	bl	8000878 <HAL_InitTick>
 8002d32:	4603      	mov	r3, r0
 8002d34:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d36:	7afb      	ldrb	r3, [r7, #11]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40022000 	.word	0x40022000
 8002d44:	40021000 	.word	0x40021000
 8002d48:	08003930 	.word	0x08003930
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	20000004 	.word	0x20000004

08002d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	@ 0x24
 8002d58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d62:	4b3e      	ldr	r3, [pc, #248]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_GetSysClockFreq+0x34>
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	d121      	bne.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d11e      	bne.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d88:	4b34      	ldr	r3, [pc, #208]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d94:	4b31      	ldr	r3, [pc, #196]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	e005      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002da4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002db0:	4a2b      	ldr	r2, [pc, #172]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10d      	bne.n	8002ddc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d102      	bne.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dcc:	4b25      	ldr	r3, [pc, #148]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	e004      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dd8:	4b23      	ldr	r3, [pc, #140]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	2b0c      	cmp	r3, #12
 8002de0:	d134      	bne.n	8002e4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002de2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d003      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0xa6>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d003      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0xac>
 8002df8:	e005      	b.n	8002e06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dfc:	617b      	str	r3, [r7, #20]
      break;
 8002dfe:	e005      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e00:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e02:	617b      	str	r3, [r7, #20]
      break;
 8002e04:	e002      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	617b      	str	r3, [r7, #20]
      break;
 8002e0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e0c:	4b13      	ldr	r3, [pc, #76]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	3301      	adds	r3, #1
 8002e18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e1a:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	fb03 f202 	mul.w	r2, r3, r2
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e32:	4b0a      	ldr	r3, [pc, #40]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	0e5b      	lsrs	r3, r3, #25
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e4c:	69bb      	ldr	r3, [r7, #24]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3724      	adds	r7, #36	@ 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	08003940 	.word	0x08003940
 8002e64:	00f42400 	.word	0x00f42400
 8002e68:	007a1200 	.word	0x007a1200

08002e6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e78:	4b2a      	ldr	r3, [pc, #168]	@ (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e84:	f7ff f9e8 	bl	8002258 <HAL_PWREx_GetVoltageRange>
 8002e88:	6178      	str	r0, [r7, #20]
 8002e8a:	e014      	b.n	8002eb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e8c:	4b25      	ldr	r3, [pc, #148]	@ (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	4a24      	ldr	r2, [pc, #144]	@ (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e98:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ea4:	f7ff f9d8 	bl	8002258 <HAL_PWREx_GetVoltageRange>
 8002ea8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eae:	4a1d      	ldr	r2, [pc, #116]	@ (8002f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eb4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ebc:	d10b      	bne.n	8002ed6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b80      	cmp	r3, #128	@ 0x80
 8002ec2:	d919      	bls.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ec8:	d902      	bls.n	8002ed0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eca:	2302      	movs	r3, #2
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	e013      	b.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	e010      	b.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b80      	cmp	r3, #128	@ 0x80
 8002eda:	d902      	bls.n	8002ee2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002edc:	2303      	movs	r3, #3
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	e00a      	b.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b80      	cmp	r3, #128	@ 0x80
 8002ee6:	d102      	bne.n	8002eee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ee8:	2302      	movs	r3, #2
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	e004      	b.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b70      	cmp	r3, #112	@ 0x70
 8002ef2:	d101      	bne.n	8002ef8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 0207 	bic.w	r2, r3, #7
 8002f00:	4909      	ldr	r1, [pc, #36]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f08:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40022000 	.word	0x40022000

08002f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f34:	2300      	movs	r3, #0
 8002f36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f38:	2300      	movs	r3, #0
 8002f3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d041      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f50:	d02a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f56:	d824      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f5c:	d008      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f62:	d81e      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f6c:	d010      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f6e:	e018      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f70:	4b86      	ldr	r3, [pc, #536]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a85      	ldr	r2, [pc, #532]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f7c:	e015      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 facd 	bl	8003524 <RCCEx_PLLSAI1_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f8e:	e00c      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3320      	adds	r3, #32
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fbb6 	bl	8003708 <RCCEx_PLLSAI2_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa0:	e003      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	74fb      	strb	r3, [r7, #19]
      break;
 8002fa6:	e000      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002faa:	7cfb      	ldrb	r3, [r7, #19]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10b      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fb0:	4b76      	ldr	r3, [pc, #472]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fbe:	4973      	ldr	r1, [pc, #460]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fc6:	e001      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d041      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fe0:	d02a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002fe2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fe6:	d824      	bhi.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fe8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fec:	d008      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ff2:	d81e      	bhi.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ffc:	d010      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ffe:	e018      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003000:	4b62      	ldr	r3, [pc, #392]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a61      	ldr	r2, [pc, #388]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800300a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800300c:	e015      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3304      	adds	r3, #4
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fa85 	bl	8003524 <RCCEx_PLLSAI1_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800301e:	e00c      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3320      	adds	r3, #32
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fb6e 	bl	8003708 <RCCEx_PLLSAI2_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003030:	e003      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	74fb      	strb	r3, [r7, #19]
      break;
 8003036:	e000      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303a:	7cfb      	ldrb	r3, [r7, #19]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10b      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003040:	4b52      	ldr	r3, [pc, #328]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003046:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800304e:	494f      	ldr	r1, [pc, #316]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003056:	e001      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 80a0 	beq.w	80031aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800306e:	4b47      	ldr	r3, [pc, #284]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00d      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003084:	4b41      	ldr	r3, [pc, #260]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003088:	4a40      	ldr	r2, [pc, #256]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800308e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003090:	4b3e      	ldr	r3, [pc, #248]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309c:	2301      	movs	r3, #1
 800309e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ac:	f7fd fc34 	bl	8000918 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b2:	e009      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b4:	f7fd fc30 	bl	8000918 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d902      	bls.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	74fb      	strb	r3, [r7, #19]
        break;
 80030c6:	e005      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030c8:	4b31      	ldr	r3, [pc, #196]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ef      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d15c      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030da:	4b2c      	ldr	r3, [pc, #176]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01f      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d019      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030f8:	4b24      	ldr	r3, [pc, #144]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003102:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003104:	4b21      	ldr	r3, [pc, #132]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310a:	4a20      	ldr	r2, [pc, #128]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003114:	4b1d      	ldr	r3, [pc, #116]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311a:	4a1c      	ldr	r2, [pc, #112]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003124:	4a19      	ldr	r2, [pc, #100]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d016      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003136:	f7fd fbef 	bl	8000918 <HAL_GetTick>
 800313a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313c:	e00b      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fd fbeb 	bl	8000918 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	d902      	bls.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	74fb      	strb	r3, [r7, #19]
            break;
 8003154:	e006      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003156:	4b0d      	ldr	r3, [pc, #52]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ec      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10c      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316a:	4b08      	ldr	r3, [pc, #32]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003170:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317a:	4904      	ldr	r1, [pc, #16]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003182:	e009      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	74bb      	strb	r3, [r7, #18]
 8003188:	e006      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003198:	7c7b      	ldrb	r3, [r7, #17]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d105      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319e:	4ba6      	ldr	r3, [pc, #664]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	4aa5      	ldr	r2, [pc, #660]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031b6:	4ba0      	ldr	r3, [pc, #640]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031bc:	f023 0203 	bic.w	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c4:	499c      	ldr	r1, [pc, #624]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031d8:	4b97      	ldr	r3, [pc, #604]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031de:	f023 020c 	bic.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e6:	4994      	ldr	r1, [pc, #592]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031fa:	4b8f      	ldr	r3, [pc, #572]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003200:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	498b      	ldr	r1, [pc, #556]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800321c:	4b86      	ldr	r3, [pc, #536]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003222:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	4983      	ldr	r1, [pc, #524]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800323e:	4b7e      	ldr	r3, [pc, #504]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003244:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800324c:	497a      	ldr	r1, [pc, #488]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003260:	4b75      	ldr	r3, [pc, #468]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003266:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326e:	4972      	ldr	r1, [pc, #456]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003282:	4b6d      	ldr	r3, [pc, #436]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003288:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003290:	4969      	ldr	r1, [pc, #420]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032a4:	4b64      	ldr	r3, [pc, #400]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032b2:	4961      	ldr	r1, [pc, #388]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d4:	4958      	ldr	r1, [pc, #352]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032e8:	4b53      	ldr	r3, [pc, #332]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f6:	4950      	ldr	r1, [pc, #320]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800330a:	4b4b      	ldr	r3, [pc, #300]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003310:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003318:	4947      	ldr	r1, [pc, #284]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800332c:	4b42      	ldr	r3, [pc, #264]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800332e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003332:	f023 0203 	bic.w	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333a:	493f      	ldr	r1, [pc, #252]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d028      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800334e:	4b3a      	ldr	r3, [pc, #232]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003354:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335c:	4936      	ldr	r1, [pc, #216]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003368:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800336c:	d106      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800336e:	4b32      	ldr	r3, [pc, #200]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	4a31      	ldr	r2, [pc, #196]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003374:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003378:	60d3      	str	r3, [r2, #12]
 800337a:	e011      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003380:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3304      	adds	r3, #4
 800338a:	2101      	movs	r1, #1
 800338c:	4618      	mov	r0, r3
 800338e:	f000 f8c9 	bl	8003524 <RCCEx_PLLSAI1_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d028      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033ac:	4b22      	ldr	r3, [pc, #136]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ba:	491f      	ldr	r1, [pc, #124]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033ca:	d106      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a19      	ldr	r2, [pc, #100]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033d6:	60d3      	str	r3, [r2, #12]
 80033d8:	e011      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033e2:	d10c      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3304      	adds	r3, #4
 80033e8:	2101      	movs	r1, #1
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f89a 	bl	8003524 <RCCEx_PLLSAI1_Config>
 80033f0:	4603      	mov	r3, r0
 80033f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033f4:	7cfb      	ldrb	r3, [r7, #19]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80033fa:	7cfb      	ldrb	r3, [r7, #19]
 80033fc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d02a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800340a:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003410:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003418:	4907      	ldr	r1, [pc, #28]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003428:	d108      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800342a:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	4a02      	ldr	r2, [pc, #8]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003430:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003434:	60d3      	str	r3, [r2, #12]
 8003436:	e013      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003438:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003440:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003444:	d10c      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3304      	adds	r3, #4
 800344a:	2101      	movs	r1, #1
 800344c:	4618      	mov	r0, r3
 800344e:	f000 f869 	bl	8003524 <RCCEx_PLLSAI1_Config>
 8003452:	4603      	mov	r3, r0
 8003454:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003456:	7cfb      	ldrb	r3, [r7, #19]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d02f      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800346c:	4b2c      	ldr	r3, [pc, #176]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003472:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800347a:	4929      	ldr	r1, [pc, #164]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800348a:	d10d      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	2102      	movs	r1, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f846 	bl	8003524 <RCCEx_PLLSAI1_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d014      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	74bb      	strb	r3, [r7, #18]
 80034a6:	e011      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034b0:	d10c      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3320      	adds	r3, #32
 80034b6:	2102      	movs	r1, #2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 f925 	bl	8003708 <RCCEx_PLLSAI2_Config>
 80034be:	4603      	mov	r3, r0
 80034c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034c2:	7cfb      	ldrb	r3, [r7, #19]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00b      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034d8:	4b11      	ldr	r3, [pc, #68]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034de:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034e8:	490d      	ldr	r1, [pc, #52]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00b      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034fc:	4b08      	ldr	r3, [pc, #32]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003502:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800350c:	4904      	ldr	r1, [pc, #16]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800350e:	4313      	orrs	r3, r2
 8003510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003514:	7cbb      	ldrb	r3, [r7, #18]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000

08003524 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003532:	4b74      	ldr	r3, [pc, #464]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d018      	beq.n	8003570 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800353e:	4b71      	ldr	r3, [pc, #452]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0203 	and.w	r2, r3, #3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d10d      	bne.n	800356a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
       ||
 8003552:	2b00      	cmp	r3, #0
 8003554:	d009      	beq.n	800356a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003556:	4b6b      	ldr	r3, [pc, #428]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
       ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d047      	beq.n	80035fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
 800356e:	e044      	b.n	80035fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d018      	beq.n	80035aa <RCCEx_PLLSAI1_Config+0x86>
 8003578:	2b03      	cmp	r3, #3
 800357a:	d825      	bhi.n	80035c8 <RCCEx_PLLSAI1_Config+0xa4>
 800357c:	2b01      	cmp	r3, #1
 800357e:	d002      	beq.n	8003586 <RCCEx_PLLSAI1_Config+0x62>
 8003580:	2b02      	cmp	r3, #2
 8003582:	d009      	beq.n	8003598 <RCCEx_PLLSAI1_Config+0x74>
 8003584:	e020      	b.n	80035c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003586:	4b5f      	ldr	r3, [pc, #380]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d11d      	bne.n	80035ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003596:	e01a      	b.n	80035ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003598:	4b5a      	ldr	r3, [pc, #360]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d116      	bne.n	80035d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a8:	e013      	b.n	80035d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035aa:	4b56      	ldr	r3, [pc, #344]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10f      	bne.n	80035d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035b6:	4b53      	ldr	r3, [pc, #332]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035c6:	e006      	b.n	80035d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
      break;
 80035cc:	e004      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ce:	bf00      	nop
 80035d0:	e002      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10d      	bne.n	80035fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035de:	4b49      	ldr	r3, [pc, #292]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6819      	ldr	r1, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	430b      	orrs	r3, r1
 80035f4:	4943      	ldr	r1, [pc, #268]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d17c      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003600:	4b40      	ldr	r3, [pc, #256]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a3f      	ldr	r2, [pc, #252]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003606:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800360a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360c:	f7fd f984 	bl	8000918 <HAL_GetTick>
 8003610:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003612:	e009      	b.n	8003628 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003614:	f7fd f980 	bl	8000918 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d902      	bls.n	8003628 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	73fb      	strb	r3, [r7, #15]
        break;
 8003626:	e005      	b.n	8003634 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003628:	4b36      	ldr	r3, [pc, #216]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1ef      	bne.n	8003614 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d15f      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d110      	bne.n	8003662 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003640:	4b30      	ldr	r3, [pc, #192]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003648:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6892      	ldr	r2, [r2, #8]
 8003650:	0211      	lsls	r1, r2, #8
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68d2      	ldr	r2, [r2, #12]
 8003656:	06d2      	lsls	r2, r2, #27
 8003658:	430a      	orrs	r2, r1
 800365a:	492a      	ldr	r1, [pc, #168]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 800365c:	4313      	orrs	r3, r2
 800365e:	610b      	str	r3, [r1, #16]
 8003660:	e027      	b.n	80036b2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d112      	bne.n	800368e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003668:	4b26      	ldr	r3, [pc, #152]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003670:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6892      	ldr	r2, [r2, #8]
 8003678:	0211      	lsls	r1, r2, #8
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6912      	ldr	r2, [r2, #16]
 800367e:	0852      	lsrs	r2, r2, #1
 8003680:	3a01      	subs	r2, #1
 8003682:	0552      	lsls	r2, r2, #21
 8003684:	430a      	orrs	r2, r1
 8003686:	491f      	ldr	r1, [pc, #124]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003688:	4313      	orrs	r3, r2
 800368a:	610b      	str	r3, [r1, #16]
 800368c:	e011      	b.n	80036b2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800368e:	4b1d      	ldr	r3, [pc, #116]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003696:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6892      	ldr	r2, [r2, #8]
 800369e:	0211      	lsls	r1, r2, #8
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6952      	ldr	r2, [r2, #20]
 80036a4:	0852      	lsrs	r2, r2, #1
 80036a6:	3a01      	subs	r2, #1
 80036a8:	0652      	lsls	r2, r2, #25
 80036aa:	430a      	orrs	r2, r1
 80036ac:	4915      	ldr	r1, [pc, #84]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036b2:	4b14      	ldr	r3, [pc, #80]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a13      	ldr	r2, [pc, #76]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036be:	f7fd f92b 	bl	8000918 <HAL_GetTick>
 80036c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036c4:	e009      	b.n	80036da <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c6:	f7fd f927 	bl	8000918 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d902      	bls.n	80036da <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	73fb      	strb	r3, [r7, #15]
          break;
 80036d8:	e005      	b.n	80036e6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036da:	4b0a      	ldr	r3, [pc, #40]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0ef      	beq.n	80036c6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d106      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036ec:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	4903      	ldr	r1, [pc, #12]	@ (8003704 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40021000 	.word	0x40021000

08003708 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003716:	4b69      	ldr	r3, [pc, #420]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d018      	beq.n	8003754 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003722:	4b66      	ldr	r3, [pc, #408]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0203 	and.w	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d10d      	bne.n	800374e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
       ||
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800373a:	4b60      	ldr	r3, [pc, #384]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
       ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d047      	beq.n	80037de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	e044      	b.n	80037de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d018      	beq.n	800378e <RCCEx_PLLSAI2_Config+0x86>
 800375c:	2b03      	cmp	r3, #3
 800375e:	d825      	bhi.n	80037ac <RCCEx_PLLSAI2_Config+0xa4>
 8003760:	2b01      	cmp	r3, #1
 8003762:	d002      	beq.n	800376a <RCCEx_PLLSAI2_Config+0x62>
 8003764:	2b02      	cmp	r3, #2
 8003766:	d009      	beq.n	800377c <RCCEx_PLLSAI2_Config+0x74>
 8003768:	e020      	b.n	80037ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800376a:	4b54      	ldr	r3, [pc, #336]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11d      	bne.n	80037b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377a:	e01a      	b.n	80037b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800377c:	4b4f      	ldr	r3, [pc, #316]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003784:	2b00      	cmp	r3, #0
 8003786:	d116      	bne.n	80037b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378c:	e013      	b.n	80037b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800378e:	4b4b      	ldr	r3, [pc, #300]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10f      	bne.n	80037ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800379a:	4b48      	ldr	r3, [pc, #288]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037aa:	e006      	b.n	80037ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      break;
 80037b0:	e004      	b.n	80037bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037b2:	bf00      	nop
 80037b4:	e002      	b.n	80037bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10d      	bne.n	80037de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037c2:	4b3e      	ldr	r3, [pc, #248]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6819      	ldr	r1, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	430b      	orrs	r3, r1
 80037d8:	4938      	ldr	r1, [pc, #224]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d166      	bne.n	80038b2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037e4:	4b35      	ldr	r3, [pc, #212]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a34      	ldr	r2, [pc, #208]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 80037ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f0:	f7fd f892 	bl	8000918 <HAL_GetTick>
 80037f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037f6:	e009      	b.n	800380c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037f8:	f7fd f88e 	bl	8000918 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d902      	bls.n	800380c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	73fb      	strb	r3, [r7, #15]
        break;
 800380a:	e005      	b.n	8003818 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800380c:	4b2b      	ldr	r3, [pc, #172]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1ef      	bne.n	80037f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d149      	bne.n	80038b2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d110      	bne.n	8003846 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003824:	4b25      	ldr	r3, [pc, #148]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800382c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6892      	ldr	r2, [r2, #8]
 8003834:	0211      	lsls	r1, r2, #8
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68d2      	ldr	r2, [r2, #12]
 800383a:	06d2      	lsls	r2, r2, #27
 800383c:	430a      	orrs	r2, r1
 800383e:	491f      	ldr	r1, [pc, #124]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003840:	4313      	orrs	r3, r2
 8003842:	614b      	str	r3, [r1, #20]
 8003844:	e011      	b.n	800386a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003846:	4b1d      	ldr	r3, [pc, #116]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800384e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6892      	ldr	r2, [r2, #8]
 8003856:	0211      	lsls	r1, r2, #8
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6912      	ldr	r2, [r2, #16]
 800385c:	0852      	lsrs	r2, r2, #1
 800385e:	3a01      	subs	r2, #1
 8003860:	0652      	lsls	r2, r2, #25
 8003862:	430a      	orrs	r2, r1
 8003864:	4915      	ldr	r1, [pc, #84]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003866:	4313      	orrs	r3, r2
 8003868:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800386a:	4b14      	ldr	r3, [pc, #80]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a13      	ldr	r2, [pc, #76]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003874:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003876:	f7fd f84f 	bl	8000918 <HAL_GetTick>
 800387a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800387c:	e009      	b.n	8003892 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800387e:	f7fd f84b 	bl	8000918 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d902      	bls.n	8003892 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	73fb      	strb	r3, [r7, #15]
          break;
 8003890:	e005      	b.n	800389e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003892:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0ef      	beq.n	800387e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d106      	bne.n	80038b2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038a4:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	4903      	ldr	r1, [pc, #12]	@ (80038bc <RCCEx_PLLSAI2_Config+0x1b4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000

080038c0 <memset>:
 80038c0:	4402      	add	r2, r0
 80038c2:	4603      	mov	r3, r0
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d100      	bne.n	80038ca <memset+0xa>
 80038c8:	4770      	bx	lr
 80038ca:	f803 1b01 	strb.w	r1, [r3], #1
 80038ce:	e7f9      	b.n	80038c4 <memset+0x4>

080038d0 <__libc_init_array>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	4d0d      	ldr	r5, [pc, #52]	@ (8003908 <__libc_init_array+0x38>)
 80038d4:	4c0d      	ldr	r4, [pc, #52]	@ (800390c <__libc_init_array+0x3c>)
 80038d6:	1b64      	subs	r4, r4, r5
 80038d8:	10a4      	asrs	r4, r4, #2
 80038da:	2600      	movs	r6, #0
 80038dc:	42a6      	cmp	r6, r4
 80038de:	d109      	bne.n	80038f4 <__libc_init_array+0x24>
 80038e0:	4d0b      	ldr	r5, [pc, #44]	@ (8003910 <__libc_init_array+0x40>)
 80038e2:	4c0c      	ldr	r4, [pc, #48]	@ (8003914 <__libc_init_array+0x44>)
 80038e4:	f000 f818 	bl	8003918 <_init>
 80038e8:	1b64      	subs	r4, r4, r5
 80038ea:	10a4      	asrs	r4, r4, #2
 80038ec:	2600      	movs	r6, #0
 80038ee:	42a6      	cmp	r6, r4
 80038f0:	d105      	bne.n	80038fe <__libc_init_array+0x2e>
 80038f2:	bd70      	pop	{r4, r5, r6, pc}
 80038f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f8:	4798      	blx	r3
 80038fa:	3601      	adds	r6, #1
 80038fc:	e7ee      	b.n	80038dc <__libc_init_array+0xc>
 80038fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003902:	4798      	blx	r3
 8003904:	3601      	adds	r6, #1
 8003906:	e7f2      	b.n	80038ee <__libc_init_array+0x1e>
 8003908:	08003970 	.word	0x08003970
 800390c:	08003970 	.word	0x08003970
 8003910:	08003970 	.word	0x08003970
 8003914:	08003974 	.word	0x08003974

08003918 <_init>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr

08003924 <_fini>:
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	bf00      	nop
 8003928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392a:	bc08      	pop	{r3}
 800392c:	469e      	mov	lr, r3
 800392e:	4770      	bx	lr
