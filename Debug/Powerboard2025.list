
Powerboard2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005730  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080058e0  080058e0  000068e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005920  08005920  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005920  08005920  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005920  08005920  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005920  08005920  00006920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005924  08005924  00006924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005928  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000010  08005934  00007010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08005934  0000716c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7c2  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002372  00000000  00000000  000167fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00018b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9a  00000000  00000000  00019a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6ac  00000000  00000000  0001a62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011302  00000000  00000000  00044cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a095  00000000  00000000  00055fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016006d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040f0  00000000  00000000  001600b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001641a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080058c8 	.word	0x080058c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080058c8 	.word	0x080058c8

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	0000      	movs	r0, r0
	...

08000a70 <INA226_Initialize>:
#include <INA226.h>
#include <stdio.h>
#include <math.h>

//Initialize INA226 Component using max current expected and resistance of shunt resistor.
HAL_StatusTypeDef  INA226_Initialize(INA226_t *dev, uint8_t i2cAddr, I2C_HandleTypeDef *i2cHandle, float maxCurrent, float shuntResistance ){
 8000a70:	b5b0      	push	{r4, r5, r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6178      	str	r0, [r7, #20]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	60fa      	str	r2, [r7, #12]
 8000a7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a80:	edc7 0a01 	vstr	s1, [r7, #4]
 8000a84:	74fb      	strb	r3, [r7, #19]
	dev->i2cHandle = i2cHandle;
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	601a      	str	r2, [r3, #0]
	dev->addr = i2cAddr;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	7cfa      	ldrb	r2, [r7, #19]
 8000a90:	711a      	strb	r2, [r3, #4]
	dev->config = 0;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	2200      	movs	r2, #0
 8000a96:	829a      	strh	r2, [r3, #20]
	dev->shuntVoltage = 0; //max is 81.92mV
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	82da      	strh	r2, [r3, #22]
	dev->busVoltage = 0;
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	831a      	strh	r2, [r3, #24]
	dev->power = 0;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	f04f 0200 	mov.w	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
	dev->current = 0;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f04f 0200 	mov.w	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
	dev->calibration = 0;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	f04f 0200 	mov.w	r2, #0
 8000aba:	625a      	str	r2, [r3, #36]	@ 0x24

	//Current LSB = (Maximum Expected Current)/2^15
	dev->current_LSB = (maxCurrent) / pow(2, 15); // 10A
 8000abc:	68b8      	ldr	r0, [r7, #8]
 8000abe:	f7ff fcfb 	bl	80004b8 <__aeabi_f2d>
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	4b46      	ldr	r3, [pc, #280]	@ (8000be0 <INA226_Initialize+0x170>)
 8000ac8:	f7ff fe78 	bl	80007bc <__aeabi_ddiv>
 8000acc:	4602      	mov	r2, r0
 8000ace:	460b      	mov	r3, r1
 8000ad0:	6979      	ldr	r1, [r7, #20]
 8000ad2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dev->rShunt = shuntResistance; //20 mOHM
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	611a      	str	r2, [r3, #16]

	//store # of errors to check for issues
	uint8_t errNum = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	77fb      	strb	r3, [r7, #31]


	//Check device manufacturing and DIE ID


	status = INA226_ReadRegister(dev,INA226_MANUF_ID_REG , &regData);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	21fe      	movs	r1, #254	@ 0xfe
 8000ae8:	6978      	ldr	r0, [r7, #20]
 8000aea:	f000 f87b 	bl	8000be4 <INA226_ReadRegister>
 8000aee:	4603      	mov	r3, r0
 8000af0:	77bb      	strb	r3, [r7, #30]

	if(regData != INA226_MANUF_ID){
 8000af2:	8bbb      	ldrh	r3, [r7, #28]
 8000af4:	f245 4249 	movw	r2, #21577	@ 0x5449
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d001      	beq.n	8000b00 <INA226_Initialize+0x90>
		//leave since ID doesn't match
		return 255;
 8000afc:	23ff      	movs	r3, #255	@ 0xff
 8000afe:	e066      	b.n	8000bce <INA226_Initialize+0x15e>
	}

	status = INA226_ReadRegister(dev,INA226_DIE_ID_REG, &regData);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	461a      	mov	r2, r3
 8000b06:	21ff      	movs	r1, #255	@ 0xff
 8000b08:	6978      	ldr	r0, [r7, #20]
 8000b0a:	f000 f86b 	bl	8000be4 <INA226_ReadRegister>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	77bb      	strb	r3, [r7, #30]

	if(regData != INA226_DIE_ID){
 8000b12:	8bbb      	ldrh	r3, [r7, #28]
 8000b14:	f242 2260 	movw	r2, #8800	@ 0x2260
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d001      	beq.n	8000b20 <INA226_Initialize+0xb0>
		//leave since ID doesn't match
		return 255;
 8000b1c:	23ff      	movs	r3, #255	@ 0xff
 8000b1e:	e056      	b.n	8000bce <INA226_Initialize+0x15e>

	//Configutation Register: Sets different measuring parameters (Page 22-23)
	  // Bit(B)15 -> reset, B11-B9 -> determines average # of samples taken, B8-6 -> Bus Voltage Conversion Time(CT)
	  // B5-B3 -> Shunt Voltage CT, B2-B0 -> Operating Mode (probing timeframe)

	status = INA226_ReadRegister(dev,INA226_CONFIG_REG , &regData);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	461a      	mov	r2, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	6978      	ldr	r0, [r7, #20]
 8000b2a:	f000 f85b 	bl	8000be4 <INA226_ReadRegister>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	77bb      	strb	r3, [r7, #30]
	errNum += (status != HAL_OK);
 8000b32:	7fbb      	ldrb	r3, [r7, #30]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	bf14      	ite	ne
 8000b38:	2301      	movne	r3, #1
 8000b3a:	2300      	moveq	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	7ffb      	ldrb	r3, [r7, #31]
 8000b42:	4413      	add	r3, r2
 8000b44:	77fb      	strb	r3, [r7, #31]
	dev->config = regData;
 8000b46:	8bba      	ldrh	r2, [r7, #28]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	829a      	strh	r2, [r3, #20]


	//calibration register value (page 15)
	CAL = (0.00512)/(dev->current_LSB * shuntResistance);
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff fcb0 	bl	80004b8 <__aeabi_f2d>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	4629      	mov	r1, r5
 8000b60:	f7ff fd02 	bl	8000568 <__aeabi_dmul>
 8000b64:	4602      	mov	r2, r0
 8000b66:	460b      	mov	r3, r1
 8000b68:	a11b      	add	r1, pc, #108	@ (adr r1, 8000bd8 <INA226_Initialize+0x168>)
 8000b6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b6e:	f7ff fe25 	bl	80007bc <__aeabi_ddiv>
 8000b72:	4602      	mov	r2, r0
 8000b74:	460b      	mov	r3, r1
 8000b76:	4610      	mov	r0, r2
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f7ff ff07 	bl	800098c <__aeabi_d2uiz>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	837b      	strh	r3, [r7, #26]
	status = INA226_WriteRegister(dev, INA226_CALIB_REG, &CAL);
 8000b84:	f107 031a 	add.w	r3, r7, #26
 8000b88:	461a      	mov	r2, r3
 8000b8a:	2105      	movs	r1, #5
 8000b8c:	6978      	ldr	r0, [r7, #20]
 8000b8e:	f000 f856 	bl	8000c3e <INA226_WriteRegister>
 8000b92:	4603      	mov	r3, r0
 8000b94:	77bb      	strb	r3, [r7, #30]
	status = INA226_ReadRegister(dev,INA226_CALIB_REG , &regData);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	2105      	movs	r1, #5
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f000 f820 	bl	8000be4 <INA226_ReadRegister>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	77bb      	strb	r3, [r7, #30]
	errNum += (status != HAL_OK);
 8000ba8:	7fbb      	ldrb	r3, [r7, #30]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bf14      	ite	ne
 8000bae:	2301      	movne	r3, #1
 8000bb0:	2300      	moveq	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	7ffb      	ldrb	r3, [r7, #31]
 8000bb8:	4413      	add	r3, r2
 8000bba:	77fb      	strb	r3, [r7, #31]
	dev->calibration = regData;
 8000bbc:	8bbb      	ldrh	r3, [r7, #28]
 8000bbe:	ee07 3a90 	vmov	s15, r3
 8000bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3720      	adds	r7, #32
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	88e368f1 	.word	0x88e368f1
 8000bdc:	3f74f8b5 	.word	0x3f74f8b5
 8000be0:	40e00000 	.word	0x40e00000

08000be4 <INA226_ReadRegister>:



//Low Level Functions

HAL_StatusTypeDef INA226_ReadRegister(INA226_t *dev, uint8_t reg, uint16_t *data){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	@ 0x28
 8000be8:	af04      	add	r7, sp, #16
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	460b      	mov	r3, r1
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	72fb      	strb	r3, [r7, #11]
    // Read 2 bytes (16 bits) from the register
	uint8_t temp[2];
	HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(dev->i2cHandle, dev->addr, reg, I2C_MEMADD_SIZE_8BIT,temp, 2, HAL_MAX_DELAY);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	791b      	ldrb	r3, [r3, #4]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	7afb      	ldrb	r3, [r7, #11]
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295
 8000c04:	9302      	str	r3, [sp, #8]
 8000c06:	2302      	movs	r3, #2
 8000c08:	9301      	str	r3, [sp, #4]
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2301      	movs	r3, #1
 8000c12:	f002 fe85 	bl	8003920 <HAL_I2C_Mem_Read>
 8000c16:	4603      	mov	r3, r0
 8000c18:	75fb      	strb	r3, [r7, #23]
    //temp is full rn
    uint16_t alldata;

    //Index first, beacause it reads LSB first
    alldata = (uint16_t)temp[0];
 8000c1a:	7c3b      	ldrb	r3, [r7, #16]
 8000c1c:	82bb      	strh	r3, [r7, #20]

    //shift regdata left 8 so # is xxxxxxxx00000000
    alldata = (alldata << 8);
 8000c1e:	8abb      	ldrh	r3, [r7, #20]
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	82bb      	strh	r3, [r7, #20]
    alldata = alldata | (uint16_t)temp[1];
 8000c24:	7c7b      	ldrb	r3, [r7, #17]
 8000c26:	461a      	mov	r2, r3
 8000c28:	8abb      	ldrh	r3, [r7, #20]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	82bb      	strh	r3, [r7, #20]
    *data = alldata;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	8aba      	ldrh	r2, [r7, #20]
 8000c32:	801a      	strh	r2, [r3, #0]
    return status;
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <INA226_WriteRegister>:

HAL_StatusTypeDef INA226_WriteRegister(INA226_t *dev, uint8_t reg, uint16_t *data){
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b08a      	sub	sp, #40	@ 0x28
 8000c42:	af04      	add	r7, sp, #16
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	460b      	mov	r3, r1
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	72fb      	strb	r3, [r7, #11]
    // Write 2 bytes (16 bits) to the specified register
	uint16_t passData = ((*data >> 8) | (*data << 8));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	b21a      	sxth	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	4313      	orrs	r3, r2
 8000c62:	b21b      	sxth	r3, r3
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef status;



	//Pass in a pointer to the 16 bit # as an 8 bit pointer, but use length 2 to write 2 bits.
    status = HAL_I2C_Mem_Write(dev->i2cHandle, dev->addr, (uint16_t)reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&passData, 2, HAL_MAX_DELAY);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	6818      	ldr	r0, [r3, #0]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	791b      	ldrb	r3, [r3, #4]
 8000c70:	4619      	mov	r1, r3
 8000c72:	7afb      	ldrb	r3, [r7, #11]
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	9302      	str	r3, [sp, #8]
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	9301      	str	r3, [sp, #4]
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2301      	movs	r3, #1
 8000c88:	f002 fd36 	bl	80036f8 <HAL_I2C_Mem_Write>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	75fb      	strb	r3, [r7, #23]
    return status;
 8000c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	0000      	movs	r0, r0
 8000c9c:	0000      	movs	r0, r0
	...

08000ca0 <getCurrentAmp>:

// return current value after multiplication
float getCurrentAmp(INA226_t *dev){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	uint16_t regData;
	float currentData;
	float rawVoltage;
	INA226_ReadRegister(dev, INA226_SHUNT_VOLT_REG, &regData);
 8000ca8:	f107 030e 	add.w	r3, r7, #14
 8000cac:	461a      	mov	r2, r3
 8000cae:	2101      	movs	r1, #1
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff97 	bl	8000be4 <INA226_ReadRegister>
	rawVoltage = (float)regData * 81.82 / 32768;
 8000cb6:	89fb      	ldrh	r3, [r7, #14]
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cc0:	ee17 0a90 	vmov	r0, s15
 8000cc4:	f7ff fbf8 	bl	80004b8 <__aeabi_f2d>
 8000cc8:	a321      	add	r3, pc, #132	@ (adr r3, 8000d50 <getCurrentAmp+0xb0>)
 8000cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cce:	f7ff fc4b 	bl	8000568 <__aeabi_dmul>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 0200 	mov.w	r2, #0
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <getCurrentAmp+0xa8>)
 8000ce0:	f7ff fd6c 	bl	80007bc <__aeabi_ddiv>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4610      	mov	r0, r2
 8000cea:	4619      	mov	r1, r3
 8000cec:	f7ff fe6e 	bl	80009cc <__aeabi_d2f>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	617b      	str	r3, [r7, #20]
	currentData = ((rawVoltage/0.02)/1000); //mA to A
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	f7ff fbdf 	bl	80004b8 <__aeabi_f2d>
 8000cfa:	a311      	add	r3, pc, #68	@ (adr r3, 8000d40 <getCurrentAmp+0xa0>)
 8000cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d00:	f7ff fd5c 	bl	80007bc <__aeabi_ddiv>
 8000d04:	4602      	mov	r2, r0
 8000d06:	460b      	mov	r3, r1
 8000d08:	4610      	mov	r0, r2
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f04f 0200 	mov.w	r2, #0
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <getCurrentAmp+0xac>)
 8000d12:	f7ff fd53 	bl	80007bc <__aeabi_ddiv>
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	4610      	mov	r0, r2
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f7ff fe55 	bl	80009cc <__aeabi_d2f>
 8000d22:	4603      	mov	r3, r0
 8000d24:	613b      	str	r3, [r7, #16]
	dev->current = currentData;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	621a      	str	r2, [r3, #32]
	return currentData;
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	ee07 3a90 	vmov	s15, r3
}
 8000d32:	eeb0 0a67 	vmov.f32	s0, s15
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	f3af 8000 	nop.w
 8000d40:	47ae147b 	.word	0x47ae147b
 8000d44:	3f947ae1 	.word	0x3f947ae1
 8000d48:	40e00000 	.word	0x40e00000
 8000d4c:	408f4000 	.word	0x408f4000
 8000d50:	e147ae14 	.word	0xe147ae14
 8000d54:	4054747a 	.word	0x4054747a

08000d58 <getPowerWatt>:

// return power value after multiplication
float getPowerWatt(INA226_t *dev){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	uint16_t regData;
	float rawBusVoltage;
	float powerData;
	INA226_ReadRegister(dev, INA226_BUS_VOLT_REG,&regData);
 8000d60:	f107 030e 	add.w	r3, r7, #14
 8000d64:	461a      	mov	r2, r3
 8000d66:	2102      	movs	r1, #2
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff3b 	bl	8000be4 <INA226_ReadRegister>
	rawBusVoltage = (float)regData * 40.96 / 32768;
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	ee07 3a90 	vmov	s15, r3
 8000d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d78:	ee17 0a90 	vmov	r0, s15
 8000d7c:	f7ff fb9c 	bl	80004b8 <__aeabi_f2d>
 8000d80:	a314      	add	r3, pc, #80	@ (adr r3, 8000dd4 <getPowerWatt+0x7c>)
 8000d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d86:	f7ff fbef 	bl	8000568 <__aeabi_dmul>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <getPowerWatt+0x78>)
 8000d98:	f7ff fd10 	bl	80007bc <__aeabi_ddiv>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4610      	mov	r0, r2
 8000da2:	4619      	mov	r1, r3
 8000da4:	f7ff fe12 	bl	80009cc <__aeabi_d2f>
 8000da8:	4603      	mov	r3, r0
 8000daa:	617b      	str	r3, [r7, #20]
	powerData = (rawBusVoltage*dev->current);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	edd3 7a08 	vldr	s15, [r3, #32]
 8000db2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dba:	edc7 7a04 	vstr	s15, [r7, #16]
	return powerData;
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	ee07 3a90 	vmov	s15, r3
}
 8000dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40e00000 	.word	0x40e00000
 8000dd4:	47ae147b 	.word	0x47ae147b
 8000dd8:	40447ae1 	.word	0x40447ae1

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de2:	f000 fb9e 	bl	8001522 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de6:	f000 f87f 	bl	8000ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dea:	f000 f9af 	bl	800114c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000dee:	f000 f937 	bl	8001060 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000df2:	f000 f8bf 	bl	8000f74 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000df6:	f000 f969 	bl	80010cc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8000dfa:	4835      	ldr	r0, [pc, #212]	@ (8000ed0 <main+0xf4>)
 8000dfc:	f002 f8f1 	bl	8002fe2 <HAL_CAN_Start>

  if (INA226_Initialize(&ina_buck, &hi2c2, INA226_I2C_ADDR_BUCK, 10, 20) != HAL_OK) {
 8000e00:	4b34      	ldr	r3, [pc, #208]	@ (8000ed4 <main+0xf8>)
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8000e08:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000e0c:	2280      	movs	r2, #128	@ 0x80
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4831      	ldr	r0, [pc, #196]	@ (8000ed8 <main+0xfc>)
 8000e12:	f7ff fe2d 	bl	8000a70 <INA226_Initialize>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <main+0x44>
    Error_Handler();
 8000e1c:	f000 f9e0 	bl	80011e0 <Error_Handler>
  }
  if (INA226_Initialize(&ina_supp, &hi2c2, INA226_I2C_ADDR_SUPP, 10, 20) != HAL_OK) {
 8000e20:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed4 <main+0xf8>)
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8000e28:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000e2c:	2282      	movs	r2, #130	@ 0x82
 8000e2e:	4619      	mov	r1, r3
 8000e30:	482a      	ldr	r0, [pc, #168]	@ (8000edc <main+0x100>)
 8000e32:	f7ff fe1d 	bl	8000a70 <INA226_Initialize>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <main+0x64>
      Error_Handler();
 8000e3c:	f000 f9d0 	bl	80011e0 <Error_Handler>
    // heartbeat every 500ms
    // read adc every 500ms
    // read i2c every 500ms
    // send can message every 500ms

    uint32_t current_time = HAL_GetTick();
 8000e40:	f000 fbd8 	bl	80015f4 <HAL_GetTick>
 8000e44:	6078      	str	r0, [r7, #4]
    // every 500ms
    if (current_time - last_toggle_time_heartbeat >= 500) {
 8000e46:	4b26      	ldr	r3, [pc, #152]	@ (8000ee0 <main+0x104>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e52:	d3f5      	bcc.n	8000e40 <main+0x64>
      last_toggle_time_heartbeat = current_time;
 8000e54:	4a22      	ldr	r2, [pc, #136]	@ (8000ee0 <main+0x104>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]

      // toggle led
      HAL_GPIO_TogglePin(OK_LED_GPIO_Port, OK_LED_Pin);
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e60:	f002 fb94 	bl	800358c <HAL_GPIO_TogglePin>

      // read adc
      uint16_t adc = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	807b      	strh	r3, [r7, #2]
      HAL_ADC_Start(&hadc1);
 8000e68:	481e      	ldr	r0, [pc, #120]	@ (8000ee4 <main+0x108>)
 8000e6a:	f000 ff67 	bl	8001d3c <HAL_ADC_Start>
      if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000e6e:	210a      	movs	r1, #10
 8000e70:	481c      	ldr	r0, [pc, #112]	@ (8000ee4 <main+0x108>)
 8000e72:	f001 f851 	bl	8001f18 <HAL_ADC_PollForConversion>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d104      	bne.n	8000e86 <main+0xaa>
        adc = HAL_ADC_GetValue(&hadc1);
 8000e7c:	4819      	ldr	r0, [pc, #100]	@ (8000ee4 <main+0x108>)
 8000e7e:	f001 f923 	bl	80020c8 <HAL_ADC_GetValue>
 8000e82:	4603      	mov	r3, r0
 8000e84:	807b      	strh	r3, [r7, #2]
      }
      HAL_ADC_Stop(&hadc1);
 8000e86:	4817      	ldr	r0, [pc, #92]	@ (8000ee4 <main+0x108>)
 8000e88:	f001 f812 	bl	8001eb0 <HAL_ADC_Stop>

      // read i2c
      ina_buck.current = getCurrentAmp(&ina_buck);
 8000e8c:	4812      	ldr	r0, [pc, #72]	@ (8000ed8 <main+0xfc>)
 8000e8e:	f7ff ff07 	bl	8000ca0 <getCurrentAmp>
 8000e92:	eef0 7a40 	vmov.f32	s15, s0
 8000e96:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <main+0xfc>)
 8000e98:	edc3 7a08 	vstr	s15, [r3, #32]
      ina_buck.power   = getPowerWatt(&ina_buck);
 8000e9c:	480e      	ldr	r0, [pc, #56]	@ (8000ed8 <main+0xfc>)
 8000e9e:	f7ff ff5b 	bl	8000d58 <getPowerWatt>
 8000ea2:	eef0 7a40 	vmov.f32	s15, s0
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <main+0xfc>)
 8000ea8:	edc3 7a07 	vstr	s15, [r3, #28]

      ina_supp.current = getCurrentAmp(&ina_supp);
 8000eac:	480b      	ldr	r0, [pc, #44]	@ (8000edc <main+0x100>)
 8000eae:	f7ff fef7 	bl	8000ca0 <getCurrentAmp>
 8000eb2:	eef0 7a40 	vmov.f32	s15, s0
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <main+0x100>)
 8000eb8:	edc3 7a08 	vstr	s15, [r3, #32]
      ina_supp.power   = getPowerWatt(&ina_supp);
 8000ebc:	4807      	ldr	r0, [pc, #28]	@ (8000edc <main+0x100>)
 8000ebe:	f7ff ff4b 	bl	8000d58 <getPowerWatt>
 8000ec2:	eef0 7a40 	vmov.f32	s15, s0
 8000ec6:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <main+0x100>)
 8000ec8:	edc3 7a07 	vstr	s15, [r3, #28]
  {
 8000ecc:	e7b8      	b.n	8000e40 <main+0x64>
 8000ece:	bf00      	nop
 8000ed0:	20000094 	.word	0x20000094
 8000ed4:	200000bc 	.word	0x200000bc
 8000ed8:	20000118 	.word	0x20000118
 8000edc:	20000140 	.word	0x20000140
 8000ee0:	20000110 	.word	0x20000110
 8000ee4:	2000002c 	.word	0x2000002c

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b096      	sub	sp, #88	@ 0x58
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2244      	movs	r2, #68	@ 0x44
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f004 fcba 	bl	8005870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	463b      	mov	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f0e:	f003 f989 	bl	8004224 <HAL_PWREx_ControlVoltageScaling>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f18:	f000 f962 	bl	80011e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f28:	2360      	movs	r3, #96	@ 0x60
 8000f2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 f9cb 	bl	80042d0 <HAL_RCC_OscConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000f40:	f000 f94e 	bl	80011e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f44:	230f      	movs	r3, #15
 8000f46:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fdd1 	bl	8004b04 <HAL_RCC_ClockConfig>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f68:	f000 f93a 	bl	80011e0 <Error_Handler>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	3758      	adds	r7, #88	@ 0x58
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f96:	4b2f      	ldr	r3, [pc, #188]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000f98:	4a2f      	ldr	r2, [pc, #188]	@ (8001058 <MX_ADC1_Init+0xe4>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fae:	4b29      	ldr	r3, [pc, #164]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb4:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fba:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff6:	4817      	ldr	r0, [pc, #92]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8000ff8:	f000 fd4c 	bl	8001a94 <HAL_ADC_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001002:	f000 f8ed 	bl	80011e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4810      	ldr	r0, [pc, #64]	@ (8001054 <MX_ADC1_Init+0xe0>)
 8001012:	f001 fe3b 	bl	8002c8c <HAL_ADCEx_MultiModeConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800101c:	f000 f8e0 	bl	80011e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001020:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <MX_ADC1_Init+0xe8>)
 8001022:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001024:	2306      	movs	r3, #6
 8001026:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800102c:	237f      	movs	r3, #127	@ 0x7f
 800102e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001030:	2304      	movs	r3, #4
 8001032:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_ADC1_Init+0xe0>)
 800103e:	f001 f851 	bl	80020e4 <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001048:	f000 f8ca 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	@ 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000002c 	.word	0x2000002c
 8001058:	50040000 	.word	0x50040000
 800105c:	04300002 	.word	0x04300002

08001060 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001064:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <MX_CAN1_Init+0x64>)
 8001066:	4a18      	ldr	r2, [pc, #96]	@ (80010c8 <MX_CAN1_Init+0x68>)
 8001068:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <MX_CAN1_Init+0x64>)
 800106c:	2202      	movs	r2, #2
 800106e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <MX_CAN1_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001076:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <MX_CAN1_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_CAN1_Init+0x64>)
 800107e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001082:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_CAN1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_CAN1_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <MX_CAN1_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <MX_CAN1_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800109c:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_CAN1_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <MX_CAN1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_CAN1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <MX_CAN1_Init+0x64>)
 80010b0:	f001 fe9c 	bl	8002dec <HAL_CAN_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80010ba:	f000 f891 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000094 	.word	0x20000094
 80010c8:	40006400 	.word	0x40006400

080010cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001144 <MX_I2C2_Init+0x78>)
 80010d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001148 <MX_I2C2_Init+0x7c>)
 80010da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010dc:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e2:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e8:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010ee:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <MX_I2C2_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_I2C2_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001106:	480e      	ldr	r0, [pc, #56]	@ (8001140 <MX_I2C2_Init+0x74>)
 8001108:	f002 fa5a 	bl	80035c0 <HAL_I2C_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001112:	f000 f865 	bl	80011e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001116:	2100      	movs	r1, #0
 8001118:	4809      	ldr	r0, [pc, #36]	@ (8001140 <MX_I2C2_Init+0x74>)
 800111a:	f002 ffdd 	bl	80040d8 <HAL_I2CEx_ConfigAnalogFilter>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001124:	f000 f85c 	bl	80011e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001128:	2100      	movs	r1, #0
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <MX_I2C2_Init+0x74>)
 800112c:	f003 f81f 	bl	800416e <HAL_I2CEx_ConfigDigitalFilter>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001136:	f000 f853 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200000bc 	.word	0x200000bc
 8001144:	40005800 	.word	0x40005800
 8001148:	00100d14 	.word	0x00100d14

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <MX_GPIO_Init+0x90>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a1d      	ldr	r2, [pc, #116]	@ (80011dc <MX_GPIO_Init+0x90>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b1b      	ldr	r3, [pc, #108]	@ (80011dc <MX_GPIO_Init+0x90>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <MX_GPIO_Init+0x90>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a17      	ldr	r2, [pc, #92]	@ (80011dc <MX_GPIO_Init+0x90>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <MX_GPIO_Init+0x90>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_GPIO_Init+0x90>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a11      	ldr	r2, [pc, #68]	@ (80011dc <MX_GPIO_Init+0x90>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_GPIO_Init+0x90>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ERROR_LED_Pin|OK_LED_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2103      	movs	r1, #3
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b2:	f002 f9d3 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERROR_LED_Pin OK_LED_Pin */
  GPIO_InitStruct.Pin = ERROR_LED_Pin|OK_LED_Pin;
 80011b6:	2303      	movs	r3, #3
 80011b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d0:	f002 f832 	bl	8003238 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011d4:	bf00      	nop
 80011d6:	3720      	adds	r7, #32
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <Error_Handler+0x8>

080011ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <HAL_MspInit+0x44>)
 80011f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001230 <HAL_MspInit+0x44>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80011fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <HAL_MspInit+0x44>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <HAL_MspInit+0x44>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800120e:	4a08      	ldr	r2, [pc, #32]	@ (8001230 <HAL_MspInit+0x44>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001214:	6593      	str	r3, [r2, #88]	@ 0x58
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_MspInit+0x44>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800121a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000

08001234 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b0ac      	sub	sp, #176	@ 0xb0
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	228c      	movs	r2, #140	@ 0x8c
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f004 fb0b 	bl	8005870 <memset>
  if(hadc->Instance==ADC1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a27      	ldr	r2, [pc, #156]	@ (80012fc <HAL_ADC_MspInit+0xc8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d146      	bne.n	80012f2 <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001264:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001268:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800126a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800126e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001272:	2301      	movs	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001276:	2301      	movs	r3, #1
 8001278:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800127a:	2310      	movs	r3, #16
 800127c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800127e:	2302      	movs	r3, #2
 8001280:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001282:	2302      	movs	r3, #2
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001286:	2302      	movs	r3, #2
 8001288:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800128a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4618      	mov	r0, r3
 8001296:	f003 fe21 	bl	8004edc <HAL_RCCEx_PeriphCLKConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80012a0:	f7ff ff9e 	bl	80011e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012a4:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <HAL_ADC_MspInit+0xcc>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a8:	4a15      	ldr	r2, [pc, #84]	@ (8001300 <HAL_ADC_MspInit+0xcc>)
 80012aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b0:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <HAL_ADC_MspInit+0xcc>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012bc:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <HAL_ADC_MspInit+0xcc>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001300 <HAL_ADC_MspInit+0xcc>)
 80012c2:	f043 0304 	orr.w	r3, r3, #4
 80012c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <HAL_ADC_MspInit+0xcc>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = SUPP_BATT_VOLT_Pin;
 80012d4:	2301      	movs	r3, #1
 80012d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012da:	2303      	movs	r3, #3
 80012dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SUPP_BATT_VOLT_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	@ (8001304 <HAL_ADC_MspInit+0xd0>)
 80012ee:	f001 ffa3 	bl	8003238 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012f2:	bf00      	nop
 80012f4:	37b0      	adds	r7, #176	@ 0xb0
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	50040000 	.word	0x50040000
 8001300:	40021000 	.word	0x40021000
 8001304:	48000800 	.word	0x48000800

08001308 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a17      	ldr	r2, [pc, #92]	@ (8001384 <HAL_CAN_MspInit+0x7c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d128      	bne.n	800137c <HAL_CAN_MspInit+0x74>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800132a:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <HAL_CAN_MspInit+0x80>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132e:	4a16      	ldr	r2, [pc, #88]	@ (8001388 <HAL_CAN_MspInit+0x80>)
 8001330:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001334:	6593      	str	r3, [r2, #88]	@ 0x58
 8001336:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <HAL_CAN_MspInit+0x80>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_CAN_MspInit+0x80>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	4a10      	ldr	r2, [pc, #64]	@ (8001388 <HAL_CAN_MspInit+0x80>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <HAL_CAN_MspInit+0x80>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800135a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800136c:	2309      	movs	r3, #9
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4805      	ldr	r0, [pc, #20]	@ (800138c <HAL_CAN_MspInit+0x84>)
 8001378:	f001 ff5e 	bl	8003238 <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800137c:	bf00      	nop
 800137e:	3728      	adds	r7, #40	@ 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40006400 	.word	0x40006400
 8001388:	40021000 	.word	0x40021000
 800138c:	48000400 	.word	0x48000400

08001390 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0ac      	sub	sp, #176	@ 0xb0
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	228c      	movs	r2, #140	@ 0x8c
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 fa5d 	bl	8005870 <memset>
  if(hi2c->Instance==I2C2)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a21      	ldr	r2, [pc, #132]	@ (8001440 <HAL_I2C_MspInit+0xb0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d13b      	bne.n	8001438 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013c0:	2380      	movs	r3, #128	@ 0x80
 80013c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 fd85 	bl	8004edc <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013d8:	f7ff ff02 	bl	80011e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <HAL_I2C_MspInit+0xb4>)
 80013de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e0:	4a18      	ldr	r2, [pc, #96]	@ (8001444 <HAL_I2C_MspInit+0xb4>)
 80013e2:	f043 0302 	orr.w	r3, r3, #2
 80013e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e8:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <HAL_I2C_MspInit+0xb4>)
 80013ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013f4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fc:	2312      	movs	r3, #18
 80013fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800140e:	2304      	movs	r3, #4
 8001410:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001414:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001418:	4619      	mov	r1, r3
 800141a:	480b      	ldr	r0, [pc, #44]	@ (8001448 <HAL_I2C_MspInit+0xb8>)
 800141c:	f001 ff0c 	bl	8003238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <HAL_I2C_MspInit+0xb4>)
 8001422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001424:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <HAL_I2C_MspInit+0xb4>)
 8001426:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800142a:	6593      	str	r3, [r2, #88]	@ 0x58
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_I2C_MspInit+0xb4>)
 800142e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001438:	bf00      	nop
 800143a:	37b0      	adds	r7, #176	@ 0xb0
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40005800 	.word	0x40005800
 8001444:	40021000 	.word	0x40021000
 8001448:	48000400 	.word	0x48000400

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <NMI_Handler+0x4>

08001454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <MemManage_Handler+0x4>

08001464 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <UsageFault_Handler+0x4>

08001474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a2:	f000 f893 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <SystemInit+0x20>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b6:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <SystemInit+0x20>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001508 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d4:	f7ff ffea 	bl	80014ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d8:	480c      	ldr	r0, [pc, #48]	@ (800150c <LoopForever+0x6>)
  ldr r1, =_edata
 80014da:	490d      	ldr	r1, [pc, #52]	@ (8001510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <LoopForever+0xe>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f0:	4c0a      	ldr	r4, [pc, #40]	@ (800151c <LoopForever+0x16>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fe:	f004 f9bf 	bl	8005880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001502:	f7ff fc6b 	bl	8000ddc <main>

08001506 <LoopForever>:

LoopForever:
    b LoopForever
 8001506:	e7fe      	b.n	8001506 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001508:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001514:	08005928 	.word	0x08005928
  ldr r2, =_sbss
 8001518:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800151c:	2000016c 	.word	0x2000016c

08001520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC1_2_IRQHandler>

08001522 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f001 fe4f 	bl	80031d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001532:	200f      	movs	r0, #15
 8001534:	f000 f80e 	bl	8001554 <HAL_InitTick>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	71fb      	strb	r3, [r7, #7]
 8001542:	e001      	b.n	8001548 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001544:	f7ff fe52 	bl	80011ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001548:	79fb      	ldrb	r3, [r7, #7]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001560:	4b17      	ldr	r3, [pc, #92]	@ (80015c0 <HAL_InitTick+0x6c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d023      	beq.n	80015b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001568:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <HAL_InitTick+0x70>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <HAL_InitTick+0x6c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001576:	fbb3 f3f1 	udiv	r3, r3, r1
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f001 fe4d 	bl	800321e <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10f      	bne.n	80015aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d809      	bhi.n	80015a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f001 fe25 	bl	80031e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800159c:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <HAL_InitTick+0x74>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e007      	b.n	80015b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
 80015a8:	e004      	b.n	80015b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	e001      	b.n	80015b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000008 	.word	0x20000008
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000004 	.word	0x20000004

080015cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <HAL_IncTick+0x20>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_IncTick+0x24>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a04      	ldr	r2, [pc, #16]	@ (80015f0 <HAL_IncTick+0x24>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000168 	.word	0x20000168

080015f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b03      	ldr	r3, [pc, #12]	@ (8001608 <HAL_GetTick+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000168 	.word	0x20000168

0800160c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	609a      	str	r2, [r3, #8]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	609a      	str	r2, [r3, #8]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
 8001680:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3360      	adds	r3, #96	@ 0x60
 8001686:	461a      	mov	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <LL_ADC_SetOffset+0x44>)
 8001696:	4013      	ands	r3, r2
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	4313      	orrs	r3, r2
 80016a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016ac:	bf00      	nop
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	03fff000 	.word	0x03fff000

080016bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3360      	adds	r3, #96	@ 0x60
 80016ca:	461a      	mov	r2, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3360      	adds	r3, #96	@ 0x60
 80016f8:	461a      	mov	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	431a      	orrs	r2, r3
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001712:	bf00      	nop
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	615a      	str	r2, [r3, #20]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800176a:	b480      	push	{r7}
 800176c:	b087      	sub	sp, #28
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3330      	adds	r3, #48	@ 0x30
 800177a:	461a      	mov	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	0a1b      	lsrs	r3, r3, #8
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	4413      	add	r3, r2
 8001788:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	211f      	movs	r1, #31
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	401a      	ands	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	0e9b      	lsrs	r3, r3, #26
 80017a2:	f003 011f 	and.w	r1, r3, #31
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	431a      	orrs	r2, r3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017b6:	bf00      	nop
 80017b8:	371c      	adds	r7, #28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b087      	sub	sp, #28
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3314      	adds	r3, #20
 80017d2:	461a      	mov	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	0e5b      	lsrs	r3, r3, #25
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	4413      	add	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	0d1b      	lsrs	r3, r3, #20
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	2107      	movs	r1, #7
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	401a      	ands	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	0d1b      	lsrs	r3, r3, #20
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	431a      	orrs	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800180c:	bf00      	nop
 800180e:	371c      	adds	r7, #28
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001830:	43db      	mvns	r3, r3
 8001832:	401a      	ands	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0318 	and.w	r3, r3, #24
 800183a:	4908      	ldr	r1, [pc, #32]	@ (800185c <LL_ADC_SetChannelSingleDiff+0x44>)
 800183c:	40d9      	lsrs	r1, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	400b      	ands	r3, r1
 8001842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001846:	431a      	orrs	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	0007ffff 	.word	0x0007ffff

08001860 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 031f 	and.w	r3, r3, #31
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80018a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6093      	str	r3, [r2, #8]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018d0:	d101      	bne.n	80018d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80018f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800191c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001920:	d101      	bne.n	8001926 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001944:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001948:	f043 0201 	orr.w	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800196c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001970:	f043 0202 	orr.w	r2, r3, #2
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <LL_ADC_IsEnabled+0x18>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <LL_ADC_IsEnabled+0x1a>
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d101      	bne.n	80019c2 <LL_ADC_IsDisableOngoing+0x18>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <LL_ADC_IsDisableOngoing+0x1a>
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019e4:	f043 0204 	orr.w	r2, r3, #4
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a0c:	f043 0210 	orr.w	r2, r3, #16
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d101      	bne.n	8001a38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a56:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a5a:	f043 0220 	orr.w	r2, r3, #32
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d101      	bne.n	8001a86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a82:	2301      	movs	r3, #1
 8001a84:	e000      	b.n	8001a88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b089      	sub	sp, #36	@ 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e133      	b.n	8001d16 <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff fbb9 	bl	8001234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fef1 	bl	80018bc <LL_ADC_IsDeepPowerDownEnabled>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d004      	beq.n	8001aea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fed7 	bl	8001898 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff0c 	bl	800190c <LL_ADC_IsInternalRegulatorEnabled>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d115      	bne.n	8001b26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fef0 	bl	80018e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b04:	4b86      	ldr	r3, [pc, #536]	@ (8001d20 <HAL_ADC_Init+0x28c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	099b      	lsrs	r3, r3, #6
 8001b0a:	4a86      	ldr	r2, [pc, #536]	@ (8001d24 <HAL_ADC_Init+0x290>)
 8001b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	3301      	adds	r3, #1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b18:	e002      	b.n	8001b20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f9      	bne.n	8001b1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff feee 	bl	800190c <LL_ADC_IsInternalRegulatorEnabled>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10d      	bne.n	8001b52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3a:	f043 0210 	orr.w	r2, r3, #16
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b46:	f043 0201 	orr.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff62 	bl	8001a20 <LL_ADC_REG_IsConversionOngoing>
 8001b5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 80cc 	bne.w	8001d04 <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 80c8 	bne.w	8001d04 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b7c:	f043 0202 	orr.w	r2, r3, #2
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fefb 	bl	8001984 <LL_ADC_IsEnabled>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d115      	bne.n	8001bc0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b94:	4864      	ldr	r0, [pc, #400]	@ (8001d28 <HAL_ADC_Init+0x294>)
 8001b96:	f7ff fef5 	bl	8001984 <LL_ADC_IsEnabled>
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	4863      	ldr	r0, [pc, #396]	@ (8001d2c <HAL_ADC_Init+0x298>)
 8001b9e:	f7ff fef1 	bl	8001984 <LL_ADC_IsEnabled>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	431c      	orrs	r4, r3
 8001ba6:	4862      	ldr	r0, [pc, #392]	@ (8001d30 <HAL_ADC_Init+0x29c>)
 8001ba8:	f7ff feec 	bl	8001984 <LL_ADC_IsEnabled>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4323      	orrs	r3, r4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d105      	bne.n	8001bc0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	485e      	ldr	r0, [pc, #376]	@ (8001d34 <HAL_ADC_Init+0x2a0>)
 8001bbc:	f7ff fd26 	bl	800160c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	7e5b      	ldrb	r3, [r3, #25]
 8001bc4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001bd0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001bd6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bde:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d106      	bne.n	8001bfc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	045b      	lsls	r3, r3, #17
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d009      	beq.n	8001c18 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c08:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c10:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	4b46      	ldr	r3, [pc, #280]	@ (8001d38 <HAL_ADC_Init+0x2a4>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	69b9      	ldr	r1, [r7, #24]
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff1c 	bl	8001a6e <LL_ADC_INJ_IsConversionOngoing>
 8001c36:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d140      	bne.n	8001cc0 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d13d      	bne.n	8001cc0 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7e1b      	ldrb	r3, [r3, #24]
 8001c4c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c4e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c56:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c66:	f023 0306 	bic.w	r3, r3, #6
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	69b9      	ldr	r1, [r7, #24]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d118      	bne.n	8001cb0 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001c88:	f023 0304 	bic.w	r3, r3, #4
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c94:	4311      	orrs	r1, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c9a:	4311      	orrs	r1, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	611a      	str	r2, [r3, #16]
 8001cae:	e007      	b.n	8001cc0 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	f023 010f 	bic.w	r1, r3, #15
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	1e5a      	subs	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ce0:	e007      	b.n	8001cf2 <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 020f 	bic.w	r2, r2, #15
 8001cf0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf6:	f023 0303 	bic.w	r3, r3, #3
 8001cfa:	f043 0201 	orr.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d02:	e007      	b.n	8001d14 <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d08:	f043 0210 	orr.w	r2, r3, #16
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d14:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	@ 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd90      	pop	{r4, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000000 	.word	0x20000000
 8001d24:	053e2d63 	.word	0x053e2d63
 8001d28:	50040000 	.word	0x50040000
 8001d2c:	50040100 	.word	0x50040100
 8001d30:	50040200 	.word	0x50040200
 8001d34:	50040300 	.word	0x50040300
 8001d38:	fff0c007 	.word	0xfff0c007

08001d3c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d44:	4857      	ldr	r0, [pc, #348]	@ (8001ea4 <HAL_ADC_Start+0x168>)
 8001d46:	f7ff fd8b 	bl	8001860 <LL_ADC_GetMultimode>
 8001d4a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fe65 	bl	8001a20 <LL_ADC_REG_IsConversionOngoing>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f040 809c 	bne.w	8001e96 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_Start+0x30>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e097      	b.n	8001e9c <HAL_ADC_Start+0x160>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fe7d 	bl	8002a74 <ADC_Enable>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f040 8083 	bne.w	8001e8c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a42      	ldr	r2, [pc, #264]	@ (8001ea8 <HAL_ADC_Start+0x16c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d002      	beq.n	8001daa <HAL_ADC_Start+0x6e>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	e000      	b.n	8001dac <HAL_ADC_Start+0x70>
 8001daa:	4b40      	ldr	r3, [pc, #256]	@ (8001eac <HAL_ADC_Start+0x170>)
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d002      	beq.n	8001dba <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d105      	bne.n	8001dc6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dd2:	d106      	bne.n	8001de2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd8:	f023 0206 	bic.w	r2, r3, #6
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001de0:	e002      	b.n	8001de8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	221c      	movs	r2, #28
 8001dee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8001ea8 <HAL_ADC_Start+0x16c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d002      	beq.n	8001e08 <HAL_ADC_Start+0xcc>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	e000      	b.n	8001e0a <HAL_ADC_Start+0xce>
 8001e08:	4b28      	ldr	r3, [pc, #160]	@ (8001eac <HAL_ADC_Start+0x170>)
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d008      	beq.n	8001e24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d002      	beq.n	8001e24 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b09      	cmp	r3, #9
 8001e22:	d114      	bne.n	8001e4e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e36:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e3a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fdc2 	bl	80019d0 <LL_ADC_REG_StartConversion>
 8001e4c:	e025      	b.n	8001e9a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	659a      	str	r2, [r3, #88]	@ 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <HAL_ADC_Start+0x16c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d002      	beq.n	8001e6a <HAL_ADC_Start+0x12e>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	e000      	b.n	8001e6c <HAL_ADC_Start+0x130>
 8001e6a:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <HAL_ADC_Start+0x170>)
 8001e6c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00f      	beq.n	8001e9a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e8a:	e006      	b.n	8001e9a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001e94:	e001      	b.n	8001e9a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
 8001e98:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	50040300 	.word	0x50040300
 8001ea8:	50040100 	.word	0x50040100
 8001eac:	50040000 	.word	0x50040000

08001eb0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_Stop+0x16>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e023      	b.n	8001f0e <HAL_ADC_Stop+0x5e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001ece:	2103      	movs	r1, #3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fd13 	bl	80028fc <ADC_ConversionStop>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d111      	bne.n	8001f04 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 fe4d 	bl	8002b80 <ADC_Disable>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d109      	bne.n	8001f04 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f22:	4866      	ldr	r0, [pc, #408]	@ (80020bc <HAL_ADC_PollForConversion+0x1a4>)
 8001f24:	f7ff fc9c 	bl	8001860 <LL_ADC_GetMultimode>
 8001f28:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d102      	bne.n	8001f38 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f32:	2308      	movs	r3, #8
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e02a      	b.n	8001f8e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d002      	beq.n	8001f4a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b09      	cmp	r3, #9
 8001f48:	d111      	bne.n	8001f6e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	f043 0220 	orr.w	r2, r3, #32
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0a4      	b.n	80020b2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f68:	2304      	movs	r3, #4
 8001f6a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f6c:	e00f      	b.n	8001f8e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f6e:	4853      	ldr	r0, [pc, #332]	@ (80020bc <HAL_ADC_PollForConversion+0x1a4>)
 8001f70:	f7ff fc84 	bl	800187c <LL_ADC_GetMultiDMATransfer>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d007      	beq.n	8001f8a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7e:	f043 0220 	orr.w	r2, r3, #32
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	659a      	str	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e093      	b.n	80020b2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f8e:	f7ff fb31 	bl	80015f4 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f94:	e021      	b.n	8001fda <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d01d      	beq.n	8001fda <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f9e:	f7ff fb29 	bl	80015f4 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d302      	bcc.n	8001fb4 <HAL_ADC_PollForConversion+0x9c>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d112      	bne.n	8001fda <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10b      	bne.n	8001fda <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc6:	f043 0204 	orr.w	r2, r3, #4
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e06b      	b.n	80020b2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0d6      	beq.n	8001f96 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fba3 	bl	8001744 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01c      	beq.n	800203e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7e5b      	ldrb	r3, [r3, #25]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d118      	bne.n	800203e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b08      	cmp	r3, #8
 8002018:	d111      	bne.n	800203e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d105      	bne.n	800203e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1f      	ldr	r2, [pc, #124]	@ (80020c0 <HAL_ADC_PollForConversion+0x1a8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d002      	beq.n	800204e <HAL_ADC_PollForConversion+0x136>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	e000      	b.n	8002050 <HAL_ADC_PollForConversion+0x138>
 800204e:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <HAL_ADC_PollForConversion+0x1ac>)
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	4293      	cmp	r3, r2
 8002056:	d008      	beq.n	800206a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d005      	beq.n	800206a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b05      	cmp	r3, #5
 8002062:	d002      	beq.n	800206a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b09      	cmp	r3, #9
 8002068:	d104      	bne.n	8002074 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	e00c      	b.n	800208e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a11      	ldr	r2, [pc, #68]	@ (80020c0 <HAL_ADC_PollForConversion+0x1a8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d002      	beq.n	8002084 <HAL_ADC_PollForConversion+0x16c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	e000      	b.n	8002086 <HAL_ADC_PollForConversion+0x16e>
 8002084:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <HAL_ADC_PollForConversion+0x1ac>)
 8002086:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	2b08      	cmp	r3, #8
 8002092:	d104      	bne.n	800209e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2208      	movs	r2, #8
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	e008      	b.n	80020b0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d103      	bne.n	80020b0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	220c      	movs	r2, #12
 80020ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3720      	adds	r7, #32
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	50040300 	.word	0x50040300
 80020c0:	50040100 	.word	0x50040100
 80020c4:	50040000 	.word	0x50040000

080020c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b0b6      	sub	sp, #216	@ 0xd8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x22>
 8002102:	2302      	movs	r3, #2
 8002104:	e3e3      	b.n	80028ce <HAL_ADC_ConfigChannel+0x7ea>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fc84 	bl	8001a20 <LL_ADC_REG_IsConversionOngoing>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	f040 83c4 	bne.w	80028a8 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d824      	bhi.n	800217a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	3b02      	subs	r3, #2
 8002136:	2b03      	cmp	r3, #3
 8002138:	d81b      	bhi.n	8002172 <HAL_ADC_ConfigChannel+0x8e>
 800213a:	a201      	add	r2, pc, #4	@ (adr r2, 8002140 <HAL_ADC_ConfigChannel+0x5c>)
 800213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002140:	08002151 	.word	0x08002151
 8002144:	08002159 	.word	0x08002159
 8002148:	08002161 	.word	0x08002161
 800214c:	08002169 	.word	0x08002169
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002150:	230c      	movs	r3, #12
 8002152:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002156:	e010      	b.n	800217a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002158:	2312      	movs	r3, #18
 800215a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800215e:	e00c      	b.n	800217a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002160:	2318      	movs	r3, #24
 8002162:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002166:	e008      	b.n	800217a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002168:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800216c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002170:	e003      	b.n	800217a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002172:	2306      	movs	r3, #6
 8002174:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002178:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002188:	f7ff faef 	bl	800176a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fc45 	bl	8001a20 <LL_ADC_REG_IsConversionOngoing>
 8002196:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fc65 	bl	8001a6e <LL_ADC_INJ_IsConversionOngoing>
 80021a4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f040 81bf 	bne.w	8002530 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 81ba 	bne.w	8002530 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021c4:	d10f      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2200      	movs	r2, #0
 80021d0:	4619      	mov	r1, r3
 80021d2:	f7ff faf6 	bl	80017c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fa9d 	bl	800171e <LL_ADC_SetSamplingTimeCommonConfig>
 80021e4:	e00e      	b.n	8002204 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f7ff fae5 	bl	80017c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fa8d 	bl	800171e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	08db      	lsrs	r3, r3, #3
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b04      	cmp	r3, #4
 8002224:	d00a      	beq.n	800223c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6919      	ldr	r1, [r3, #16]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002236:	f7ff fa1d 	bl	8001674 <LL_ADC_SetOffset>
 800223a:	e179      	b.n	8002530 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fa3a 	bl	80016bc <LL_ADC_GetOffsetChannel>
 8002248:	4603      	mov	r3, r0
 800224a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10a      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x184>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fa2f 	bl	80016bc <LL_ADC_GetOffsetChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	0e9b      	lsrs	r3, r3, #26
 8002262:	f003 021f 	and.w	r2, r3, #31
 8002266:	e01e      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x1c2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fa24 	bl	80016bc <LL_ADC_GetOffsetChannel>
 8002274:	4603      	mov	r3, r0
 8002276:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002286:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800228a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800228e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002296:	2320      	movs	r3, #32
 8002298:	e004      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800229a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <HAL_ADC_ConfigChannel+0x1da>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0e9b      	lsrs	r3, r3, #26
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	e018      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x20c>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80022d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80022da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80022e2:	2320      	movs	r3, #32
 80022e4:	e004      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80022e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d106      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2200      	movs	r2, #0
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff f9f3 	bl	80016e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f9d7 	bl	80016bc <LL_ADC_GetOffsetChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10a      	bne.n	800232e <HAL_ADC_ConfigChannel+0x24a>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f9cc 	bl	80016bc <LL_ADC_GetOffsetChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	0e9b      	lsrs	r3, r3, #26
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	e01e      	b.n	800236c <HAL_ADC_ConfigChannel+0x288>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2101      	movs	r1, #1
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff f9c1 	bl	80016bc <LL_ADC_GetOffsetChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800234c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002350:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002354:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800235c:	2320      	movs	r3, #32
 800235e:	e004      	b.n	800236a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002360:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x2a0>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	e018      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x2d2>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002398:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800239c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80023a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80023a8:	2320      	movs	r3, #32
 80023aa:	e004      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80023ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d106      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	2101      	movs	r1, #1
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f990 	bl	80016e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2102      	movs	r1, #2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff f974 	bl	80016bc <LL_ADC_GetOffsetChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10a      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x310>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2102      	movs	r1, #2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff f969 	bl	80016bc <LL_ADC_GetOffsetChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	0e9b      	lsrs	r3, r3, #26
 80023ee:	f003 021f 	and.w	r2, r3, #31
 80023f2:	e01e      	b.n	8002432 <HAL_ADC_ConfigChannel+0x34e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2102      	movs	r1, #2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f95e 	bl	80016bc <LL_ADC_GetOffsetChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002412:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002416:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800241a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002422:	2320      	movs	r3, #32
 8002424:	e004      	b.n	8002430 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002426:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <HAL_ADC_ConfigChannel+0x366>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0e9b      	lsrs	r3, r3, #26
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	e014      	b.n	8002474 <HAL_ADC_ConfigChannel+0x390>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002458:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800245a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800245e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002466:	2320      	movs	r3, #32
 8002468:	e004      	b.n	8002474 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800246a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002474:	429a      	cmp	r2, r3
 8002476:	d106      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2200      	movs	r2, #0
 800247e:	2102      	movs	r1, #2
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff f931 	bl	80016e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2103      	movs	r1, #3
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff f915 	bl	80016bc <LL_ADC_GetOffsetChannel>
 8002492:	4603      	mov	r3, r0
 8002494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x3ce>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2103      	movs	r1, #3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff f90a 	bl	80016bc <LL_ADC_GetOffsetChannel>
 80024a8:	4603      	mov	r3, r0
 80024aa:	0e9b      	lsrs	r3, r3, #26
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	e017      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x3fe>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2103      	movs	r1, #3
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff f8ff 	bl	80016bc <LL_ADC_GetOffsetChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80024ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024cc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80024ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80024d4:	2320      	movs	r3, #32
 80024d6:	e003      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80024d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x416>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	0e9b      	lsrs	r3, r3, #26
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	e011      	b.n	800251e <HAL_ADC_ConfigChannel+0x43a>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002500:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002508:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800250a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800250c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e003      	b.n	800251e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002516:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800251e:	429a      	cmp	r2, r3
 8002520:	d106      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2200      	movs	r2, #0
 8002528:	2103      	movs	r1, #3
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff f8dc 	bl	80016e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fa25 	bl	8001984 <LL_ADC_IsEnabled>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 813f 	bne.w	80027c0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6819      	ldr	r1, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	461a      	mov	r2, r3
 8002550:	f7ff f962 	bl	8001818 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4a8e      	ldr	r2, [pc, #568]	@ (8002794 <HAL_ADC_ConfigChannel+0x6b0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	f040 8130 	bne.w	80027c0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10b      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x4a4>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	3301      	adds	r3, #1
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	2b09      	cmp	r3, #9
 800257e:	bf94      	ite	ls
 8002580:	2301      	movls	r3, #1
 8002582:	2300      	movhi	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	e019      	b.n	80025bc <HAL_ADC_ConfigChannel+0x4d8>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002598:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800259a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80025a0:	2320      	movs	r3, #32
 80025a2:	e003      	b.n	80025ac <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80025a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2b09      	cmp	r3, #9
 80025b4:	bf94      	ite	ls
 80025b6:	2301      	movls	r3, #1
 80025b8:	2300      	movhi	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d079      	beq.n	80026b4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d107      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x4f8>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	0e9b      	lsrs	r3, r3, #26
 80025d2:	3301      	adds	r3, #1
 80025d4:	069b      	lsls	r3, r3, #26
 80025d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025da:	e015      	b.n	8002608 <HAL_ADC_ConfigChannel+0x524>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80025ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80025ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80025f4:	2320      	movs	r3, #32
 80025f6:	e003      	b.n	8002600 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80025f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	3301      	adds	r3, #1
 8002602:	069b      	lsls	r3, r3, #26
 8002604:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002610:	2b00      	cmp	r3, #0
 8002612:	d109      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x544>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	0e9b      	lsrs	r3, r3, #26
 800261a:	3301      	adds	r3, #1
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	2101      	movs	r1, #1
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	e017      	b.n	8002658 <HAL_ADC_ConfigChannel+0x574>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002638:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800263a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002640:	2320      	movs	r3, #32
 8002642:	e003      	b.n	800264c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	3301      	adds	r3, #1
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	2101      	movs	r1, #1
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	ea42 0103 	orr.w	r1, r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10a      	bne.n	800267e <HAL_ADC_ConfigChannel+0x59a>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	3301      	adds	r3, #1
 8002670:	f003 021f 	and.w	r2, r3, #31
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	051b      	lsls	r3, r3, #20
 800267c:	e018      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x5cc>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800268c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002696:	2320      	movs	r3, #32
 8002698:	e003      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800269a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	f003 021f 	and.w	r2, r3, #31
 80026a8:	4613      	mov	r3, r2
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b0:	430b      	orrs	r3, r1
 80026b2:	e080      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d107      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x5ec>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0e9b      	lsrs	r3, r3, #26
 80026c6:	3301      	adds	r3, #1
 80026c8:	069b      	lsls	r3, r3, #26
 80026ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026ce:	e015      	b.n	80026fc <HAL_ADC_ConfigChannel+0x618>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80026e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80026e8:	2320      	movs	r3, #32
 80026ea:	e003      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80026ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	3301      	adds	r3, #1
 80026f6:	069b      	lsls	r3, r3, #26
 80026f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <HAL_ADC_ConfigChannel+0x638>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	0e9b      	lsrs	r3, r3, #26
 800270e:	3301      	adds	r3, #1
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2101      	movs	r1, #1
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	e017      	b.n	800274c <HAL_ADC_ConfigChannel+0x668>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	fa93 f3a3 	rbit	r3, r3
 8002728:	61bb      	str	r3, [r7, #24]
  return result;
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002734:	2320      	movs	r3, #32
 8002736:	e003      	b.n	8002740 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	3301      	adds	r3, #1
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	2101      	movs	r1, #1
 8002748:	fa01 f303 	lsl.w	r3, r1, r3
 800274c:	ea42 0103 	orr.w	r1, r2, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10d      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x694>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0e9b      	lsrs	r3, r3, #26
 8002762:	3301      	adds	r3, #1
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	4613      	mov	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	4413      	add	r3, r2
 800276e:	3b1e      	subs	r3, #30
 8002770:	051b      	lsls	r3, r3, #20
 8002772:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002776:	e01d      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x6d0>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	60fb      	str	r3, [r7, #12]
  return result;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d103      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002790:	2320      	movs	r3, #32
 8002792:	e005      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x6bc>
 8002794:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f003 021f 	and.w	r2, r3, #31
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	3b1e      	subs	r3, #30
 80027ae:	051b      	lsls	r3, r3, #20
 80027b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7ff f801 	bl	80017c2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b44      	ldr	r3, [pc, #272]	@ (80028d8 <HAL_ADC_ConfigChannel+0x7f4>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d07a      	beq.n	80028c2 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027cc:	4843      	ldr	r0, [pc, #268]	@ (80028dc <HAL_ADC_ConfigChannel+0x7f8>)
 80027ce:	f7fe ff43 	bl	8001658 <LL_ADC_GetCommonPathInternalCh>
 80027d2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a41      	ldr	r2, [pc, #260]	@ (80028e0 <HAL_ADC_ConfigChannel+0x7fc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d12c      	bne.n	800283a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d126      	bne.n	800283a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3c      	ldr	r2, [pc, #240]	@ (80028e4 <HAL_ADC_ConfigChannel+0x800>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d004      	beq.n	8002800 <HAL_ADC_ConfigChannel+0x71c>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a3b      	ldr	r2, [pc, #236]	@ (80028e8 <HAL_ADC_ConfigChannel+0x804>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d15d      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002800:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002804:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002808:	4619      	mov	r1, r3
 800280a:	4834      	ldr	r0, [pc, #208]	@ (80028dc <HAL_ADC_ConfigChannel+0x7f8>)
 800280c:	f7fe ff11 	bl	8001632 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002810:	4b36      	ldr	r3, [pc, #216]	@ (80028ec <HAL_ADC_ConfigChannel+0x808>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	099b      	lsrs	r3, r3, #6
 8002816:	4a36      	ldr	r2, [pc, #216]	@ (80028f0 <HAL_ADC_ConfigChannel+0x80c>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	099b      	lsrs	r3, r3, #6
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	4613      	mov	r3, r2
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800282a:	e002      	b.n	8002832 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	3b01      	subs	r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f9      	bne.n	800282c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002838:	e040      	b.n	80028bc <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a2d      	ldr	r2, [pc, #180]	@ (80028f4 <HAL_ADC_ConfigChannel+0x810>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d118      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002844:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002848:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d112      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a23      	ldr	r2, [pc, #140]	@ (80028e4 <HAL_ADC_ConfigChannel+0x800>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d004      	beq.n	8002864 <HAL_ADC_ConfigChannel+0x780>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a22      	ldr	r2, [pc, #136]	@ (80028e8 <HAL_ADC_ConfigChannel+0x804>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d12d      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002868:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800286c:	4619      	mov	r1, r3
 800286e:	481b      	ldr	r0, [pc, #108]	@ (80028dc <HAL_ADC_ConfigChannel+0x7f8>)
 8002870:	f7fe fedf 	bl	8001632 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002874:	e024      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1f      	ldr	r2, [pc, #124]	@ (80028f8 <HAL_ADC_ConfigChannel+0x814>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d120      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002880:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002884:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d11a      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a14      	ldr	r2, [pc, #80]	@ (80028e4 <HAL_ADC_ConfigChannel+0x800>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d115      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002896:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800289a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800289e:	4619      	mov	r1, r3
 80028a0:	480e      	ldr	r0, [pc, #56]	@ (80028dc <HAL_ADC_ConfigChannel+0x7f8>)
 80028a2:	f7fe fec6 	bl	8001632 <LL_ADC_SetCommonPathInternalCh>
 80028a6:	e00c      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ac:	f043 0220 	orr.w	r2, r3, #32
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80028ba:	e002      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028bc:	bf00      	nop
 80028be:	e000      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80028ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	37d8      	adds	r7, #216	@ 0xd8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	80080000 	.word	0x80080000
 80028dc:	50040300 	.word	0x50040300
 80028e0:	c7520000 	.word	0xc7520000
 80028e4:	50040000 	.word	0x50040000
 80028e8:	50040200 	.word	0x50040200
 80028ec:	20000000 	.word	0x20000000
 80028f0:	053e2d63 	.word	0x053e2d63
 80028f4:	cb840000 	.word	0xcb840000
 80028f8:	80000001 	.word	0x80000001

080028fc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f884 	bl	8001a20 <LL_ADC_REG_IsConversionOngoing>
 8002918:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff f8a5 	bl	8001a6e <LL_ADC_INJ_IsConversionOngoing>
 8002924:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d103      	bne.n	8002934 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8098 	beq.w	8002a64 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d02a      	beq.n	8002998 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7e5b      	ldrb	r3, [r3, #25]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d126      	bne.n	8002998 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7e1b      	ldrb	r3, [r3, #24]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d122      	bne.n	8002998 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002952:	2301      	movs	r3, #1
 8002954:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002956:	e014      	b.n	8002982 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	4a45      	ldr	r2, [pc, #276]	@ (8002a70 <ADC_ConversionStop+0x174>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d90d      	bls.n	800297c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002964:	f043 0210 	orr.w	r2, r3, #16
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002970:	f043 0201 	orr.w	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e074      	b.n	8002a66 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	3301      	adds	r3, #1
 8002980:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298c:	2b40      	cmp	r3, #64	@ 0x40
 800298e:	d1e3      	bne.n	8002958 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2240      	movs	r2, #64	@ 0x40
 8002996:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d014      	beq.n	80029c8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff f83c 	bl	8001a20 <LL_ADC_REG_IsConversionOngoing>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fff9 	bl	80019aa <LL_ADC_IsDisableOngoing>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff f818 	bl	80019f8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d014      	beq.n	80029f8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff f84b 	bl	8001a6e <LL_ADC_INJ_IsConversionOngoing>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00c      	beq.n	80029f8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe ffe1 	bl	80019aa <LL_ADC_IsDisableOngoing>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d104      	bne.n	80029f8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff f827 	bl	8001a46 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d005      	beq.n	8002a0a <ADC_ConversionStop+0x10e>
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d105      	bne.n	8002a10 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a04:	230c      	movs	r3, #12
 8002a06:	617b      	str	r3, [r7, #20]
        break;
 8002a08:	e005      	b.n	8002a16 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a0a:	2308      	movs	r3, #8
 8002a0c:	617b      	str	r3, [r7, #20]
        break;
 8002a0e:	e002      	b.n	8002a16 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a10:	2304      	movs	r3, #4
 8002a12:	617b      	str	r3, [r7, #20]
        break;
 8002a14:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a16:	f7fe fded 	bl	80015f4 <HAL_GetTick>
 8002a1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a1c:	e01b      	b.n	8002a56 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a1e:	f7fe fde9 	bl	80015f4 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b05      	cmp	r3, #5
 8002a2a:	d914      	bls.n	8002a56 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00d      	beq.n	8002a56 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3e:	f043 0210 	orr.w	r2, r3, #16
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	f043 0201 	orr.w	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e007      	b.n	8002a66 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1dc      	bne.n	8002a1e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3720      	adds	r7, #32
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	a33fffff 	.word	0xa33fffff

08002a74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe ff7d 	bl	8001984 <LL_ADC_IsEnabled>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d169      	bne.n	8002b64 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	4b36      	ldr	r3, [pc, #216]	@ (8002b70 <ADC_Enable+0xfc>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00d      	beq.n	8002aba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa2:	f043 0210 	orr.w	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e055      	b.n	8002b66 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe ff38 	bl	8001934 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ac4:	482b      	ldr	r0, [pc, #172]	@ (8002b74 <ADC_Enable+0x100>)
 8002ac6:	f7fe fdc7 	bl	8001658 <LL_ADC_GetCommonPathInternalCh>
 8002aca:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002acc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ad4:	4b28      	ldr	r3, [pc, #160]	@ (8002b78 <ADC_Enable+0x104>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	4a28      	ldr	r2, [pc, #160]	@ (8002b7c <ADC_Enable+0x108>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	099b      	lsrs	r3, r3, #6
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002aee:	e002      	b.n	8002af6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f9      	bne.n	8002af0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002afc:	f7fe fd7a 	bl	80015f4 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b02:	e028      	b.n	8002b56 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe ff3b 	bl	8001984 <LL_ADC_IsEnabled>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d104      	bne.n	8002b1e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe ff0b 	bl	8001934 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b1e:	f7fe fd69 	bl	80015f4 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d914      	bls.n	8002b56 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d00d      	beq.n	8002b56 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3e:	f043 0210 	orr.w	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e007      	b.n	8002b66 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d1cf      	bne.n	8002b04 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	8000003f 	.word	0x8000003f
 8002b74:	50040300 	.word	0x50040300
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	053e2d63 	.word	0x053e2d63

08002b80 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe ff0c 	bl	80019aa <LL_ADC_IsDisableOngoing>
 8002b92:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe fef3 	bl	8001984 <LL_ADC_IsEnabled>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d047      	beq.n	8002c34 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d144      	bne.n	8002c34 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 030d 	and.w	r3, r3, #13
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d10c      	bne.n	8002bd2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe fecd 	bl	800195c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bca:	f7fe fd13 	bl	80015f4 <HAL_GetTick>
 8002bce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bd0:	e029      	b.n	8002c26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd6:	f043 0210 	orr.w	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e023      	b.n	8002c36 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bee:	f7fe fd01 	bl	80015f4 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d914      	bls.n	8002c26 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00d      	beq.n	8002c26 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e007      	b.n	8002c36 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1dc      	bne.n	8002bee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <LL_ADC_IsEnabled>:
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <LL_ADC_IsEnabled+0x18>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_ADC_IsEnabled+0x1a>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d101      	bne.n	8002c7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b0a1      	sub	sp, #132	@ 0x84
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e093      	b.n	8002dd2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a47      	ldr	r2, [pc, #284]	@ (8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d102      	bne.n	8002cca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002cc4:	4b46      	ldr	r3, [pc, #280]	@ (8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	e001      	b.n	8002cce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10b      	bne.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd8:	f043 0220 	orr.w	r2, r3, #32
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e072      	b.n	8002dd2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ffb8 	bl	8002c64 <LL_ADC_REG_IsConversionOngoing>
 8002cf4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ffb2 	bl	8002c64 <LL_ADC_REG_IsConversionOngoing>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d154      	bne.n	8002db0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d151      	bne.n	8002db0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d0c:	4b35      	ldr	r3, [pc, #212]	@ (8002de4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002d0e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d02c      	beq.n	8002d72 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d2a:	035b      	lsls	r3, r3, #13
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d34:	4829      	ldr	r0, [pc, #164]	@ (8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d36:	f7ff ff82 	bl	8002c3e <LL_ADC_IsEnabled>
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	4828      	ldr	r0, [pc, #160]	@ (8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d3e:	f7ff ff7e 	bl	8002c3e <LL_ADC_IsEnabled>
 8002d42:	4603      	mov	r3, r0
 8002d44:	431c      	orrs	r4, r3
 8002d46:	4828      	ldr	r0, [pc, #160]	@ (8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d48:	f7ff ff79 	bl	8002c3e <LL_ADC_IsEnabled>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4323      	orrs	r3, r4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d137      	bne.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d5c:	f023 030f 	bic.w	r3, r3, #15
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	6811      	ldr	r1, [r2, #0]
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	6892      	ldr	r2, [r2, #8]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d6e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d70:	e028      	b.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d7c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d7e:	4817      	ldr	r0, [pc, #92]	@ (8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d80:	f7ff ff5d 	bl	8002c3e <LL_ADC_IsEnabled>
 8002d84:	4604      	mov	r4, r0
 8002d86:	4816      	ldr	r0, [pc, #88]	@ (8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d88:	f7ff ff59 	bl	8002c3e <LL_ADC_IsEnabled>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	431c      	orrs	r4, r3
 8002d90:	4815      	ldr	r0, [pc, #84]	@ (8002de8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d92:	f7ff ff54 	bl	8002c3e <LL_ADC_IsEnabled>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4323      	orrs	r3, r4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d112      	bne.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002da6:	f023 030f 	bic.w	r3, r3, #15
 8002daa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002dac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dae:	e009      	b.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db4:	f043 0220 	orr.w	r2, r3, #32
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002dc2:	e000      	b.n	8002dc6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002dce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3784      	adds	r7, #132	@ 0x84
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd90      	pop	{r4, r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	50040000 	.word	0x50040000
 8002de0:	50040100 	.word	0x50040100
 8002de4:	50040300 	.word	0x50040300
 8002de8:	50040200 	.word	0x50040200

08002dec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0ed      	b.n	8002fda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fa7c 	bl	8001308 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e20:	f7fe fbe8 	bl	80015f4 <HAL_GetTick>
 8002e24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e26:	e012      	b.n	8002e4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e28:	f7fe fbe4 	bl	80015f4 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b0a      	cmp	r3, #10
 8002e34:	d90b      	bls.n	8002e4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2205      	movs	r2, #5
 8002e46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0c5      	b.n	8002fda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0e5      	beq.n	8002e28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0202 	bic.w	r2, r2, #2
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e6c:	f7fe fbc2 	bl	80015f4 <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e72:	e012      	b.n	8002e9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e74:	f7fe fbbe 	bl	80015f4 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b0a      	cmp	r3, #10
 8002e80:	d90b      	bls.n	8002e9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2205      	movs	r2, #5
 8002e92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e09f      	b.n	8002fda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e5      	bne.n	8002e74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7e1b      	ldrb	r3, [r3, #24]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d108      	bne.n	8002ec2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	e007      	b.n	8002ed2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ed0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	7e5b      	ldrb	r3, [r3, #25]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d108      	bne.n	8002eec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e007      	b.n	8002efc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002efa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7e9b      	ldrb	r3, [r3, #26]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d108      	bne.n	8002f16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0220 	orr.w	r2, r2, #32
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e007      	b.n	8002f26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0220 	bic.w	r2, r2, #32
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7edb      	ldrb	r3, [r3, #27]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d108      	bne.n	8002f40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0210 	bic.w	r2, r2, #16
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	e007      	b.n	8002f50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0210 	orr.w	r2, r2, #16
 8002f4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7f1b      	ldrb	r3, [r3, #28]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d108      	bne.n	8002f6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0208 	orr.w	r2, r2, #8
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e007      	b.n	8002f7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0208 	bic.w	r2, r2, #8
 8002f78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7f5b      	ldrb	r3, [r3, #29]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d108      	bne.n	8002f94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0204 	orr.w	r2, r2, #4
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	e007      	b.n	8002fa4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0204 	bic.w	r2, r2, #4
 8002fa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	ea42 0103 	orr.w	r1, r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	1e5a      	subs	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d12e      	bne.n	8003054 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800300e:	f7fe faf1 	bl	80015f4 <HAL_GetTick>
 8003012:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003014:	e012      	b.n	800303c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003016:	f7fe faed 	bl	80015f4 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b0a      	cmp	r3, #10
 8003022:	d90b      	bls.n	800303c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2205      	movs	r2, #5
 8003034:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e012      	b.n	8003062 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1e5      	bne.n	8003016 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	e006      	b.n	8003062 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800307c:	4b0c      	ldr	r3, [pc, #48]	@ (80030b0 <__NVIC_SetPriorityGrouping+0x44>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003088:	4013      	ands	r3, r2
 800308a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800309c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800309e:	4a04      	ldr	r2, [pc, #16]	@ (80030b0 <__NVIC_SetPriorityGrouping+0x44>)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	60d3      	str	r3, [r2, #12]
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030b8:	4b04      	ldr	r3, [pc, #16]	@ (80030cc <__NVIC_GetPriorityGrouping+0x18>)
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	0a1b      	lsrs	r3, r3, #8
 80030be:	f003 0307 	and.w	r3, r3, #7
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	6039      	str	r1, [r7, #0]
 80030da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	db0a      	blt.n	80030fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	490c      	ldr	r1, [pc, #48]	@ (800311c <__NVIC_SetPriority+0x4c>)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	0112      	lsls	r2, r2, #4
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	440b      	add	r3, r1
 80030f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f8:	e00a      	b.n	8003110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	4908      	ldr	r1, [pc, #32]	@ (8003120 <__NVIC_SetPriority+0x50>)
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	3b04      	subs	r3, #4
 8003108:	0112      	lsls	r2, r2, #4
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	440b      	add	r3, r1
 800310e:	761a      	strb	r2, [r3, #24]
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000e100 	.word	0xe000e100
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	@ 0x24
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f1c3 0307 	rsb	r3, r3, #7
 800313e:	2b04      	cmp	r3, #4
 8003140:	bf28      	it	cs
 8003142:	2304      	movcs	r3, #4
 8003144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3304      	adds	r3, #4
 800314a:	2b06      	cmp	r3, #6
 800314c:	d902      	bls.n	8003154 <NVIC_EncodePriority+0x30>
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3b03      	subs	r3, #3
 8003152:	e000      	b.n	8003156 <NVIC_EncodePriority+0x32>
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003158:	f04f 32ff 	mov.w	r2, #4294967295
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43da      	mvns	r2, r3
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	401a      	ands	r2, r3
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800316c:	f04f 31ff 	mov.w	r1, #4294967295
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	fa01 f303 	lsl.w	r3, r1, r3
 8003176:	43d9      	mvns	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800317c:	4313      	orrs	r3, r2
         );
}
 800317e:	4618      	mov	r0, r3
 8003180:	3724      	adds	r7, #36	@ 0x24
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3b01      	subs	r3, #1
 8003198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800319c:	d301      	bcc.n	80031a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800319e:	2301      	movs	r3, #1
 80031a0:	e00f      	b.n	80031c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031a2:	4a0a      	ldr	r2, [pc, #40]	@ (80031cc <SysTick_Config+0x40>)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031aa:	210f      	movs	r1, #15
 80031ac:	f04f 30ff 	mov.w	r0, #4294967295
 80031b0:	f7ff ff8e 	bl	80030d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b4:	4b05      	ldr	r3, [pc, #20]	@ (80031cc <SysTick_Config+0x40>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ba:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <SysTick_Config+0x40>)
 80031bc:	2207      	movs	r2, #7
 80031be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	e000e010 	.word	0xe000e010

080031d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff ff47 	bl	800306c <__NVIC_SetPriorityGrouping>
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b086      	sub	sp, #24
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	4603      	mov	r3, r0
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
 80031f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031f8:	f7ff ff5c 	bl	80030b4 <__NVIC_GetPriorityGrouping>
 80031fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	6978      	ldr	r0, [r7, #20]
 8003204:	f7ff ff8e 	bl	8003124 <NVIC_EncodePriority>
 8003208:	4602      	mov	r2, r0
 800320a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff5d 	bl	80030d0 <__NVIC_SetPriority>
}
 8003216:	bf00      	nop
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ffb0 	bl	800318c <SysTick_Config>
 800322c:	4603      	mov	r3, r0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003246:	e166      	b.n	8003516 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2101      	movs	r1, #1
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	4013      	ands	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8158 	beq.w	8003510 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d005      	beq.n	8003278 <HAL_GPIO_Init+0x40>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d130      	bne.n	80032da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2203      	movs	r2, #3
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ae:	2201      	movs	r2, #1
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	f003 0201 	and.w	r2, r3, #1
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d017      	beq.n	8003316 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	2203      	movs	r2, #3
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d123      	bne.n	800336a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	08da      	lsrs	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3208      	adds	r2, #8
 800332a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800332e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	220f      	movs	r2, #15
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	08da      	lsrs	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3208      	adds	r2, #8
 8003364:	6939      	ldr	r1, [r7, #16]
 8003366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	2203      	movs	r2, #3
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 0203 	and.w	r2, r3, #3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80b2 	beq.w	8003510 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ac:	4b61      	ldr	r3, [pc, #388]	@ (8003534 <HAL_GPIO_Init+0x2fc>)
 80033ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b0:	4a60      	ldr	r2, [pc, #384]	@ (8003534 <HAL_GPIO_Init+0x2fc>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80033b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003534 <HAL_GPIO_Init+0x2fc>)
 80033ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033c4:	4a5c      	ldr	r2, [pc, #368]	@ (8003538 <HAL_GPIO_Init+0x300>)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	3302      	adds	r3, #2
 80033cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	220f      	movs	r2, #15
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	4013      	ands	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033ee:	d02b      	beq.n	8003448 <HAL_GPIO_Init+0x210>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a52      	ldr	r2, [pc, #328]	@ (800353c <HAL_GPIO_Init+0x304>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d025      	beq.n	8003444 <HAL_GPIO_Init+0x20c>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a51      	ldr	r2, [pc, #324]	@ (8003540 <HAL_GPIO_Init+0x308>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d01f      	beq.n	8003440 <HAL_GPIO_Init+0x208>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a50      	ldr	r2, [pc, #320]	@ (8003544 <HAL_GPIO_Init+0x30c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d019      	beq.n	800343c <HAL_GPIO_Init+0x204>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a4f      	ldr	r2, [pc, #316]	@ (8003548 <HAL_GPIO_Init+0x310>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <HAL_GPIO_Init+0x200>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a4e      	ldr	r2, [pc, #312]	@ (800354c <HAL_GPIO_Init+0x314>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00d      	beq.n	8003434 <HAL_GPIO_Init+0x1fc>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a4d      	ldr	r2, [pc, #308]	@ (8003550 <HAL_GPIO_Init+0x318>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d007      	beq.n	8003430 <HAL_GPIO_Init+0x1f8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a4c      	ldr	r2, [pc, #304]	@ (8003554 <HAL_GPIO_Init+0x31c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_GPIO_Init+0x1f4>
 8003428:	2307      	movs	r3, #7
 800342a:	e00e      	b.n	800344a <HAL_GPIO_Init+0x212>
 800342c:	2308      	movs	r3, #8
 800342e:	e00c      	b.n	800344a <HAL_GPIO_Init+0x212>
 8003430:	2306      	movs	r3, #6
 8003432:	e00a      	b.n	800344a <HAL_GPIO_Init+0x212>
 8003434:	2305      	movs	r3, #5
 8003436:	e008      	b.n	800344a <HAL_GPIO_Init+0x212>
 8003438:	2304      	movs	r3, #4
 800343a:	e006      	b.n	800344a <HAL_GPIO_Init+0x212>
 800343c:	2303      	movs	r3, #3
 800343e:	e004      	b.n	800344a <HAL_GPIO_Init+0x212>
 8003440:	2302      	movs	r3, #2
 8003442:	e002      	b.n	800344a <HAL_GPIO_Init+0x212>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_GPIO_Init+0x212>
 8003448:	2300      	movs	r3, #0
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	f002 0203 	and.w	r2, r2, #3
 8003450:	0092      	lsls	r2, r2, #2
 8003452:	4093      	lsls	r3, r2
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800345a:	4937      	ldr	r1, [pc, #220]	@ (8003538 <HAL_GPIO_Init+0x300>)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	089b      	lsrs	r3, r3, #2
 8003460:	3302      	adds	r3, #2
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003468:	4b3b      	ldr	r3, [pc, #236]	@ (8003558 <HAL_GPIO_Init+0x320>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	43db      	mvns	r3, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4013      	ands	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800348c:	4a32      	ldr	r2, [pc, #200]	@ (8003558 <HAL_GPIO_Init+0x320>)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003492:	4b31      	ldr	r3, [pc, #196]	@ (8003558 <HAL_GPIO_Init+0x320>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	43db      	mvns	r3, r3
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4013      	ands	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034b6:	4a28      	ldr	r2, [pc, #160]	@ (8003558 <HAL_GPIO_Init+0x320>)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034bc:	4b26      	ldr	r3, [pc, #152]	@ (8003558 <HAL_GPIO_Init+0x320>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003558 <HAL_GPIO_Init+0x320>)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003558 <HAL_GPIO_Init+0x320>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4013      	ands	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800350a:	4a13      	ldr	r2, [pc, #76]	@ (8003558 <HAL_GPIO_Init+0x320>)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	3301      	adds	r3, #1
 8003514:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	f47f ae91 	bne.w	8003248 <HAL_GPIO_Init+0x10>
  }
}
 8003526:	bf00      	nop
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40021000 	.word	0x40021000
 8003538:	40010000 	.word	0x40010000
 800353c:	48000400 	.word	0x48000400
 8003540:	48000800 	.word	0x48000800
 8003544:	48000c00 	.word	0x48000c00
 8003548:	48001000 	.word	0x48001000
 800354c:	48001400 	.word	0x48001400
 8003550:	48001800 	.word	0x48001800
 8003554:	48001c00 	.word	0x48001c00
 8003558:	40010400 	.word	0x40010400

0800355c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
 8003568:	4613      	mov	r3, r2
 800356a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800356c:	787b      	ldrb	r3, [r7, #1]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003578:	e002      	b.n	8003580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800357a:	887a      	ldrh	r2, [r7, #2]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800359e:	887a      	ldrh	r2, [r7, #2]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4013      	ands	r3, r2
 80035a4:	041a      	lsls	r2, r3, #16
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	43d9      	mvns	r1, r3
 80035aa:	887b      	ldrh	r3, [r7, #2]
 80035ac:	400b      	ands	r3, r1
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	619a      	str	r2, [r3, #24]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e08d      	b.n	80036ee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd fed2 	bl	8001390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2224      	movs	r2, #36	@ 0x24
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003610:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003620:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	e006      	b.n	8003648 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003646:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b02      	cmp	r3, #2
 800364e:	d108      	bne.n	8003662 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	e007      	b.n	8003672 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003670:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003680:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003684:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003694:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69d9      	ldr	r1, [r3, #28]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1a      	ldr	r2, [r3, #32]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	4608      	mov	r0, r1
 8003702:	4611      	mov	r1, r2
 8003704:	461a      	mov	r2, r3
 8003706:	4603      	mov	r3, r0
 8003708:	817b      	strh	r3, [r7, #10]
 800370a:	460b      	mov	r3, r1
 800370c:	813b      	strh	r3, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b20      	cmp	r3, #32
 800371c:	f040 80f9 	bne.w	8003912 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_I2C_Mem_Write+0x34>
 8003726:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003728:	2b00      	cmp	r3, #0
 800372a:	d105      	bne.n	8003738 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003732:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0ed      	b.n	8003914 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Mem_Write+0x4e>
 8003742:	2302      	movs	r3, #2
 8003744:	e0e6      	b.n	8003914 <HAL_I2C_Mem_Write+0x21c>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800374e:	f7fd ff51 	bl	80015f4 <HAL_GetTick>
 8003752:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2319      	movs	r3, #25
 800375a:	2201      	movs	r2, #1
 800375c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fac3 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0d1      	b.n	8003914 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2221      	movs	r2, #33	@ 0x21
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2240      	movs	r2, #64	@ 0x40
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a3a      	ldr	r2, [r7, #32]
 800378a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003790:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003798:	88f8      	ldrh	r0, [r7, #6]
 800379a:	893a      	ldrh	r2, [r7, #8]
 800379c:	8979      	ldrh	r1, [r7, #10]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	4603      	mov	r3, r0
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f9d3 	bl	8003b54 <I2C_RequestMemoryWrite>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0a9      	b.n	8003914 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2bff      	cmp	r3, #255	@ 0xff
 80037c8:	d90e      	bls.n	80037e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	22ff      	movs	r2, #255	@ 0xff
 80037ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	8979      	ldrh	r1, [r7, #10]
 80037d8:	2300      	movs	r3, #0
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fc47 	bl	8004074 <I2C_TransferConfig>
 80037e6:	e00f      	b.n	8003808 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	8979      	ldrh	r1, [r7, #10]
 80037fa:	2300      	movs	r3, #0
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fc36 	bl	8004074 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fac6 	bl	8003d9e <I2C_WaitOnTXISFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e07b      	b.n	8003914 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d034      	beq.n	80038c0 <HAL_I2C_Mem_Write+0x1c8>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	d130      	bne.n	80038c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003864:	2200      	movs	r2, #0
 8003866:	2180      	movs	r1, #128	@ 0x80
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 fa3f 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e04d      	b.n	8003914 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2bff      	cmp	r3, #255	@ 0xff
 8003880:	d90e      	bls.n	80038a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	22ff      	movs	r2, #255	@ 0xff
 8003886:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388c:	b2da      	uxtb	r2, r3
 800388e:	8979      	ldrh	r1, [r7, #10]
 8003890:	2300      	movs	r3, #0
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fbeb 	bl	8004074 <I2C_TransferConfig>
 800389e:	e00f      	b.n	80038c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	8979      	ldrh	r1, [r7, #10]
 80038b2:	2300      	movs	r3, #0
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fbda 	bl	8004074 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d19e      	bne.n	8003808 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 faac 	bl	8003e2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e01a      	b.n	8003914 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2220      	movs	r2, #32
 80038e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6859      	ldr	r1, [r3, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4b0a      	ldr	r3, [pc, #40]	@ (800391c <HAL_I2C_Mem_Write+0x224>)
 80038f2:	400b      	ands	r3, r1
 80038f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
  }
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	fe00e800 	.word	0xfe00e800

08003920 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af02      	add	r7, sp, #8
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	4608      	mov	r0, r1
 800392a:	4611      	mov	r1, r2
 800392c:	461a      	mov	r2, r3
 800392e:	4603      	mov	r3, r0
 8003930:	817b      	strh	r3, [r7, #10]
 8003932:	460b      	mov	r3, r1
 8003934:	813b      	strh	r3, [r7, #8]
 8003936:	4613      	mov	r3, r2
 8003938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b20      	cmp	r3, #32
 8003944:	f040 80fd 	bne.w	8003b42 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_I2C_Mem_Read+0x34>
 800394e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800395a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0f1      	b.n	8003b44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_I2C_Mem_Read+0x4e>
 800396a:	2302      	movs	r3, #2
 800396c:	e0ea      	b.n	8003b44 <HAL_I2C_Mem_Read+0x224>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003976:	f7fd fe3d 	bl	80015f4 <HAL_GetTick>
 800397a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	2319      	movs	r3, #25
 8003982:	2201      	movs	r2, #1
 8003984:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f9af 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0d5      	b.n	8003b44 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2222      	movs	r2, #34	@ 0x22
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2240      	movs	r2, #64	@ 0x40
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a3a      	ldr	r2, [r7, #32]
 80039b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039c0:	88f8      	ldrh	r0, [r7, #6]
 80039c2:	893a      	ldrh	r2, [r7, #8]
 80039c4:	8979      	ldrh	r1, [r7, #10]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	4603      	mov	r3, r0
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f913 	bl	8003bfc <I2C_RequestMemoryRead>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0ad      	b.n	8003b44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2bff      	cmp	r3, #255	@ 0xff
 80039f0:	d90e      	bls.n	8003a10 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	8979      	ldrh	r1, [r7, #10]
 8003a00:	4b52      	ldr	r3, [pc, #328]	@ (8003b4c <HAL_I2C_Mem_Read+0x22c>)
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 fb33 	bl	8004074 <I2C_TransferConfig>
 8003a0e:	e00f      	b.n	8003a30 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	8979      	ldrh	r1, [r7, #10]
 8003a22:	4b4a      	ldr	r3, [pc, #296]	@ (8003b4c <HAL_I2C_Mem_Read+0x22c>)
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fb22 	bl	8004074 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a36:	2200      	movs	r2, #0
 8003a38:	2104      	movs	r1, #4
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f956 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e07c      	b.n	8003b44 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d034      	beq.n	8003af0 <HAL_I2C_Mem_Read+0x1d0>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d130      	bne.n	8003af0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a94:	2200      	movs	r2, #0
 8003a96:	2180      	movs	r1, #128	@ 0x80
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f927 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e04d      	b.n	8003b44 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2bff      	cmp	r3, #255	@ 0xff
 8003ab0:	d90e      	bls.n	8003ad0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	8979      	ldrh	r1, [r7, #10]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 fad3 	bl	8004074 <I2C_TransferConfig>
 8003ace:	e00f      	b.n	8003af0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	8979      	ldrh	r1, [r7, #10]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fac2 	bl	8004074 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d19a      	bne.n	8003a30 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f994 	bl	8003e2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e01a      	b.n	8003b44 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2220      	movs	r2, #32
 8003b14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6859      	ldr	r1, [r3, #4]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <HAL_I2C_Mem_Read+0x230>)
 8003b22:	400b      	ands	r3, r1
 8003b24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e000      	b.n	8003b44 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
  }
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	80002400 	.word	0x80002400
 8003b50:	fe00e800 	.word	0xfe00e800

08003b54 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	461a      	mov	r2, r3
 8003b62:	4603      	mov	r3, r0
 8003b64:	817b      	strh	r3, [r7, #10]
 8003b66:	460b      	mov	r3, r1
 8003b68:	813b      	strh	r3, [r7, #8]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	8979      	ldrh	r1, [r7, #10]
 8003b74:	4b20      	ldr	r3, [pc, #128]	@ (8003bf8 <I2C_RequestMemoryWrite+0xa4>)
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fa79 	bl	8004074 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	69b9      	ldr	r1, [r7, #24]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f909 	bl	8003d9e <I2C_WaitOnTXISFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e02c      	b.n	8003bf0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d105      	bne.n	8003ba8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b9c:	893b      	ldrh	r3, [r7, #8]
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ba6:	e015      	b.n	8003bd4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ba8:	893b      	ldrh	r3, [r7, #8]
 8003baa:	0a1b      	lsrs	r3, r3, #8
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb6:	69fa      	ldr	r2, [r7, #28]
 8003bb8:	69b9      	ldr	r1, [r7, #24]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f8ef 	bl	8003d9e <I2C_WaitOnTXISFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e012      	b.n	8003bf0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bca:	893b      	ldrh	r3, [r7, #8]
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2180      	movs	r1, #128	@ 0x80
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f884 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	80002000 	.word	0x80002000

08003bfc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	4608      	mov	r0, r1
 8003c06:	4611      	mov	r1, r2
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	817b      	strh	r3, [r7, #10]
 8003c0e:	460b      	mov	r3, r1
 8003c10:	813b      	strh	r3, [r7, #8]
 8003c12:	4613      	mov	r3, r2
 8003c14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	8979      	ldrh	r1, [r7, #10]
 8003c1c:	4b20      	ldr	r3, [pc, #128]	@ (8003ca0 <I2C_RequestMemoryRead+0xa4>)
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2300      	movs	r3, #0
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fa26 	bl	8004074 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	69b9      	ldr	r1, [r7, #24]
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f8b6 	bl	8003d9e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e02c      	b.n	8003c96 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d105      	bne.n	8003c4e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c42:	893b      	ldrh	r3, [r7, #8]
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c4c:	e015      	b.n	8003c7a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c4e:	893b      	ldrh	r3, [r7, #8]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	69b9      	ldr	r1, [r7, #24]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f89c 	bl	8003d9e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e012      	b.n	8003c96 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c70:	893b      	ldrh	r3, [r7, #8]
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	2200      	movs	r2, #0
 8003c82:	2140      	movs	r1, #64	@ 0x40
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f831 	bl	8003cec <I2C_WaitOnFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	80002000 	.word	0x80002000

08003ca4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d103      	bne.n	8003cc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d007      	beq.n	8003ce0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	619a      	str	r2, [r3, #24]
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cfc:	e03b      	b.n	8003d76 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	6839      	ldr	r1, [r7, #0]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f8d6 	bl	8003eb4 <I2C_IsErrorOccurred>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e041      	b.n	8003d96 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d02d      	beq.n	8003d76 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1a:	f7fd fc6b 	bl	80015f4 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d302      	bcc.n	8003d30 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d122      	bne.n	8003d76 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d113      	bne.n	8003d76 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	f043 0220 	orr.w	r2, r3, #32
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e00f      	b.n	8003d96 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699a      	ldr	r2, [r3, #24]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	bf0c      	ite	eq
 8003d86:	2301      	moveq	r3, #1
 8003d88:	2300      	movne	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d0b4      	beq.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003daa:	e033      	b.n	8003e14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f87f 	bl	8003eb4 <I2C_IsErrorOccurred>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e031      	b.n	8003e24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc6:	d025      	beq.n	8003e14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc8:	f7fd fc14 	bl	80015f4 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d302      	bcc.n	8003dde <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d11a      	bne.n	8003e14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d013      	beq.n	8003e14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e007      	b.n	8003e24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d1c4      	bne.n	8003dac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e38:	e02f      	b.n	8003e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f838 	bl	8003eb4 <I2C_IsErrorOccurred>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e02d      	b.n	8003eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4e:	f7fd fbd1 	bl	80015f4 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d11a      	bne.n	8003e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d013      	beq.n	8003e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e76:	f043 0220 	orr.w	r2, r3, #32
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e007      	b.n	8003eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d1c8      	bne.n	8003e3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b08a      	sub	sp, #40	@ 0x28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d068      	beq.n	8003fb2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2210      	movs	r2, #16
 8003ee6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ee8:	e049      	b.n	8003f7e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef0:	d045      	beq.n	8003f7e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ef2:	f7fd fb7f 	bl	80015f4 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d302      	bcc.n	8003f08 <I2C_IsErrorOccurred+0x54>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d13a      	bne.n	8003f7e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f2a:	d121      	bne.n	8003f70 <I2C_IsErrorOccurred+0xbc>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f32:	d01d      	beq.n	8003f70 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d01a      	beq.n	8003f70 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f4a:	f7fd fb53 	bl	80015f4 <HAL_GetTick>
 8003f4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f50:	e00e      	b.n	8003f70 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f52:	f7fd fb4f 	bl	80015f4 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b19      	cmp	r3, #25
 8003f5e:	d907      	bls.n	8003f70 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	f043 0320 	orr.w	r3, r3, #32
 8003f66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003f6e:	e006      	b.n	8003f7e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d1e9      	bne.n	8003f52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d003      	beq.n	8003f94 <I2C_IsErrorOccurred+0xe0>
 8003f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0aa      	beq.n	8003eea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d103      	bne.n	8003fa4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	f043 0304 	orr.w	r3, r3, #4
 8003faa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00b      	beq.n	8003fdc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f043 0308 	orr.w	r3, r3, #8
 8003fec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ff6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00b      	beq.n	8004020 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	f043 0302 	orr.w	r3, r3, #2
 800400e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004018:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01c      	beq.n	8004062 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f7ff fe3b 	bl	8003ca4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b0d      	ldr	r3, [pc, #52]	@ (8004070 <I2C_IsErrorOccurred+0x1bc>)
 800403a:	400b      	ands	r3, r1
 800403c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	431a      	orrs	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004062:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004066:	4618      	mov	r0, r3
 8004068:	3728      	adds	r7, #40	@ 0x28
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	fe00e800 	.word	0xfe00e800

08004074 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	607b      	str	r3, [r7, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	817b      	strh	r3, [r7, #10]
 8004082:	4613      	mov	r3, r2
 8004084:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004086:	897b      	ldrh	r3, [r7, #10]
 8004088:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800408c:	7a7b      	ldrb	r3, [r7, #9]
 800408e:	041b      	lsls	r3, r3, #16
 8004090:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004094:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	4313      	orrs	r3, r2
 800409e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	0d5b      	lsrs	r3, r3, #21
 80040ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80040b2:	4b08      	ldr	r3, [pc, #32]	@ (80040d4 <I2C_TransferConfig+0x60>)
 80040b4:	430b      	orrs	r3, r1
 80040b6:	43db      	mvns	r3, r3
 80040b8:	ea02 0103 	and.w	r1, r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	03ff63ff 	.word	0x03ff63ff

080040d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b20      	cmp	r3, #32
 80040ec:	d138      	bne.n	8004160 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e032      	b.n	8004162 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2224      	movs	r2, #36	@ 0x24
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800412a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6819      	ldr	r1, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	e000      	b.n	8004162 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004160:	2302      	movs	r3, #2
  }
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800416e:	b480      	push	{r7}
 8004170:	b085      	sub	sp, #20
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b20      	cmp	r3, #32
 8004182:	d139      	bne.n	80041f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800418e:	2302      	movs	r3, #2
 8004190:	e033      	b.n	80041fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2224      	movs	r2, #36	@ 0x24
 800419e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0201 	bic.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e000      	b.n	80041fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041f8:	2302      	movs	r3, #2
  }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800420c:	4b04      	ldr	r3, [pc, #16]	@ (8004220 <HAL_PWREx_GetVoltageRange+0x18>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004214:	4618      	mov	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40007000 	.word	0x40007000

08004224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004232:	d130      	bne.n	8004296 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004234:	4b23      	ldr	r3, [pc, #140]	@ (80042c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800423c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004240:	d038      	beq.n	80042b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004242:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800424a:	4a1e      	ldr	r2, [pc, #120]	@ (80042c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800424c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004250:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004252:	4b1d      	ldr	r3, [pc, #116]	@ (80042c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2232      	movs	r2, #50	@ 0x32
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	4a1b      	ldr	r2, [pc, #108]	@ (80042cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	0c9b      	lsrs	r3, r3, #18
 8004264:	3301      	adds	r3, #1
 8004266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004268:	e002      	b.n	8004270 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3b01      	subs	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004270:	4b14      	ldr	r3, [pc, #80]	@ (80042c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800427c:	d102      	bne.n	8004284 <HAL_PWREx_ControlVoltageScaling+0x60>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f2      	bne.n	800426a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004284:	4b0f      	ldr	r3, [pc, #60]	@ (80042c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800428c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004290:	d110      	bne.n	80042b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e00f      	b.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004296:	4b0b      	ldr	r3, [pc, #44]	@ (80042c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800429e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042a2:	d007      	beq.n	80042b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042a4:	4b07      	ldr	r3, [pc, #28]	@ (80042c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042ac:	4a05      	ldr	r2, [pc, #20]	@ (80042c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40007000 	.word	0x40007000
 80042c8:	20000000 	.word	0x20000000
 80042cc:	431bde83 	.word	0x431bde83

080042d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	f000 bc08 	b.w	8004af4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042e4:	4b96      	ldr	r3, [pc, #600]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042ee:	4b94      	ldr	r3, [pc, #592]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80e4 	beq.w	80044ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d007      	beq.n	800431c <HAL_RCC_OscConfig+0x4c>
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b0c      	cmp	r3, #12
 8004310:	f040 808b 	bne.w	800442a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b01      	cmp	r3, #1
 8004318:	f040 8087 	bne.w	800442a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800431c:	4b88      	ldr	r3, [pc, #544]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_RCC_OscConfig+0x64>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e3df      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1a      	ldr	r2, [r3, #32]
 8004338:	4b81      	ldr	r3, [pc, #516]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d004      	beq.n	800434e <HAL_RCC_OscConfig+0x7e>
 8004344:	4b7e      	ldr	r3, [pc, #504]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800434c:	e005      	b.n	800435a <HAL_RCC_OscConfig+0x8a>
 800434e:	4b7c      	ldr	r3, [pc, #496]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004350:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800435a:	4293      	cmp	r3, r2
 800435c:	d223      	bcs.n	80043a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fd5a 	bl	8004e1c <RCC_SetFlashLatencyFromMSIRange>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e3c0      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004372:	4b73      	ldr	r3, [pc, #460]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a72      	ldr	r2, [pc, #456]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004378:	f043 0308 	orr.w	r3, r3, #8
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	4b70      	ldr	r3, [pc, #448]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	496d      	ldr	r1, [pc, #436]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 800438c:	4313      	orrs	r3, r2
 800438e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004390:	4b6b      	ldr	r3, [pc, #428]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	4968      	ldr	r1, [pc, #416]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
 80043a4:	e025      	b.n	80043f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043a6:	4b66      	ldr	r3, [pc, #408]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a65      	ldr	r2, [pc, #404]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 80043ac:	f043 0308 	orr.w	r3, r3, #8
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	4b63      	ldr	r3, [pc, #396]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	4960      	ldr	r1, [pc, #384]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043c4:	4b5e      	ldr	r3, [pc, #376]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	495b      	ldr	r1, [pc, #364]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d109      	bne.n	80043f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fd1a 	bl	8004e1c <RCC_SetFlashLatencyFromMSIRange>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e380      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043f2:	f000 fc87 	bl	8004d04 <HAL_RCC_GetSysClockFreq>
 80043f6:	4602      	mov	r2, r0
 80043f8:	4b51      	ldr	r3, [pc, #324]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	4950      	ldr	r1, [pc, #320]	@ (8004544 <HAL_RCC_OscConfig+0x274>)
 8004404:	5ccb      	ldrb	r3, [r1, r3]
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	fa22 f303 	lsr.w	r3, r2, r3
 800440e:	4a4e      	ldr	r2, [pc, #312]	@ (8004548 <HAL_RCC_OscConfig+0x278>)
 8004410:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004412:	4b4e      	ldr	r3, [pc, #312]	@ (800454c <HAL_RCC_OscConfig+0x27c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd f89c 	bl	8001554 <HAL_InitTick>
 800441c:	4603      	mov	r3, r0
 800441e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d052      	beq.n	80044cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	e364      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d032      	beq.n	8004498 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004432:	4b43      	ldr	r3, [pc, #268]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a42      	ldr	r2, [pc, #264]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800443e:	f7fd f8d9 	bl	80015f4 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004446:	f7fd f8d5 	bl	80015f4 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e34d      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004458:	4b39      	ldr	r3, [pc, #228]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004464:	4b36      	ldr	r3, [pc, #216]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a35      	ldr	r2, [pc, #212]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 800446a:	f043 0308 	orr.w	r3, r3, #8
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	4b33      	ldr	r3, [pc, #204]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	4930      	ldr	r1, [pc, #192]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 800447e:	4313      	orrs	r3, r2
 8004480:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004482:	4b2f      	ldr	r3, [pc, #188]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	021b      	lsls	r3, r3, #8
 8004490:	492b      	ldr	r1, [pc, #172]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004492:	4313      	orrs	r3, r2
 8004494:	604b      	str	r3, [r1, #4]
 8004496:	e01a      	b.n	80044ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004498:	4b29      	ldr	r3, [pc, #164]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a28      	ldr	r2, [pc, #160]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044a4:	f7fd f8a6 	bl	80015f4 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ac:	f7fd f8a2 	bl	80015f4 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e31a      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044be:	4b20      	ldr	r3, [pc, #128]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x1dc>
 80044ca:	e000      	b.n	80044ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d073      	beq.n	80045c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d005      	beq.n	80044ec <HAL_RCC_OscConfig+0x21c>
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2b0c      	cmp	r3, #12
 80044e4:	d10e      	bne.n	8004504 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d10b      	bne.n	8004504 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	4b14      	ldr	r3, [pc, #80]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d063      	beq.n	80045c0 <HAL_RCC_OscConfig+0x2f0>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d15f      	bne.n	80045c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e2f7      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800450c:	d106      	bne.n	800451c <HAL_RCC_OscConfig+0x24c>
 800450e:	4b0c      	ldr	r3, [pc, #48]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a0b      	ldr	r2, [pc, #44]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e025      	b.n	8004568 <HAL_RCC_OscConfig+0x298>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004524:	d114      	bne.n	8004550 <HAL_RCC_OscConfig+0x280>
 8004526:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a05      	ldr	r2, [pc, #20]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 800452c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	4b03      	ldr	r3, [pc, #12]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a02      	ldr	r2, [pc, #8]	@ (8004540 <HAL_RCC_OscConfig+0x270>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e013      	b.n	8004568 <HAL_RCC_OscConfig+0x298>
 8004540:	40021000 	.word	0x40021000
 8004544:	080058e0 	.word	0x080058e0
 8004548:	20000000 	.word	0x20000000
 800454c:	20000004 	.word	0x20000004
 8004550:	4ba0      	ldr	r3, [pc, #640]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a9f      	ldr	r2, [pc, #636]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 8004556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b9d      	ldr	r3, [pc, #628]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a9c      	ldr	r2, [pc, #624]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 8004562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d013      	beq.n	8004598 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fd f840 	bl	80015f4 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004578:	f7fd f83c 	bl	80015f4 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	@ 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e2b4      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800458a:	4b92      	ldr	r3, [pc, #584]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0x2a8>
 8004596:	e014      	b.n	80045c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fd f82c 	bl	80015f4 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a0:	f7fd f828 	bl	80015f4 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	@ 0x64
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e2a0      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045b2:	4b88      	ldr	r3, [pc, #544]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x2d0>
 80045be:	e000      	b.n	80045c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d060      	beq.n	8004690 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_OscConfig+0x310>
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	d119      	bne.n	800460e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d116      	bne.n	800460e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045e0:	4b7c      	ldr	r3, [pc, #496]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_RCC_OscConfig+0x328>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e27d      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f8:	4b76      	ldr	r3, [pc, #472]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	061b      	lsls	r3, r3, #24
 8004606:	4973      	ldr	r1, [pc, #460]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 8004608:	4313      	orrs	r3, r2
 800460a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800460c:	e040      	b.n	8004690 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d023      	beq.n	800465e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004616:	4b6f      	ldr	r3, [pc, #444]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a6e      	ldr	r2, [pc, #440]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 800461c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004622:	f7fc ffe7 	bl	80015f4 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800462a:	f7fc ffe3 	bl	80015f4 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e25b      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800463c:	4b65      	ldr	r3, [pc, #404]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f0      	beq.n	800462a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004648:	4b62      	ldr	r3, [pc, #392]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	495f      	ldr	r1, [pc, #380]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 8004658:	4313      	orrs	r3, r2
 800465a:	604b      	str	r3, [r1, #4]
 800465c:	e018      	b.n	8004690 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465e:	4b5d      	ldr	r3, [pc, #372]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a5c      	ldr	r2, [pc, #368]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 8004664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466a:	f7fc ffc3 	bl	80015f4 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004672:	f7fc ffbf 	bl	80015f4 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e237      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004684:	4b53      	ldr	r3, [pc, #332]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1f0      	bne.n	8004672 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0308 	and.w	r3, r3, #8
 8004698:	2b00      	cmp	r3, #0
 800469a:	d03c      	beq.n	8004716 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01c      	beq.n	80046de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a4:	4b4b      	ldr	r3, [pc, #300]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 80046a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046aa:	4a4a      	ldr	r2, [pc, #296]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b4:	f7fc ff9e 	bl	80015f4 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046bc:	f7fc ff9a 	bl	80015f4 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e212      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ce:	4b41      	ldr	r3, [pc, #260]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 80046d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0ef      	beq.n	80046bc <HAL_RCC_OscConfig+0x3ec>
 80046dc:	e01b      	b.n	8004716 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046de:	4b3d      	ldr	r3, [pc, #244]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 80046e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e4:	4a3b      	ldr	r2, [pc, #236]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 80046e6:	f023 0301 	bic.w	r3, r3, #1
 80046ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ee:	f7fc ff81 	bl	80015f4 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f6:	f7fc ff7d 	bl	80015f4 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e1f5      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004708:	4b32      	ldr	r3, [pc, #200]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 800470a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1ef      	bne.n	80046f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80a6 	beq.w	8004870 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004724:	2300      	movs	r3, #0
 8004726:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004728:	4b2a      	ldr	r3, [pc, #168]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 800472a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10d      	bne.n	8004750 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004734:	4b27      	ldr	r3, [pc, #156]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 8004736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004738:	4a26      	ldr	r2, [pc, #152]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 800473a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800473e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004740:	4b24      	ldr	r3, [pc, #144]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 8004742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800474c:	2301      	movs	r3, #1
 800474e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004750:	4b21      	ldr	r3, [pc, #132]	@ (80047d8 <HAL_RCC_OscConfig+0x508>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d118      	bne.n	800478e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800475c:	4b1e      	ldr	r3, [pc, #120]	@ (80047d8 <HAL_RCC_OscConfig+0x508>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1d      	ldr	r2, [pc, #116]	@ (80047d8 <HAL_RCC_OscConfig+0x508>)
 8004762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004766:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004768:	f7fc ff44 	bl	80015f4 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004770:	f7fc ff40 	bl	80015f4 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e1b8      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004782:	4b15      	ldr	r3, [pc, #84]	@ (80047d8 <HAL_RCC_OscConfig+0x508>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0f0      	beq.n	8004770 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d108      	bne.n	80047a8 <HAL_RCC_OscConfig+0x4d8>
 8004796:	4b0f      	ldr	r3, [pc, #60]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479c:	4a0d      	ldr	r2, [pc, #52]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047a6:	e029      	b.n	80047fc <HAL_RCC_OscConfig+0x52c>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b05      	cmp	r3, #5
 80047ae:	d115      	bne.n	80047dc <HAL_RCC_OscConfig+0x50c>
 80047b0:	4b08      	ldr	r3, [pc, #32]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b6:	4a07      	ldr	r2, [pc, #28]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 80047b8:	f043 0304 	orr.w	r3, r3, #4
 80047bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047c0:	4b04      	ldr	r3, [pc, #16]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c6:	4a03      	ldr	r2, [pc, #12]	@ (80047d4 <HAL_RCC_OscConfig+0x504>)
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047d0:	e014      	b.n	80047fc <HAL_RCC_OscConfig+0x52c>
 80047d2:	bf00      	nop
 80047d4:	40021000 	.word	0x40021000
 80047d8:	40007000 	.word	0x40007000
 80047dc:	4b9d      	ldr	r3, [pc, #628]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e2:	4a9c      	ldr	r2, [pc, #624]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 80047e4:	f023 0301 	bic.w	r3, r3, #1
 80047e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047ec:	4b99      	ldr	r3, [pc, #612]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f2:	4a98      	ldr	r2, [pc, #608]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 80047f4:	f023 0304 	bic.w	r3, r3, #4
 80047f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d016      	beq.n	8004832 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004804:	f7fc fef6 	bl	80015f4 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800480a:	e00a      	b.n	8004822 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480c:	f7fc fef2 	bl	80015f4 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e168      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004822:	4b8c      	ldr	r3, [pc, #560]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0ed      	beq.n	800480c <HAL_RCC_OscConfig+0x53c>
 8004830:	e015      	b.n	800485e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004832:	f7fc fedf 	bl	80015f4 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004838:	e00a      	b.n	8004850 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483a:	f7fc fedb 	bl	80015f4 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004848:	4293      	cmp	r3, r2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e151      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004850:	4b80      	ldr	r3, [pc, #512]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1ed      	bne.n	800483a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800485e:	7ffb      	ldrb	r3, [r7, #31]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d105      	bne.n	8004870 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004864:	4b7b      	ldr	r3, [pc, #492]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 8004866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004868:	4a7a      	ldr	r2, [pc, #488]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 800486a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800486e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b00      	cmp	r3, #0
 800487a:	d03c      	beq.n	80048f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01c      	beq.n	80048be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004884:	4b73      	ldr	r3, [pc, #460]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 8004886:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800488a:	4a72      	ldr	r2, [pc, #456]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fc feae 	bl	80015f4 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800489c:	f7fc feaa 	bl	80015f4 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e122      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048ae:	4b69      	ldr	r3, [pc, #420]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 80048b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0ef      	beq.n	800489c <HAL_RCC_OscConfig+0x5cc>
 80048bc:	e01b      	b.n	80048f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048be:	4b65      	ldr	r3, [pc, #404]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 80048c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048c4:	4a63      	ldr	r2, [pc, #396]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ce:	f7fc fe91 	bl	80015f4 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048d6:	f7fc fe8d 	bl	80015f4 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e105      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048e8:	4b5a      	ldr	r3, [pc, #360]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 80048ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ef      	bne.n	80048d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 80f9 	beq.w	8004af2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004904:	2b02      	cmp	r3, #2
 8004906:	f040 80cf 	bne.w	8004aa8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800490a:	4b52      	ldr	r3, [pc, #328]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f003 0203 	and.w	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491a:	429a      	cmp	r2, r3
 800491c:	d12c      	bne.n	8004978 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004928:	3b01      	subs	r3, #1
 800492a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d123      	bne.n	8004978 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800493a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d11b      	bne.n	8004978 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d113      	bne.n	8004978 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	3b01      	subs	r3, #1
 800495e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d109      	bne.n	8004978 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	085b      	lsrs	r3, r3, #1
 8004970:	3b01      	subs	r3, #1
 8004972:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004974:	429a      	cmp	r2, r3
 8004976:	d071      	beq.n	8004a5c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b0c      	cmp	r3, #12
 800497c:	d068      	beq.n	8004a50 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800497e:	4b35      	ldr	r3, [pc, #212]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800498a:	4b32      	ldr	r3, [pc, #200]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e0ac      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800499a:	4b2e      	ldr	r3, [pc, #184]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a2d      	ldr	r2, [pc, #180]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 80049a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049a6:	f7fc fe25 	bl	80015f4 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ae:	f7fc fe21 	bl	80015f4 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e099      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c0:	4b24      	ldr	r3, [pc, #144]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1f0      	bne.n	80049ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049cc:	4b21      	ldr	r3, [pc, #132]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	4b21      	ldr	r3, [pc, #132]	@ (8004a58 <HAL_RCC_OscConfig+0x788>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049dc:	3a01      	subs	r2, #1
 80049de:	0112      	lsls	r2, r2, #4
 80049e0:	4311      	orrs	r1, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049e6:	0212      	lsls	r2, r2, #8
 80049e8:	4311      	orrs	r1, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049ee:	0852      	lsrs	r2, r2, #1
 80049f0:	3a01      	subs	r2, #1
 80049f2:	0552      	lsls	r2, r2, #21
 80049f4:	4311      	orrs	r1, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80049fa:	0852      	lsrs	r2, r2, #1
 80049fc:	3a01      	subs	r2, #1
 80049fe:	0652      	lsls	r2, r2, #25
 8004a00:	4311      	orrs	r1, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a06:	06d2      	lsls	r2, r2, #27
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	4912      	ldr	r1, [pc, #72]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a10:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a0f      	ldr	r2, [pc, #60]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 8004a16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a0c      	ldr	r2, [pc, #48]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 8004a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a28:	f7fc fde4 	bl	80015f4 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a30:	f7fc fde0 	bl	80015f4 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e058      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a42:	4b04      	ldr	r3, [pc, #16]	@ (8004a54 <HAL_RCC_OscConfig+0x784>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a4e:	e050      	b.n	8004af2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e04f      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
 8004a54:	40021000 	.word	0x40021000
 8004a58:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5c:	4b27      	ldr	r3, [pc, #156]	@ (8004afc <HAL_RCC_OscConfig+0x82c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d144      	bne.n	8004af2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a68:	4b24      	ldr	r3, [pc, #144]	@ (8004afc <HAL_RCC_OscConfig+0x82c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a23      	ldr	r2, [pc, #140]	@ (8004afc <HAL_RCC_OscConfig+0x82c>)
 8004a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a74:	4b21      	ldr	r3, [pc, #132]	@ (8004afc <HAL_RCC_OscConfig+0x82c>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4a20      	ldr	r2, [pc, #128]	@ (8004afc <HAL_RCC_OscConfig+0x82c>)
 8004a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a80:	f7fc fdb8 	bl	80015f4 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fc fdb4 	bl	80015f4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e02c      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9a:	4b18      	ldr	r3, [pc, #96]	@ (8004afc <HAL_RCC_OscConfig+0x82c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0x7b8>
 8004aa6:	e024      	b.n	8004af2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	d01f      	beq.n	8004aee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aae:	4b13      	ldr	r3, [pc, #76]	@ (8004afc <HAL_RCC_OscConfig+0x82c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a12      	ldr	r2, [pc, #72]	@ (8004afc <HAL_RCC_OscConfig+0x82c>)
 8004ab4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aba:	f7fc fd9b 	bl	80015f4 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac2:	f7fc fd97 	bl	80015f4 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e00f      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad4:	4b09      	ldr	r3, [pc, #36]	@ (8004afc <HAL_RCC_OscConfig+0x82c>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f0      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ae0:	4b06      	ldr	r3, [pc, #24]	@ (8004afc <HAL_RCC_OscConfig+0x82c>)
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	4905      	ldr	r1, [pc, #20]	@ (8004afc <HAL_RCC_OscConfig+0x82c>)
 8004ae6:	4b06      	ldr	r3, [pc, #24]	@ (8004b00 <HAL_RCC_OscConfig+0x830>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60cb      	str	r3, [r1, #12]
 8004aec:	e001      	b.n	8004af2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3720      	adds	r7, #32
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40021000 	.word	0x40021000
 8004b00:	feeefffc 	.word	0xfeeefffc

08004b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0e7      	b.n	8004ce8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b18:	4b75      	ldr	r3, [pc, #468]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d910      	bls.n	8004b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b26:	4b72      	ldr	r3, [pc, #456]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 0207 	bic.w	r2, r3, #7
 8004b2e:	4970      	ldr	r1, [pc, #448]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	4b6e      	ldr	r3, [pc, #440]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0cf      	b.n	8004ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d010      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	4b66      	ldr	r3, [pc, #408]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d908      	bls.n	8004b76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b64:	4b63      	ldr	r3, [pc, #396]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4960      	ldr	r1, [pc, #384]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d04c      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d107      	bne.n	8004b9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b8a:	4b5a      	ldr	r3, [pc, #360]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d121      	bne.n	8004bda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e0a6      	b.n	8004ce8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d107      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ba2:	4b54      	ldr	r3, [pc, #336]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d115      	bne.n	8004bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e09a      	b.n	8004ce8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d107      	bne.n	8004bca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bba:	4b4e      	ldr	r3, [pc, #312]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e08e      	b.n	8004ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bca:	4b4a      	ldr	r3, [pc, #296]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e086      	b.n	8004ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bda:	4b46      	ldr	r3, [pc, #280]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f023 0203 	bic.w	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4943      	ldr	r1, [pc, #268]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bec:	f7fc fd02 	bl	80015f4 <HAL_GetTick>
 8004bf0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf4:	f7fc fcfe 	bl	80015f4 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e06e      	b.n	8004ce8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c0a:	4b3a      	ldr	r3, [pc, #232]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 020c 	and.w	r2, r3, #12
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d1eb      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d010      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	4b31      	ldr	r3, [pc, #196]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d208      	bcs.n	8004c4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c38:	4b2e      	ldr	r3, [pc, #184]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	492b      	ldr	r1, [pc, #172]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c4a:	4b29      	ldr	r3, [pc, #164]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d210      	bcs.n	8004c7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c58:	4b25      	ldr	r3, [pc, #148]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f023 0207 	bic.w	r2, r3, #7
 8004c60:	4923      	ldr	r1, [pc, #140]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c68:	4b21      	ldr	r3, [pc, #132]	@ (8004cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d001      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e036      	b.n	8004ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d008      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c86:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	4918      	ldr	r1, [pc, #96]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d009      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ca4:	4b13      	ldr	r3, [pc, #76]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4910      	ldr	r1, [pc, #64]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cb8:	f000 f824 	bl	8004d04 <HAL_RCC_GetSysClockFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	091b      	lsrs	r3, r3, #4
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	490b      	ldr	r1, [pc, #44]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1f4>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd4:	4a09      	ldr	r2, [pc, #36]	@ (8004cfc <HAL_RCC_ClockConfig+0x1f8>)
 8004cd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cd8:	4b09      	ldr	r3, [pc, #36]	@ (8004d00 <HAL_RCC_ClockConfig+0x1fc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fc fc39 	bl	8001554 <HAL_InitTick>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ce6:	7afb      	ldrb	r3, [r7, #11]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40022000 	.word	0x40022000
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	080058e0 	.word	0x080058e0
 8004cfc:	20000000 	.word	0x20000000
 8004d00:	20000004 	.word	0x20000004

08004d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b089      	sub	sp, #36	@ 0x24
 8004d08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d12:	4b3e      	ldr	r3, [pc, #248]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <HAL_RCC_GetSysClockFreq+0x34>
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	2b0c      	cmp	r3, #12
 8004d30:	d121      	bne.n	8004d76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d11e      	bne.n	8004d76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d38:	4b34      	ldr	r3, [pc, #208]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d107      	bne.n	8004d54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d44:	4b31      	ldr	r3, [pc, #196]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	e005      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d54:	4b2d      	ldr	r3, [pc, #180]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d60:	4a2b      	ldr	r2, [pc, #172]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10d      	bne.n	8004d8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d74:	e00a      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d102      	bne.n	8004d82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d7c:	4b25      	ldr	r3, [pc, #148]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	e004      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d101      	bne.n	8004d8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d88:	4b23      	ldr	r3, [pc, #140]	@ (8004e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b0c      	cmp	r3, #12
 8004d90:	d134      	bne.n	8004dfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d92:	4b1e      	ldr	r3, [pc, #120]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d003      	beq.n	8004daa <HAL_RCC_GetSysClockFreq+0xa6>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d003      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0xac>
 8004da8:	e005      	b.n	8004db6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004daa:	4b1a      	ldr	r3, [pc, #104]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dac:	617b      	str	r3, [r7, #20]
      break;
 8004dae:	e005      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004db0:	4b19      	ldr	r3, [pc, #100]	@ (8004e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8004db2:	617b      	str	r3, [r7, #20]
      break;
 8004db4:	e002      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	617b      	str	r3, [r7, #20]
      break;
 8004dba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dbc:	4b13      	ldr	r3, [pc, #76]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	091b      	lsrs	r3, r3, #4
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dca:	4b10      	ldr	r3, [pc, #64]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	0a1b      	lsrs	r3, r3, #8
 8004dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	fb03 f202 	mul.w	r2, r3, r2
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004de2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	0e5b      	lsrs	r3, r3, #25
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	3301      	adds	r3, #1
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004dfc:	69bb      	ldr	r3, [r7, #24]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3724      	adds	r7, #36	@ 0x24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	080058f0 	.word	0x080058f0
 8004e14:	00f42400 	.word	0x00f42400
 8004e18:	007a1200 	.word	0x007a1200

08004e1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e28:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e34:	f7ff f9e8 	bl	8004208 <HAL_PWREx_GetVoltageRange>
 8004e38:	6178      	str	r0, [r7, #20]
 8004e3a:	e014      	b.n	8004e66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e3c:	4b25      	ldr	r3, [pc, #148]	@ (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e40:	4a24      	ldr	r2, [pc, #144]	@ (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e46:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e48:	4b22      	ldr	r3, [pc, #136]	@ (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e54:	f7ff f9d8 	bl	8004208 <HAL_PWREx_GetVoltageRange>
 8004e58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e64:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e6c:	d10b      	bne.n	8004e86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b80      	cmp	r3, #128	@ 0x80
 8004e72:	d919      	bls.n	8004ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2ba0      	cmp	r3, #160	@ 0xa0
 8004e78:	d902      	bls.n	8004e80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	e013      	b.n	8004ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e80:	2301      	movs	r3, #1
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	e010      	b.n	8004ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b80      	cmp	r3, #128	@ 0x80
 8004e8a:	d902      	bls.n	8004e92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	613b      	str	r3, [r7, #16]
 8004e90:	e00a      	b.n	8004ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b80      	cmp	r3, #128	@ 0x80
 8004e96:	d102      	bne.n	8004e9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e98:	2302      	movs	r3, #2
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	e004      	b.n	8004ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b70      	cmp	r3, #112	@ 0x70
 8004ea2:	d101      	bne.n	8004ea8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f023 0207 	bic.w	r2, r3, #7
 8004eb0:	4909      	ldr	r1, [pc, #36]	@ (8004ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004eb8:	4b07      	ldr	r3, [pc, #28]	@ (8004ed8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d001      	beq.n	8004eca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	40022000 	.word	0x40022000

08004edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ee8:	2300      	movs	r3, #0
 8004eea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d041      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004efc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f00:	d02a      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f02:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f06:	d824      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f0c:	d008      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f0e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f12:	d81e      	bhi.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f1c:	d010      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f1e:	e018      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f20:	4b86      	ldr	r3, [pc, #536]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4a85      	ldr	r2, [pc, #532]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f2c:	e015      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3304      	adds	r3, #4
 8004f32:	2100      	movs	r1, #0
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 facd 	bl	80054d4 <RCCEx_PLLSAI1_Config>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f3e:	e00c      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3320      	adds	r3, #32
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fbb6 	bl	80056b8 <RCCEx_PLLSAI2_Config>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f50:	e003      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	74fb      	strb	r3, [r7, #19]
      break;
 8004f56:	e000      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f5a:	7cfb      	ldrb	r3, [r7, #19]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10b      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f60:	4b76      	ldr	r3, [pc, #472]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f6e:	4973      	ldr	r1, [pc, #460]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f76:	e001      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f78:	7cfb      	ldrb	r3, [r7, #19]
 8004f7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d041      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f90:	d02a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f96:	d824      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f9c:	d008      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fa2:	d81e      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fac:	d010      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fae:	e018      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fb0:	4b62      	ldr	r3, [pc, #392]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a61      	ldr	r2, [pc, #388]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fbc:	e015      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fa85 	bl	80054d4 <RCCEx_PLLSAI1_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fce:	e00c      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3320      	adds	r3, #32
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fb6e 	bl	80056b8 <RCCEx_PLLSAI2_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fe0:	e003      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	74fb      	strb	r3, [r7, #19]
      break;
 8004fe6:	e000      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fea:	7cfb      	ldrb	r3, [r7, #19]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10b      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ff0:	4b52      	ldr	r3, [pc, #328]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ffe:	494f      	ldr	r1, [pc, #316]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005006:	e001      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	7cfb      	ldrb	r3, [r7, #19]
 800500a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80a0 	beq.w	800515a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800501a:	2300      	movs	r3, #0
 800501c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800501e:	4b47      	ldr	r3, [pc, #284]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800502e:	2300      	movs	r3, #0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00d      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005034:	4b41      	ldr	r3, [pc, #260]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005038:	4a40      	ldr	r2, [pc, #256]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800503e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005040:	4b3e      	ldr	r3, [pc, #248]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800504c:	2301      	movs	r3, #1
 800504e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005050:	4b3b      	ldr	r3, [pc, #236]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a3a      	ldr	r2, [pc, #232]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800505a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800505c:	f7fc faca 	bl	80015f4 <HAL_GetTick>
 8005060:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005062:	e009      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005064:	f7fc fac6 	bl	80015f4 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d902      	bls.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	74fb      	strb	r3, [r7, #19]
        break;
 8005076:	e005      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005078:	4b31      	ldr	r3, [pc, #196]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0ef      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005084:	7cfb      	ldrb	r3, [r7, #19]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d15c      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800508a:	4b2c      	ldr	r3, [pc, #176]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005090:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005094:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01f      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d019      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050a8:	4b24      	ldr	r3, [pc, #144]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050b4:	4b21      	ldr	r3, [pc, #132]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ba:	4a20      	ldr	r2, [pc, #128]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050c4:	4b1d      	ldr	r3, [pc, #116]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ca:	4a1c      	ldr	r2, [pc, #112]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050d4:	4a19      	ldr	r2, [pc, #100]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d016      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e6:	f7fc fa85 	bl	80015f4 <HAL_GetTick>
 80050ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ec:	e00b      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ee:	f7fc fa81 	bl	80015f4 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d902      	bls.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	74fb      	strb	r3, [r7, #19]
            break;
 8005104:	e006      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005106:	4b0d      	ldr	r3, [pc, #52]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0ec      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005114:	7cfb      	ldrb	r3, [r7, #19]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10c      	bne.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800511a:	4b08      	ldr	r3, [pc, #32]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005120:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512a:	4904      	ldr	r1, [pc, #16]	@ (800513c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005132:	e009      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005134:	7cfb      	ldrb	r3, [r7, #19]
 8005136:	74bb      	strb	r3, [r7, #18]
 8005138:	e006      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800513a:	bf00      	nop
 800513c:	40021000 	.word	0x40021000
 8005140:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005144:	7cfb      	ldrb	r3, [r7, #19]
 8005146:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005148:	7c7b      	ldrb	r3, [r7, #17]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d105      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800514e:	4ba6      	ldr	r3, [pc, #664]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005152:	4aa5      	ldr	r2, [pc, #660]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005158:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005166:	4ba0      	ldr	r3, [pc, #640]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516c:	f023 0203 	bic.w	r2, r3, #3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005174:	499c      	ldr	r1, [pc, #624]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005188:	4b97      	ldr	r3, [pc, #604]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518e:	f023 020c 	bic.w	r2, r3, #12
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005196:	4994      	ldr	r1, [pc, #592]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00a      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051aa:	4b8f      	ldr	r3, [pc, #572]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b8:	498b      	ldr	r1, [pc, #556]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051cc:	4b86      	ldr	r3, [pc, #536]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051da:	4983      	ldr	r1, [pc, #524]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051ee:	4b7e      	ldr	r3, [pc, #504]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051fc:	497a      	ldr	r1, [pc, #488]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005210:	4b75      	ldr	r3, [pc, #468]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005216:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800521e:	4972      	ldr	r1, [pc, #456]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005232:	4b6d      	ldr	r3, [pc, #436]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005238:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005240:	4969      	ldr	r1, [pc, #420]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005254:	4b64      	ldr	r3, [pc, #400]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005262:	4961      	ldr	r1, [pc, #388]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005276:	4b5c      	ldr	r3, [pc, #368]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800527c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005284:	4958      	ldr	r1, [pc, #352]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005298:	4b53      	ldr	r3, [pc, #332]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a6:	4950      	ldr	r1, [pc, #320]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052ba:	4b4b      	ldr	r3, [pc, #300]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c8:	4947      	ldr	r1, [pc, #284]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052dc:	4b42      	ldr	r3, [pc, #264]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052e2:	f023 0203 	bic.w	r2, r3, #3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ea:	493f      	ldr	r1, [pc, #252]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d028      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052fe:	4b3a      	ldr	r3, [pc, #232]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005304:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530c:	4936      	ldr	r1, [pc, #216]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005318:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800531c:	d106      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800531e:	4b32      	ldr	r3, [pc, #200]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	4a31      	ldr	r2, [pc, #196]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005324:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005328:	60d3      	str	r3, [r2, #12]
 800532a:	e011      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005330:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005334:	d10c      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3304      	adds	r3, #4
 800533a:	2101      	movs	r1, #1
 800533c:	4618      	mov	r0, r3
 800533e:	f000 f8c9 	bl	80054d4 <RCCEx_PLLSAI1_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005346:	7cfb      	ldrb	r3, [r7, #19]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800534c:	7cfb      	ldrb	r3, [r7, #19]
 800534e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d028      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800535c:	4b22      	ldr	r3, [pc, #136]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005362:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800536a:	491f      	ldr	r1, [pc, #124]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005376:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800537a:	d106      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800537c:	4b1a      	ldr	r3, [pc, #104]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	4a19      	ldr	r2, [pc, #100]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005382:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005386:	60d3      	str	r3, [r2, #12]
 8005388:	e011      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800538e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005392:	d10c      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	2101      	movs	r1, #1
 800539a:	4618      	mov	r0, r3
 800539c:	f000 f89a 	bl	80054d4 <RCCEx_PLLSAI1_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053a4:	7cfb      	ldrb	r3, [r7, #19]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80053aa:	7cfb      	ldrb	r3, [r7, #19]
 80053ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d02a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053ba:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053c8:	4907      	ldr	r1, [pc, #28]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053d8:	d108      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053da:	4b03      	ldr	r3, [pc, #12]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	4a02      	ldr	r2, [pc, #8]	@ (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053e4:	60d3      	str	r3, [r2, #12]
 80053e6:	e013      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80053e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053f4:	d10c      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3304      	adds	r3, #4
 80053fa:	2101      	movs	r1, #1
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f869 	bl	80054d4 <RCCEx_PLLSAI1_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005406:	7cfb      	ldrb	r3, [r7, #19]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800540c:	7cfb      	ldrb	r3, [r7, #19]
 800540e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d02f      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800541c:	4b2c      	ldr	r3, [pc, #176]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005422:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800542a:	4929      	ldr	r1, [pc, #164]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005436:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800543a:	d10d      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3304      	adds	r3, #4
 8005440:	2102      	movs	r1, #2
 8005442:	4618      	mov	r0, r3
 8005444:	f000 f846 	bl	80054d4 <RCCEx_PLLSAI1_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800544c:	7cfb      	ldrb	r3, [r7, #19]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d014      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005452:	7cfb      	ldrb	r3, [r7, #19]
 8005454:	74bb      	strb	r3, [r7, #18]
 8005456:	e011      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800545c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005460:	d10c      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3320      	adds	r3, #32
 8005466:	2102      	movs	r1, #2
 8005468:	4618      	mov	r0, r3
 800546a:	f000 f925 	bl	80056b8 <RCCEx_PLLSAI2_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005472:	7cfb      	ldrb	r3, [r7, #19]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005478:	7cfb      	ldrb	r3, [r7, #19]
 800547a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00b      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005488:	4b11      	ldr	r3, [pc, #68]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005498:	490d      	ldr	r1, [pc, #52]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00b      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054ac:	4b08      	ldr	r3, [pc, #32]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054bc:	4904      	ldr	r1, [pc, #16]	@ (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40021000 	.word	0x40021000

080054d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054e2:	4b74      	ldr	r3, [pc, #464]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d018      	beq.n	8005520 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054ee:	4b71      	ldr	r3, [pc, #452]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f003 0203 	and.w	r2, r3, #3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d10d      	bne.n	800551a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
       ||
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005506:	4b6b      	ldr	r3, [pc, #428]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	091b      	lsrs	r3, r3, #4
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
       ||
 8005516:	429a      	cmp	r2, r3
 8005518:	d047      	beq.n	80055aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
 800551e:	e044      	b.n	80055aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b03      	cmp	r3, #3
 8005526:	d018      	beq.n	800555a <RCCEx_PLLSAI1_Config+0x86>
 8005528:	2b03      	cmp	r3, #3
 800552a:	d825      	bhi.n	8005578 <RCCEx_PLLSAI1_Config+0xa4>
 800552c:	2b01      	cmp	r3, #1
 800552e:	d002      	beq.n	8005536 <RCCEx_PLLSAI1_Config+0x62>
 8005530:	2b02      	cmp	r3, #2
 8005532:	d009      	beq.n	8005548 <RCCEx_PLLSAI1_Config+0x74>
 8005534:	e020      	b.n	8005578 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005536:	4b5f      	ldr	r3, [pc, #380]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d11d      	bne.n	800557e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005546:	e01a      	b.n	800557e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005548:	4b5a      	ldr	r3, [pc, #360]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005550:	2b00      	cmp	r3, #0
 8005552:	d116      	bne.n	8005582 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005558:	e013      	b.n	8005582 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800555a:	4b56      	ldr	r3, [pc, #344]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10f      	bne.n	8005586 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005566:	4b53      	ldr	r3, [pc, #332]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005576:	e006      	b.n	8005586 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]
      break;
 800557c:	e004      	b.n	8005588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800557e:	bf00      	nop
 8005580:	e002      	b.n	8005588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005582:	bf00      	nop
 8005584:	e000      	b.n	8005588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005586:	bf00      	nop
    }

    if(status == HAL_OK)
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10d      	bne.n	80055aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800558e:	4b49      	ldr	r3, [pc, #292]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6819      	ldr	r1, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	3b01      	subs	r3, #1
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	430b      	orrs	r3, r1
 80055a4:	4943      	ldr	r1, [pc, #268]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d17c      	bne.n	80056aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055b0:	4b40      	ldr	r3, [pc, #256]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a3f      	ldr	r2, [pc, #252]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055bc:	f7fc f81a 	bl	80015f4 <HAL_GetTick>
 80055c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055c2:	e009      	b.n	80055d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055c4:	f7fc f816 	bl	80015f4 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d902      	bls.n	80055d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	73fb      	strb	r3, [r7, #15]
        break;
 80055d6:	e005      	b.n	80055e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055d8:	4b36      	ldr	r3, [pc, #216]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1ef      	bne.n	80055c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d15f      	bne.n	80056aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d110      	bne.n	8005612 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055f0:	4b30      	ldr	r3, [pc, #192]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80055f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6892      	ldr	r2, [r2, #8]
 8005600:	0211      	lsls	r1, r2, #8
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68d2      	ldr	r2, [r2, #12]
 8005606:	06d2      	lsls	r2, r2, #27
 8005608:	430a      	orrs	r2, r1
 800560a:	492a      	ldr	r1, [pc, #168]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800560c:	4313      	orrs	r3, r2
 800560e:	610b      	str	r3, [r1, #16]
 8005610:	e027      	b.n	8005662 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d112      	bne.n	800563e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005618:	4b26      	ldr	r3, [pc, #152]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005620:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6892      	ldr	r2, [r2, #8]
 8005628:	0211      	lsls	r1, r2, #8
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6912      	ldr	r2, [r2, #16]
 800562e:	0852      	lsrs	r2, r2, #1
 8005630:	3a01      	subs	r2, #1
 8005632:	0552      	lsls	r2, r2, #21
 8005634:	430a      	orrs	r2, r1
 8005636:	491f      	ldr	r1, [pc, #124]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005638:	4313      	orrs	r3, r2
 800563a:	610b      	str	r3, [r1, #16]
 800563c:	e011      	b.n	8005662 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800563e:	4b1d      	ldr	r3, [pc, #116]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005646:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6892      	ldr	r2, [r2, #8]
 800564e:	0211      	lsls	r1, r2, #8
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6952      	ldr	r2, [r2, #20]
 8005654:	0852      	lsrs	r2, r2, #1
 8005656:	3a01      	subs	r2, #1
 8005658:	0652      	lsls	r2, r2, #25
 800565a:	430a      	orrs	r2, r1
 800565c:	4915      	ldr	r1, [pc, #84]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800565e:	4313      	orrs	r3, r2
 8005660:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005662:	4b14      	ldr	r3, [pc, #80]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a13      	ldr	r2, [pc, #76]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005668:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800566c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566e:	f7fb ffc1 	bl	80015f4 <HAL_GetTick>
 8005672:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005674:	e009      	b.n	800568a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005676:	f7fb ffbd 	bl	80015f4 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d902      	bls.n	800568a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	73fb      	strb	r3, [r7, #15]
          break;
 8005688:	e005      	b.n	8005696 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800568a:	4b0a      	ldr	r3, [pc, #40]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0ef      	beq.n	8005676 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d106      	bne.n	80056aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800569c:	4b05      	ldr	r3, [pc, #20]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	4903      	ldr	r1, [pc, #12]	@ (80056b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40021000 	.word	0x40021000

080056b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056c6:	4b69      	ldr	r3, [pc, #420]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d018      	beq.n	8005704 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056d2:	4b66      	ldr	r3, [pc, #408]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f003 0203 	and.w	r2, r3, #3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d10d      	bne.n	80056fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
       ||
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d009      	beq.n	80056fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056ea:	4b60      	ldr	r3, [pc, #384]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	091b      	lsrs	r3, r3, #4
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
       ||
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d047      	beq.n	800578e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	73fb      	strb	r3, [r7, #15]
 8005702:	e044      	b.n	800578e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b03      	cmp	r3, #3
 800570a:	d018      	beq.n	800573e <RCCEx_PLLSAI2_Config+0x86>
 800570c:	2b03      	cmp	r3, #3
 800570e:	d825      	bhi.n	800575c <RCCEx_PLLSAI2_Config+0xa4>
 8005710:	2b01      	cmp	r3, #1
 8005712:	d002      	beq.n	800571a <RCCEx_PLLSAI2_Config+0x62>
 8005714:	2b02      	cmp	r3, #2
 8005716:	d009      	beq.n	800572c <RCCEx_PLLSAI2_Config+0x74>
 8005718:	e020      	b.n	800575c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800571a:	4b54      	ldr	r3, [pc, #336]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d11d      	bne.n	8005762 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800572a:	e01a      	b.n	8005762 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800572c:	4b4f      	ldr	r3, [pc, #316]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005734:	2b00      	cmp	r3, #0
 8005736:	d116      	bne.n	8005766 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800573c:	e013      	b.n	8005766 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800573e:	4b4b      	ldr	r3, [pc, #300]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10f      	bne.n	800576a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800574a:	4b48      	ldr	r3, [pc, #288]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800575a:	e006      	b.n	800576a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	73fb      	strb	r3, [r7, #15]
      break;
 8005760:	e004      	b.n	800576c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005762:	bf00      	nop
 8005764:	e002      	b.n	800576c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005766:	bf00      	nop
 8005768:	e000      	b.n	800576c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800576a:	bf00      	nop
    }

    if(status == HAL_OK)
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10d      	bne.n	800578e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005772:	4b3e      	ldr	r3, [pc, #248]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6819      	ldr	r1, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	3b01      	subs	r3, #1
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	430b      	orrs	r3, r1
 8005788:	4938      	ldr	r1, [pc, #224]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 800578a:	4313      	orrs	r3, r2
 800578c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d166      	bne.n	8005862 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005794:	4b35      	ldr	r3, [pc, #212]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a34      	ldr	r2, [pc, #208]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 800579a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800579e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057a0:	f7fb ff28 	bl	80015f4 <HAL_GetTick>
 80057a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057a6:	e009      	b.n	80057bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057a8:	f7fb ff24 	bl	80015f4 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d902      	bls.n	80057bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	73fb      	strb	r3, [r7, #15]
        break;
 80057ba:	e005      	b.n	80057c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057bc:	4b2b      	ldr	r3, [pc, #172]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1ef      	bne.n	80057a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d149      	bne.n	8005862 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d110      	bne.n	80057f6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057d4:	4b25      	ldr	r3, [pc, #148]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80057dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6892      	ldr	r2, [r2, #8]
 80057e4:	0211      	lsls	r1, r2, #8
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	68d2      	ldr	r2, [r2, #12]
 80057ea:	06d2      	lsls	r2, r2, #27
 80057ec:	430a      	orrs	r2, r1
 80057ee:	491f      	ldr	r1, [pc, #124]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	614b      	str	r3, [r1, #20]
 80057f4:	e011      	b.n	800581a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057f6:	4b1d      	ldr	r3, [pc, #116]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80057fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6892      	ldr	r2, [r2, #8]
 8005806:	0211      	lsls	r1, r2, #8
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6912      	ldr	r2, [r2, #16]
 800580c:	0852      	lsrs	r2, r2, #1
 800580e:	3a01      	subs	r2, #1
 8005810:	0652      	lsls	r2, r2, #25
 8005812:	430a      	orrs	r2, r1
 8005814:	4915      	ldr	r1, [pc, #84]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005816:	4313      	orrs	r3, r2
 8005818:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800581a:	4b14      	ldr	r3, [pc, #80]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a13      	ldr	r2, [pc, #76]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005824:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005826:	f7fb fee5 	bl	80015f4 <HAL_GetTick>
 800582a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800582c:	e009      	b.n	8005842 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800582e:	f7fb fee1 	bl	80015f4 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d902      	bls.n	8005842 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	73fb      	strb	r3, [r7, #15]
          break;
 8005840:	e005      	b.n	800584e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005842:	4b0a      	ldr	r3, [pc, #40]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0ef      	beq.n	800582e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d106      	bne.n	8005862 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005854:	4b05      	ldr	r3, [pc, #20]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005856:	695a      	ldr	r2, [r3, #20]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	4903      	ldr	r1, [pc, #12]	@ (800586c <RCCEx_PLLSAI2_Config+0x1b4>)
 800585e:	4313      	orrs	r3, r2
 8005860:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005862:	7bfb      	ldrb	r3, [r7, #15]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40021000 	.word	0x40021000

08005870 <memset>:
 8005870:	4402      	add	r2, r0
 8005872:	4603      	mov	r3, r0
 8005874:	4293      	cmp	r3, r2
 8005876:	d100      	bne.n	800587a <memset+0xa>
 8005878:	4770      	bx	lr
 800587a:	f803 1b01 	strb.w	r1, [r3], #1
 800587e:	e7f9      	b.n	8005874 <memset+0x4>

08005880 <__libc_init_array>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	4d0d      	ldr	r5, [pc, #52]	@ (80058b8 <__libc_init_array+0x38>)
 8005884:	4c0d      	ldr	r4, [pc, #52]	@ (80058bc <__libc_init_array+0x3c>)
 8005886:	1b64      	subs	r4, r4, r5
 8005888:	10a4      	asrs	r4, r4, #2
 800588a:	2600      	movs	r6, #0
 800588c:	42a6      	cmp	r6, r4
 800588e:	d109      	bne.n	80058a4 <__libc_init_array+0x24>
 8005890:	4d0b      	ldr	r5, [pc, #44]	@ (80058c0 <__libc_init_array+0x40>)
 8005892:	4c0c      	ldr	r4, [pc, #48]	@ (80058c4 <__libc_init_array+0x44>)
 8005894:	f000 f818 	bl	80058c8 <_init>
 8005898:	1b64      	subs	r4, r4, r5
 800589a:	10a4      	asrs	r4, r4, #2
 800589c:	2600      	movs	r6, #0
 800589e:	42a6      	cmp	r6, r4
 80058a0:	d105      	bne.n	80058ae <__libc_init_array+0x2e>
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a8:	4798      	blx	r3
 80058aa:	3601      	adds	r6, #1
 80058ac:	e7ee      	b.n	800588c <__libc_init_array+0xc>
 80058ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b2:	4798      	blx	r3
 80058b4:	3601      	adds	r6, #1
 80058b6:	e7f2      	b.n	800589e <__libc_init_array+0x1e>
 80058b8:	08005920 	.word	0x08005920
 80058bc:	08005920 	.word	0x08005920
 80058c0:	08005920 	.word	0x08005920
 80058c4:	08005924 	.word	0x08005924

080058c8 <_init>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	bf00      	nop
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr

080058d4 <_fini>:
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	bf00      	nop
 80058d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058da:	bc08      	pop	{r3}
 80058dc:	469e      	mov	lr, r3
 80058de:	4770      	bx	lr
